package change.vector.collector;

// from 
//import org.eclipse.jdt.core.dom.ASTNode; //+ some gumtree

public class MyASTNode {
	static int nodenums = 106;
	static public String[] nodes = {
	 "AnnotationTypeDeclaration",
	 "AnnotationTypeMemberDeclaration",
	 "AnonymousClassDeclaration",
	 "ArrayAccess",
	 "ArrayCreation",
	 "ArrayInitializer",
	 "ArrayType",
	 "AssertStatement",
	 "Assignment",
	 "Block",
	 "BlockComment",
	 "BooleanLiteral",
	 "BreakStatement",
	 "CastExpression",
	 "CatchClause",
	 "CharacterLiteral",
	 "ClassInstanceCreation",
	 "CompilationUnit",
	 "ConditionalExpression",
	 "ConstructorInvocation",
	 "ContinueStatement",
	 "CreationReference",
	 "Dimension",
	 "DoStatement",
	 "EmptyStatement",
	 "EnhancedForStatement",
	 "EnumConstantDeclaration",
	 "EnumDeclaration",
	 "ExportsDirective",
	 "ExpressionMethodReference",
	 "ExpressionStatement",
	 "FieldAccess",
	 "FieldDeclaration",
	 "ForStatement",
	 "IfStatement",
	 "ImportDeclaration",
	 "InfixExpression",
	 "Initializer",
	 "InstanceofExpression",
	 "IntersectionType",
	 "Javadoc",
	 "LabeledStatement",
	 "LambdaExpression",
	 "LineComment",
	 "MarkerAnnotation",
	 "MemberRef",
	 "MemberValuePair",
	 "MethodDeclaration",
	 "MethodInvocation",
	 "MethodRef",
	 "MethodRefParameter",
	 "Modifier",
	 "ModuleDeclaration",
	 "ModuleModifier",
	 "NameQualifiedType",
	 "NormalAnnotation",
	 "NullLiteral",
	 "NumberLiteral",
	 "OpensDirective",
	 "PackageDeclaration",
	 "ParameterizedType",
	 "ParenthesizedExpression",
	 "PostfixExpression",
	 "PrefixExpression",
	 "PrimitiveType",
	 "ProvidesDirective",
	 "QualifiedName",
	 "QualifiedType",
	 "RequiresDirective",
	 "Statement",
	 "SimpleName",
	 "SimpleType",
	 "SingleMemberAnnotation",
	 "SingleVariableDeclaration",
	 "StringLiteral",
	 "SuperConstructorInvocation",
	 "SuperFieldAccess",
	 "SuperMethodInvocation",
	 "SuperMethodReference",
	 "SwitchCase",
	 "SwitchStatement",
	 "SynchronizedStatement",
	 "TagElement",
	 "TextElement",
	 "ThisExpression",
	 "ThrowStatement",
	 "TryStatement",
	 "TypeDeclaration",
	 "TypeDeclarationStatement",
	 "TypeMethodReference",
	 "TypeLiteral",
	 "TypeParameter",
	 "UnionType",
	 "UsesDirective",
	 "VariableDeclarationExpression",
	 "VariableDeclarationFragment",
	 "VariableDeclarationStatement",
	 "WhileStatement",
	 "WildcardType",
	 "INFIX_EXPRESSION_OPERATOR",
	 "METHOD_INVOCATION_RECEIVER",
	 "METHOD_INVOCATION_ARGUMENTS",
	 "TYPE_DECLARATION_KIND",
	 "ASSIGNEMENT_OPERATOR",
	 "PREFIX_EXPRESSION_OPERATOR",
	 "POSTFIX_EXPRESSION_OPERATOR"
	};
}