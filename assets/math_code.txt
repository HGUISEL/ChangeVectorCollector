<start>
diff --git a/src/java/org/apache/commons/math/StoreUnivariateImpl.java b/src/java/org/apache/commons/math/StoreUnivariateImpl.java
index d790084..21a60e7 100644
--- a/src/java/org/apache/commons/math/StoreUnivariateImpl.java
+++ b/src/java/org/apache/commons/math/StoreUnivariateImpl.java
@@ -91,7 +91,7 @@
     /* (non-Javadoc)
      * @see org.apache.commons.math.Univariate#getN()
      */
-    public double getN() {
+    public int getN() {
         return eDA.getNumElements();
     }
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java b/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java
index d7766a3..5813b26 100644
--- a/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java
+++ b/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java
@@ -53,8 +53,8 @@
  */
 package org.apache.commons.math.stat;
 
-import org.apache.commons.math.DoubleArray;
-import org.apache.commons.math.ContractableDoubleArray;
+import org.apache.commons.math.util.ContractableDoubleArray;
+import org.apache.commons.math.util.DoubleArray;
 
 /**
  * @author <a href="mailto:tobrien@apache.org">Tim O'Brien</a>
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/UnivariateImpl.java b/src/java/org/apache/commons/math/stat/UnivariateImpl.java
index 2534c6e..4121ccf 100644
--- a/src/java/org/apache/commons/math/stat/UnivariateImpl.java
+++ b/src/java/org/apache/commons/math/stat/UnivariateImpl.java
@@ -55,8 +55,8 @@
 
 import java.io.Serializable;
 
-import org.apache.commons.math.DoubleArray;
-import org.apache.commons.math.FixedDoubleArray;
+import org.apache.commons.math.util.DoubleArray;
+import org.apache.commons.math.util.FixedDoubleArray;
 
 /**
  *
@@ -71,7 +71,7 @@
  * @author <a href="mailto:mdiggory@apache.org">Mark Diggory</a>
  * @author Brent Worden
  * @author <a href="mailto:HotFusionMan@Yahoo.com">Albert Davidson Chou</a>
- * @version $Revision: 1.14 $ $Date: 2003/06/21 23:38:27 $
+ * @version $Revision: 1.15 $ $Date: 2003/06/22 03:57:55 $
  *
 */
 public class UnivariateImpl implements Univariate, Serializable {
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/StatUtils.java b/src/java/org/apache/commons/math/stat/StatUtils.java
index ca0849c..b601db6 100644
--- a/src/java/org/apache/commons/math/stat/StatUtils.java
+++ b/src/java/org/apache/commons/math/stat/StatUtils.java
@@ -180,7 +180,8 @@
 				accum += Math.pow((values[i] - mean), 2.0);
                 accum2 += (values[i] - mean);
 			}
-			variance = (accum - (Math.pow(accum2,2)/(double)values.length)) / (double)(values.length - 1);
+			variance = ((accum*(double)values.length) - Math.pow(accum2,2)) / 
+                (double)(values.length*(values.length - 1));
 		}
 		return variance;
 	}
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java b/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java
index 5813b26..8fdce14 100644
--- a/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java
+++ b/src/java/org/apache/commons/math/stat/StoreUnivariateImpl.java
@@ -54,7 +54,6 @@
 package org.apache.commons.math.stat;
 
 import org.apache.commons.math.util.ContractableDoubleArray;
-import org.apache.commons.math.util.DoubleArray;
 
 /**
  * @author <a href="mailto:tobrien@apache.org">Tim O'Brien</a>
@@ -62,7 +61,7 @@
 public class StoreUnivariateImpl extends AbstractStoreUnivariate {
 
     // Use an internal double array
-    DoubleArray eDA;
+    ContractableDoubleArray eDA;
 
     // Store the windowSize
     private int windowSize = Univariate.INFINITE_WINDOW;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java
index c9159d0..e9f14b9 100644
--- a/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/GeometricMean.java
@@ -73,9 +73,7 @@
      */
     public double increment(double d) {
         n++;
-        sumLog.increment(d);
-        value = Math.exp( sumLog.increment(d) / (double)n );
-        return value;
+        return Math.exp( sumLog.increment(d) / (double)n );
     }
 
     /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java
index dcdf3d6..e3b84af 100644
--- a/src/java/org/apache/commons/math/stat/univariate/rank/Min.java
+++ b/src/java/org/apache/commons/math/stat/univariate/rank/Min.java
@@ -71,9 +71,8 @@
     /**
      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
      */
-    public double increment(double d) {
+    public void increment(double d) {
         value = Double.isNaN(value) ? d : Math.min(value, d);
-        return value;
     }
 
     /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java
index 945630e..7686dfd 100644
--- a/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java
+++ b/src/java/org/apache/commons/math/stat/univariate/moment/Mean.java
@@ -84,12 +84,10 @@
     /**
      * @see org.apache.commons.math.stat.univariate.StorelessUnivariateStatistic#increment(double)
      */
-    public double increment(double d) {
+    public void increment(double d) {
         if (incMoment) {
             moment.increment(d);
         }
-
-        return moment.m1;
     }
 
     /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java b/src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java
index 0da0bb0..a35a688 100644
--- a/src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java
+++ b/src/java/org/apache/commons/math/stat/DescriptiveStatisticsImpl.java
@@ -53,13 +53,15 @@
  */
 package org.apache.commons.math.stat;
 
+import java.io.Serializable;
+
 import org.apache.commons.math.stat.univariate.*;
 import org.apache.commons.math.util.ContractableDoubleArray;
 
 /**
- * @version $Revision: 1.1 $ $Date: 2003/11/15 16:01:38 $
+ * @version $Revision: 1.2 $ $Date: 2003/11/19 03:28:23 $
  */
-public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics {
+public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics implements Serializable {
 
     /** A contractable double array is used.  memory is reclaimed when 
      * the storage of the array becomes too empty.
<end>
<start>
diff --git a/src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java b/src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java
index 4b505ce..c996217 100644
--- a/src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java
+++ b/src/test/java/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java
@@ -20,7 +20,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.math.MathException;
+import org.apache.commons.math.exception.MathIllegalArgumentException;
 import org.apache.commons.math.stat.descriptive.UnivariateStatistic;
 import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;
 import org.apache.commons.math.util.DefaultTransformer;
@@ -113,7 +113,7 @@
 
         try {
             value = transformer.transform(list.get(calcIndex));
-        } catch (MathException e) {
+        } catch (MathIllegalArgumentException e) {
             e.printStackTrace();
         }
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java
index f039af3..4cde111 100644
--- a/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java
+++ b/src/java/org/apache/commons/math/distribution/DistributionFactoryImpl.java
@@ -15,16 +15,14 @@
  */
 package org.apache.commons.math.distribution;
 
-import java.io.Serializable;
-
-
 /**
  * A concrete distribution factory.  This is the default factory used by
  * Commons-Math.
  *  
- * @version $Revision: 1.18 $ $Date: 2004/02/21 21:35:14 $
+ * @version $Revision: 1.19 $ $Date: 2004/06/02 00:14:15 $
  */
-public class DistributionFactoryImpl extends DistributionFactory implements Serializable  {
+public class DistributionFactoryImpl extends DistributionFactory {
+
     /**
      * Default constructor.  Package scope to prevent unwanted instantiation. 
      */
<end>
<start>
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java
index eabeb14..258402e 100644
--- a/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java
@@ -24,11 +24,12 @@
  * Provide a default implementation for several functions useful to generic
  * solvers.
  *  
- * @version $Revision: 1.12 $ $Date: 2004/04/27 16:42:33 $
+ * @version $Revision: 1.13 $ $Date: 2004/06/02 00:11:08 $
  */
-public abstract class UnivariateRealSolverImpl
-    implements UnivariateRealSolver, Serializable {
+public abstract class UnivariateRealSolverImpl implements UnivariateRealSolver, Serializable {
 
+    static final long serialVersionUID = 1112491292565386596L;
+    
     /** Maximum absolute error. */
     protected double absoluteAccuracy;
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/special/Beta.java b/src/java/org/apache/commons/math/special/Beta.java
index 761bd64..45751b1 100644
--- a/src/java/org/apache/commons/math/special/Beta.java
+++ b/src/java/org/apache/commons/math/special/Beta.java
@@ -16,8 +16,6 @@
  */
 package org.apache.commons.math.special;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.util.ContinuedFraction;
 
@@ -27,10 +25,7 @@
  *
  * @version $Revision$ $Date$
  */
-public class Beta implements Serializable {
-
-    /** Serializable version identifier */
-    private static final long serialVersionUID = -3833485397404128220L;
+public class Beta {
 
     /** Maximum allowed numerical error. */
     private static final double DEFAULT_EPSILON = 10e-15;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java
index 296a728..607d2fb 100644
--- a/src/java/org/apache/commons/math/special/Gamma.java
+++ b/src/java/org/apache/commons/math/special/Gamma.java
@@ -28,11 +28,8 @@
  *
  * @version $Revision$ $Date$
  */
-public class Gamma implements Serializable {
+public class Gamma {
     
-    /** Serializable version identifier */
-    private static final long serialVersionUID = -6587513359895466954L;
-
     /** 
      * <a href="http://en.wikipedia.org/wiki/Euler-Mascheroni_constant">Euler-Mascheroni constant</a>
      * @since 2.0
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java
index 82b1d45..6e1c4e5 100644
--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java
+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java
@@ -15,8 +15,6 @@
  */
 package org.apache.commons.math.stat.descriptive.rank;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
 
 /**
@@ -34,7 +32,7 @@
  * one of the threads invokes the <code>increment()</code> or 
  * <code>clear()</code> method, it must be synchronized externally.
  * 
- * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
+ * @version $Revision: 1.2 $ $Date: 2004/11/07 02:44:45 $
  */
 public class Max extends AbstractStorelessUnivariateStatistic {
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java
index 18d9954..d3962d2 100644
--- a/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java
+++ b/src/java/org/apache/commons/math/stat/univariate/DescriptiveStatisticsImpl.java
@@ -23,10 +23,13 @@
  * Default implementation of
  * {@link org.apache.commons.math.stat.univariate.DescriptiveStatistics}.
  * 
- * @version $Revision: 1.5 $ $Date: 2004/05/23 00:30:01 $
+ * @version $Revision: 1.6 $ $Date: 2004/06/01 21:34:35 $
  */
-public class DescriptiveStatisticsImpl extends AbstractDescriptiveStatistics implements Serializable {
+public class DescriptiveStatisticsImpl extends DescriptiveStatistics implements Serializable {
 
+    /** Serializable version identifier */
+    static final long serialVersionUID = -1868088725461221010L;
+    
 	/** hold the window size **/
 	protected int windowSize;
     
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java
index 7e7c49c..cdff758 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/ThirdMoment.java
@@ -47,7 +47,7 @@
  *
  * @version $Id$
  */
-public class ThirdMoment extends SecondMoment implements Serializable {
+class ThirdMoment extends SecondMoment implements Serializable {
 
     /** Serializable version identifier */
     private static final long serialVersionUID = -7818711964045118679L;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java
index 6719ee9..55a2523 100644
--- a/src/java/org/apache/commons/math/random/EmpiricalDistribution.java
+++ b/src/java/org/apache/commons/math/random/EmpiricalDistribution.java
@@ -21,7 +21,7 @@
 import java.net.URL;
 import java.util.ArrayList;
 
-import org.apache.commons.math.stat.SummaryStatistics;
+import org.apache.commons.math.stat.univariate.SummaryStatistics;
 
 /**
  * Represents an <a href="http://random.mat.sbg.ac.at/~ste/dipl/node11.html">
@@ -43,7 +43,7 @@
  * build grouped frequnecy histograms representing the input data or to
  * generate random values "like" those in the input file -- i.e., the values
  * generated will follow the distribution of the values in the file.
- * @version $Revision: 1.16 $ $Date: 2004/03/21 21:57:18 $
+ * @version $Revision: 1.17 $ $Date: 2004/04/12 02:27:49 $
  */
 public interface EmpiricalDistribution {
  
<end>
<start>
diff --git a/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java b/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java
index 109e79e..40b182d 100644
--- a/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java
+++ b/src/test/org/apache/commons/math/stat/descriptive/ListUnivariateImpl.java
@@ -212,7 +212,7 @@
     /**
      * @see org.apache.commons.math.stat.descriptive.DescriptiveStatistics#getWindowSize
      */
-    public int getWindowSize() {
+    public synchronized int getWindowSize() {
         return windowSize;
     }
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java
index f9117cd..faf9dcc 100644
--- a/src/java/org/apache/commons/math/analysis/PolynomialFunction.java
+++ b/src/java/org/apache/commons/math/analysis/PolynomialFunction.java
@@ -19,14 +19,10 @@
 
 import java.io.Serializable;
 
-import java.util.Arrays;
-
-import org.apache.commons.math.MathException;
-
 /**
  * Represents a polynomial function with real coefficients.
  * 
- * @version $Revision: 1.6 $ $Date: 2004/02/20 06:17:54 $
+ * @version $Revision: 1.7 $ $Date: 2004/02/22 22:01:29 $
  */
 public class PolynomialFunction implements UnivariateRealFunction, Serializable {
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/RealMatrix.java b/src/main/java/org/apache/commons/math/linear/RealMatrix.java
index 0f2d0f3..b700600 100644
--- a/src/main/java/org/apache/commons/math/linear/RealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/RealMatrix.java
@@ -98,7 +98,7 @@
      * @throws     IllegalArgumentException
      *             if rowDimension(this) != columnDimension(m)
      */
-    public RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException;
+    RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException;
 
     /**
      * Returns matrix entries as a two-dimensional array.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/InvalidMatrixException.java b/src/java/org/apache/commons/math/linear/InvalidMatrixException.java
index 6772c9f..4ec2934 100644
--- a/src/java/org/apache/commons/math/linear/InvalidMatrixException.java
+++ b/src/java/org/apache/commons/math/linear/InvalidMatrixException.java
@@ -16,15 +16,13 @@
 
 package org.apache.commons.math.linear;
 
-import org.apache.commons.lang.exception.NestableRuntimeException;
-
 /**
  * Thrown when a system attempts an operation on a matrix, and
  * that matrix does not satisfy the preconditions for the
  * aforementioned operation.
- * @version $Revision: 1.6 $ $Date: 2004/06/07 03:26:31 $
+ * @version $Revision: 1.7 $ $Date: 2004/07/11 18:43:44 $
  */
-public class InvalidMatrixException extends NestableRuntimeException {
+public class InvalidMatrixException extends RuntimeException {
 
     /** Serializable version identifier */
     static final long serialVersionUID = 5318837237354354107L;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/MatrixIndexException.java b/src/java/org/apache/commons/math/linear/MatrixIndexException.java
index 830407f..8c3d6ac 100644
--- a/src/java/org/apache/commons/math/linear/MatrixIndexException.java
+++ b/src/java/org/apache/commons/math/linear/MatrixIndexException.java
@@ -16,14 +16,12 @@
 
 package org.apache.commons.math.linear;
 
-import org.apache.commons.lang.exception.NestableRuntimeException;
-
 /**
  * Thrown when an operation addresses a matrix coordinate (row,col)
  * which is outside of the dimensions of a matrix.
- * @version $Revision: 1.6 $ $Date: 2004/06/07 03:26:31 $
+ * @version $Revision: 1.7 $ $Date: 2004/07/11 18:43:44 $
  */
-public class MatrixIndexException extends NestableRuntimeException {
+public class MatrixIndexException extends RuntimeException {
 
     /** Serializable version identifier */
     static final long serialVersionUID = -1341109412864309526L;
<end>
<start>
diff --git a/src/test/org/apache/commons/math/analysis/QuinticFunction.java b/src/test/org/apache/commons/math/analysis/QuinticFunction.java
index 1f0aca6..4a76b0e 100644
--- a/src/test/org/apache/commons/math/analysis/QuinticFunction.java
+++ b/src/test/org/apache/commons/math/analysis/QuinticFunction.java
@@ -15,14 +15,18 @@
  */
 package org.apache.commons.math.analysis;
 
+import java.io.Serializable;
+
 import org.apache.commons.math.MathException;
 
 /**
  * Auxillary class for testing solvers.
  *
- * @version $Revision: 1.12 $ $Date: 2004/04/08 21:19:17 $ 
+ * @version $Revision: 1.13 $ $Date: 2004/06/02 00:12:01 $ 
  */
-public class QuinticFunction implements DifferentiableUnivariateRealFunction {
+public class QuinticFunction implements DifferentiableUnivariateRealFunction, Serializable {
+
+    static final long serialVersionUID = -8866263034920607152L;
 
     /* Evaluate quintic.
      * @see org.apache.commons.math.UnivariateRealFunction#value(double)
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/multivariate/SimpleRegression.java b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java
similarity index 99%
rename from src/java/org/apache/commons/math/stat/multivariate/SimpleRegression.java
rename to src/java/org/apache/commons/math/stat/regression/SimpleRegression.java
index 17e7ba4..eea7073 100644
--- a/src/java/org/apache/commons/math/stat/multivariate/SimpleRegression.java
+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.stat.multivariate;
+package org.apache.commons.math.stat.regression;
 import java.io.Serializable;
 
 import org.apache.commons.math.MathException;
@@ -49,7 +49,7 @@
  * the necessary computations to return the requested statistic.</li>
  * </ul>
  *
- * @version $Revision: 1.1 $ $Date: 2004/09/01 15:19:32 $
+ * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:18 $
  */
 public class SimpleRegression implements Serializable {
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java b/src/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java
similarity index 94%
rename from src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java
rename to src/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java
index 1bd482f..d82bf55 100644
--- a/src/java/org/apache/commons/math/stat/univariate/StatisticalSummary.java
+++ b/src/java/org/apache/commons/math/stat/descriptive/StatisticalSummary.java
@@ -13,12 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.commons.math.stat.univariate;
+package org.apache.commons.math.stat.descriptive;
 
 /**
  *  Reporting interface for basic univariate statistics.
  *
-  * @version $Revision: 1.4 $ $Date: 2004/06/23 16:26:16 $
+  * @version $Revision: 1.1 $ $Date: 2004/10/08 05:08:17 $
  */
 public interface StatisticalSummary {
     /** 
<end>
<start>
diff --git a/src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java b/src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java
index 0df42a9..8bbd075 100644
--- a/src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java
+++ b/src/experimental/org/apache/commons/math/stat/univariate/BeanListUnivariateImpl.java
@@ -134,7 +134,7 @@
 	    } catch (Exception ex) {              // InstantiationException, IllegalAccessException
 	        throw new RuntimeException(ex);   // should never happen
 	    }
-		dynaBean.set(propertyName, new Double(v));
+		dynaBean.set(propertyName, Double.valueOf(v));
 		addObject(dynaBean);
 	}
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java
index 18142e6..7fce2ed 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java
@@ -50,7 +50,7 @@
  * @version $Id$
  *
  */
-public class SplineInterpolator implements UnivariateRealInterpolator {
+public class SplineInterpolator implements UnivariateInterpolator {
 
     /**
      * Computes an interpolating function for the data set.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java
index 5d5b2f4..b7a2803 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java
@@ -47,7 +47,7 @@
  *
  * @version $Id$
  */
-public class FirstMoment extends AbstractStorelessUnivariateStatistic
+class FirstMoment extends AbstractStorelessUnivariateStatistic
     implements Serializable {
 
     /** Serializable version identifier */
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java b/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java
index 2828988..b7d026e 100644
--- a/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java
+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java
@@ -16,6 +16,8 @@
  */
 package org.apache.commons.math.stat.descriptive.moment;
 
+import java.io.Serializable;
+
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
 
@@ -40,7 +42,7 @@
  * 
  * @version $Revision$ $Date$
  */
-public class Kurtosis extends AbstractStorelessUnivariateStatistic  {
+public class Kurtosis extends AbstractStorelessUnivariateStatistic  implements Serializable {
 
     /** Serializable version identifier */
     private static final long serialVersionUID = 2784465764798260919L;  
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java
index fc63819..dca6f59 100644
--- a/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java
+++ b/src/java/org/apache/commons/math/stat/descriptive/rank/Max.java
@@ -16,6 +16,8 @@
  */
 package org.apache.commons.math.stat.descriptive.rank;
 
+import java.io.Serializable;
+
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
 
 /**
@@ -35,7 +37,7 @@
  * 
  * @version $Revision$ $Date$
  */
-public class Max extends AbstractStorelessUnivariateStatistic {
+public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {
 
     /** Serializable version identifier */
     private static final long serialVersionUID = -5593383832225844641L;    
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java
index fe49b3c..3f5d55a 100644
--- a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java
@@ -102,7 +102,7 @@
      * @throws MathException if the cumulative probability can not be
      *            computed due to convergence or other numerical errors.
      */
-    abstract public double cumulativeProbability(int x) throws MathException;
+    public abstract double cumulativeProbability(int x) throws MathException;
 
     /**
      * For a random variable X whose values are distributed according
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/random/ValueServer.java b/src/main/java/org/apache/commons/math/random/ValueServer.java
index aab068d..9ff0568 100644
--- a/src/main/java/org/apache/commons/math/random/ValueServer.java
+++ b/src/main/java/org/apache/commons/math/random/ValueServer.java
@@ -85,12 +85,13 @@
     private BufferedReader filePointer = null;
 
     /** RandomDataImpl to use for random data generation. */
-    private RandomData randomData = new RandomDataImpl();
+    private final RandomData randomData;
 
     // Data generation modes ======================================
 
     /** Creates new ValueServer */
     public ValueServer() {
+        randomData = new RandomDataImpl();
     }
 
     /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
index 32e20d3..8156f4e 100644
--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
@@ -31,9 +31,6 @@
 public abstract class UnivariateRealSolverImpl
     extends ConvergingAlgorithmImpl implements UnivariateRealSolver {
 
-    /** Serializable version identifier */
-    private static final long serialVersionUID = 1112491292565386596L;
-    
     /** Maximum error of function. */
     protected double functionValueAccuracy;
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java b/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java
index fbd9984..502bb01 100644
--- a/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java
+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java
@@ -48,7 +48,8 @@
     implements Serializable {
 
     /** Serializable version identifier */
-    private static final long serialVersionUID = -803343206421984070L; 
+    private static final long serialVersionUID = 6112755307178490473L;
+
     
     /** Count of values that have been added */
     protected long n;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/SwitchState.java b/src/java/org/apache/commons/math/ode/SwitchState.java
index 3cdb3be..cf280aa 100644
--- a/src/java/org/apache/commons/math/ode/SwitchState.java
+++ b/src/java/org/apache/commons/math/ode/SwitchState.java
@@ -274,8 +274,8 @@
     pendingEvent      = false;
     pendingEventTime  = Double.NaN;
 
-    return (nextAction == SwitchingFunction.RESET_STATE)
-        || (nextAction == SwitchingFunction.RESET_DERIVATIVES);
+    return (nextAction == SwitchingFunction.RESET_STATE) ||
+           (nextAction == SwitchingFunction.RESET_DERIVATIVES);
 
   }
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/events/EventHandler.java b/src/java/org/apache/commons/math/ode/events/EventHandler.java
index 74b47f4..c2bae92 100644
--- a/src/java/org/apache/commons/math/ode/events/EventHandler.java
+++ b/src/java/org/apache/commons/math/ode/events/EventHandler.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.ode.events;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
 import org.apache.commons.math.ode.sampling.StepHandler;
 
@@ -52,7 +50,7 @@
  * @since 1.2
  */
 
-public interface EventHandler extends Serializable {
+public interface EventHandler  {
 
   /** Stop indicator.
    * <p>This value should be used as the return value of the {@link
<end>
<start>
diff --git a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java
index 0827793..6cbe2c6 100644
--- a/src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java
+++ b/src/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java
@@ -16,7 +16,6 @@
  */
 package org.apache.commons.math.analysis.polynomials;
 
-import java.io.Serializable;
 import java.util.Arrays;
 
 import org.apache.commons.math.ArgumentOutsideDomainException;
@@ -59,10 +58,7 @@
  * @version $Revision$ $Date$
  */
 public class PolynomialSplineFunction 
-    implements DifferentiableUnivariateRealFunction, Serializable {
-
-    /** Serializable version identifier */
-    private static final long serialVersionUID = 1619940313389547244L;
+    implements DifferentiableUnivariateRealFunction {
 
     /** Spline segment interval delimiters (knots).   Size is n+1 for n segments. */
     private double knots[];
<end>
<start>
diff --git a/src/java/org/apache/commons/math/special/Erf.java b/src/java/org/apache/commons/math/special/Erf.java
index a199e59..d4e277c 100644
--- a/src/java/org/apache/commons/math/special/Erf.java
+++ b/src/java/org/apache/commons/math/special/Erf.java
@@ -16,8 +16,6 @@
  */
 package org.apache.commons.math.special;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.MathException;
 
 /**
@@ -26,10 +24,7 @@
  *
  * @version $Revision$ $Date$
  */
-public class Erf implements Serializable {
-
-    /** Serializable version identifier */
-    private static final long serialVersionUID = 490960015010326571L;
+public class Erf {
 
     /**
      * Default constructor.  Prohibit instantiation.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java b/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java
index 800c68a..680e0b8 100644
--- a/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java
+++ b/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.math.random;
 
+import java.io.Serializable;
+
 /** 
  * This interface represent a normalized random generator for
  * scalars.
@@ -24,7 +26,7 @@
  * @version $Revision$ $Date$
  * @since 1.2
  */
-public interface NormalizedRandomGenerator {
+public interface NormalizedRandomGenerator extends Serializable {
 
   /** Generate a random scalar with null mean and unit standard deviation.
    * <p>This method does <strong>not</strong> specify the shape of the
<end>
<start>
diff --git a/src/java/org/apache/commons/math/estimation/EstimatedParameter.java b/src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java
similarity index 98%
rename from src/java/org/apache/commons/math/estimation/EstimatedParameter.java
rename to src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java
index b00d976..0b3d7d2 100644
--- a/src/java/org/apache/commons/math/estimation/EstimatedParameter.java
+++ b/src/java/org/apache/commons/math/optimization/general/EstimatedParameter.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.estimation;
+package org.apache.commons.math.optimization.general;
 
 import java.io.Serializable;
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java b/src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java
similarity index 98%
rename from src/java/org/apache/commons/math/estimation/WeightedMeasurement.java
rename to src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java
index 2038799..aa7b3f6 100644
--- a/src/java/org/apache/commons/math/estimation/WeightedMeasurement.java
+++ b/src/java/org/apache/commons/math/optimization/general/WeightedMeasurement.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.estimation;
+package org.apache.commons.math.optimization.general;
 
 import java.io.Serializable;
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java b/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
index bf7d7a7..60c7e19 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
@@ -21,6 +21,7 @@
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
 
+import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
 import org.apache.commons.math.ode.sampling.StepInterpolator;
@@ -250,7 +251,7 @@
       // save the local attributes
       finalizeStep();
     } catch (DerivativeException e) {
-      throw new IOException(e.getMessage());
+      throw MathRuntimeException.createIOException(e);
     }
     out.writeInt(currentState.length);
     for (int i = 0; i < currentState.length; ++i) {
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java b/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java
index 5ff680a..3c55d9f 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java
@@ -21,6 +21,7 @@
 import java.io.ObjectOutput;
 import java.io.IOException;
 
+import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
 import org.apache.commons.math.ode.sampling.StepInterpolator;
@@ -392,7 +393,7 @@
       // we can now set the interpolated time and state
       setInterpolatedTime(t);
     } catch (DerivativeException e) {
-      throw new IOException(e.getMessage());
+      throw MathRuntimeException.createIOException(e);
     }
 
   }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java
index 90d9cea..46c7d57 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java
@@ -21,6 +21,7 @@
 import java.io.ObjectOutput;
 import java.io.IOException;
 
+import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
 import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
@@ -165,7 +166,7 @@
       // we can now set the interpolated time and state
       setInterpolatedTime(t);
     } catch (DerivativeException e) {
-      throw new IOException(e.getMessage());
+      throw MathRuntimeException.createIOException(e);
     }
 
   }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java b/src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java
index d55cfe6..3ac9a3d 100644
--- a/src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java
+++ b/src/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java
@@ -21,6 +21,7 @@
 import java.io.ObjectOutput;
 import java.io.IOException;
 
+import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.FirstOrderIntegrator;
 import org.apache.commons.math.ode.SecondOrderIntegrator;
@@ -369,7 +370,7 @@
     try {
       finalizeStep();
     } catch (DerivativeException e) {
-      throw new IOException(e.getMessage());
+      throw MathRuntimeException.createIOException(e);
     }
 
   }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java b/src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java
index dec64a5..880f657 100644
--- a/src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java
+++ b/src/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java
@@ -21,6 +21,7 @@
 import java.io.ObjectOutput;
 import java.io.IOException;
 
+import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;
 
@@ -119,7 +120,7 @@
       // we can now set the interpolated time and state
       setInterpolatedTime(t);
     } catch (DerivativeException e) {
-      throw new IOException(e.getMessage());
+      throw MathRuntimeException.createIOException(e);
     }
 
   }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java b/src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java
index d3b3427..702ad3f 100644
--- a/src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java
+++ b/src/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java
@@ -35,7 +35,7 @@
    * if false it is related to EulerAngles
    */
   public CardanEulerSingularityException(boolean isCardan) {
-    super(isCardan ? "Cardan angles singularity" : "Euler angles singularity", new Object[0]);
+    super(isCardan ? "Cardan angles singularity" : "Euler angles singularity", null);
   }
 
   /** Serializable version identifier */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/NotARotationMatrixException.java
similarity index 96%
rename from src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java
rename to src/main/java/org/apache/commons/math/geometry/euclidean/threeD/NotARotationMatrixException.java
index 910e401..2b5737b 100644
--- a/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/NotARotationMatrixException.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.geometry;
+package org.apache.commons.math.geometry.euclidean.threeD;
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.exception.util.Localizable;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Rotation.java
similarity index 99%
rename from src/main/java/org/apache/commons/math/geometry/Rotation.java
rename to src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Rotation.java
index babc4a2..7f4f443 100644
--- a/src/main/java/org/apache/commons/math/geometry/Rotation.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Rotation.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.geometry;
+package org.apache.commons.math.geometry.euclidean.threeD;
 
 import java.io.Serializable;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/RotationOrder.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrder.java
similarity index 98%
rename from src/main/java/org/apache/commons/math/geometry/RotationOrder.java
rename to src/main/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrder.java
index f6aae19..844ddef 100644
--- a/src/main/java/org/apache/commons/math/geometry/RotationOrder.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrder.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.geometry;
+package org.apache.commons.math.geometry.euclidean.threeD;
 
 /**
  * This class is a utility representing a rotation order specification
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3D.java
similarity index 99%
rename from src/main/java/org/apache/commons/math/geometry/Vector3D.java
rename to src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3D.java
index 2d915e5..5b50c22 100644
--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3D.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.geometry;
+package org.apache.commons.math.geometry.euclidean.threeD;
 
 import java.io.Serializable;
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java b/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java
index ea042e5..3eb9ddd 100644
--- a/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java
@@ -332,7 +332,7 @@
     return stepStart;
   }
 
-  public double getCurrentStepsize() {
+  public double getCurrentSignedStepsize() {
     return stepSize;
   }
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java
index 0484369..9adfde5 100644
--- a/src/java/org/apache/commons/math/stat/Frequency.java
+++ b/src/java/org/apache/commons/math/stat/Frequency.java
@@ -435,7 +435,7 @@
      * A Comparator that compares comparable objects using the
      * natural order.  Copied from Commons Collections ComparableComparator.
      */
-    private static class NaturalComparator implements Comparator, Serializable {
+    private class NaturalComparator implements Comparator, Serializable {
         private static final long serialVersionUID = -3852193713161395148L;
 
         /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java b/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java
index fdb1ab8..8eb793c 100644
--- a/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java
+++ b/src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java
@@ -16,14 +16,13 @@
  */
 package org.apache.commons.math.stat.descriptive;
 
-import java.io.Serializable;
 
 /**
  * Base interface implemented by all statistics.
  * 
  * @version $Revision$ $Date$
  */
-public interface UnivariateStatistic extends Serializable {
+public interface UnivariateStatistic {
 
     /**
      * Returns the result of evaluating the statistic over the input array.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/RandomGenerator.java b/src/java/org/apache/commons/math/random/RandomGenerator.java
index 02ee3d9..bff6400 100644
--- a/src/java/org/apache/commons/math/random/RandomGenerator.java
+++ b/src/java/org/apache/commons/math/random/RandomGenerator.java
@@ -25,7 +25,7 @@
  * @since 1.1
  * @version $Revision$ $Date$
  */
-public interface RandomGenerator extends Serializable {
+public interface RandomGenerator {
     
     /**
      * Sets the seed of the underyling random number generator using a 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/util/NumberTransformer.java b/src/java/org/apache/commons/math/util/NumberTransformer.java
index a284ed7..9f34ece 100644
--- a/src/java/org/apache/commons/math/util/NumberTransformer.java
+++ b/src/java/org/apache/commons/math/util/NumberTransformer.java
@@ -16,15 +16,16 @@
  */
 package org.apache.commons.math.util;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.MathException;
 
 /**
  * Subclasses implementing this interface can transform Objects to doubles.
  * @version $Revision$ $Date$
+ * 
+ * No longer extends Serializable since 2.0
+ * 
  */
-public interface NumberTransformer extends Serializable {
+public interface NumberTransformer {
     
     /**
      * Implementing this interface provides a facility to transform
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java
index ebf81f2..f55c04b 100644
--- a/src/java/org/apache/commons/math/stat/Frequency.java
+++ b/src/java/org/apache/commons/math/stat/Frequency.java
@@ -435,7 +435,7 @@
      * A Comparator that compares comparable objects using the
      * natural order.  Copied from Commons Collections ComparableComparator.
      */
-    private class NaturalComparator implements Comparator, Serializable {
+    private static class NaturalComparator implements Comparator, Serializable {
 
         /** Serializable version identifier */
         private static final long serialVersionUID = -3852193713161395148L;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java b/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java
index 2124d03..5feb98f 100644
--- a/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java
@@ -74,7 +74,7 @@
    * @see #addSwitchingFunction(SwitchingFunction, double, double, int)
    * @see #clearSwitchingFunctions()
    */
-  public Collection getSwitchingFunctions();
+  public Collection<SwitchState> getSwitchingFunctions();
 
   /** Remove all the switching functions that have been added to the integrator.
    * @see #addSwitchingFunction(SwitchingFunction, double, double, int)
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java b/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java
index be13af3..54e1fe2 100644
--- a/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/AdaptiveStepsizeIntegrator.java
@@ -171,7 +171,7 @@
    * @see #addSwitchingFunction(SwitchingFunction, double, double, int)
    * @see #clearSwitchingFunctions()
    */
-  public Collection<SwitchState> getSwitchingFunctions() {
+  public Collection<SwitchingFunction> getSwitchingFunctions() {
       return switchesHandler.getSwitchingFunctions();
   }
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java b/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java
index 8a0b6d3..9b60642 100644
--- a/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/FirstOrderIntegrator.java
@@ -75,7 +75,7 @@
    * @see #addSwitchingFunction(SwitchingFunction, double, double, int)
    * @see #clearSwitchingFunctions()
    */
-  public Collection<SwitchState> getSwitchingFunctions();
+  public Collection<SwitchingFunction> getSwitchingFunctions();
 
   /** Remove all the switching functions that have been added to the integrator.
    * @see #addSwitchingFunction(SwitchingFunction, double, double, int)
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java b/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java
index 690952c..1181d89 100644
--- a/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/RungeKuttaIntegrator.java
@@ -113,7 +113,7 @@
    * @see #addSwitchingFunction(SwitchingFunction, double, double, int)
    * @see #clearSwitchingFunctions()
    */
-  public Collection<SwitchState> getSwitchingFunctions() {
+  public Collection<SwitchingFunction> getSwitchingFunctions() {
       return switchesHandler.getSwitchingFunctions();
   }
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/FirstOrderConverter.java b/src/java/org/apache/commons/math/ode/FirstOrderConverter.java
index 3e9295a..0e3518a 100644
--- a/src/java/org/apache/commons/math/ode/FirstOrderConverter.java
+++ b/src/java/org/apache/commons/math/ode/FirstOrderConverter.java
@@ -53,11 +53,7 @@
  * @since 1.2
  */
 
-public class FirstOrderConverter
-  implements FirstOrderDifferentialEquations {
-
-  /** Serializable version identifier. */
-  private static final long serialVersionUID = -8233657110042144146L;
+public class FirstOrderConverter implements FirstOrderDifferentialEquations {
 
   /** Simple constructor.
    * Build a converter around a second order equations set.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java b/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java
index b268247..7cfd875 100644
--- a/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java
+++ b/src/java/org/apache/commons/math/ode/FirstOrderDifferentialEquations.java
@@ -17,7 +17,6 @@
 
 package org.apache.commons.math.ode;
 
-import java.io.Serializable;
 
 /** This interface represents a first order differential equations set.
  *
@@ -46,7 +45,7 @@
  * @since 1.2
  */
 
-public interface FirstOrderDifferentialEquations extends Serializable {
+public interface FirstOrderDifferentialEquations {
     
     /** Get the dimension of the problem.
      * @return dimension of the problem
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java b/src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
index e87a948..11b43be 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
@@ -76,7 +76,7 @@
 
   /** {@inheritDoc} */
   @Override
-  protected void computeInterpolatedState(final double theta,
+  protected void computeInterpolatedStateAndDerivatives(final double theta,
                                           final double oneMinusThetaH)
     throws DerivativeException {
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java b/src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
index 8d64085..fbc8c0c 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
@@ -65,7 +65,7 @@
 
   /** {@inheritDoc} */
   @Override
-  protected void computeInterpolatedState(final double theta,
+  protected void computeInterpolatedStateAndDerivatives(final double theta,
                                           final double oneMinusThetaH)
     throws DerivativeException {
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java b/src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
index ae6bd20..f38b906 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
@@ -75,7 +75,7 @@
 
   /** {@inheritDoc} */
   @Override
-  protected void computeInterpolatedState(final double theta,
+  protected void computeInterpolatedStateAndDerivatives(final double theta,
                                           final double oneMinusThetaH)
     throws DerivativeException {
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java b/src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
index cde8ae5..cc32aea 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
@@ -80,7 +80,7 @@
 
   /** {@inheritDoc} */
   @Override
-  protected void computeInterpolatedState(final double theta,
+  protected void computeInterpolatedStateAndDerivatives(final double theta,
                                           final double oneMinusThetaH)
       throws DerivativeException {
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/sampling/StepHandler.java b/src/java/org/apache/commons/math/ode/sampling/StepHandler.java
index 1b8c034..845b702 100644
--- a/src/java/org/apache/commons/math/ode/sampling/StepHandler.java
+++ b/src/java/org/apache/commons/math/ode/sampling/StepHandler.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.ode.sampling;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.ode.ContinuousOutputModel;
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.FirstOrderIntegrator;
@@ -44,7 +42,7 @@
  * @since 1.2
  */
 
-public interface StepHandler extends Serializable {
+public interface StepHandler {
 
   /** Determines whether this handler needs dense output.
    * <p>This method allows the integrator to avoid performing extra
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java
index 2ffe522..420dca6 100644
--- a/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java
@@ -20,8 +20,6 @@
 import java.io.Externalizable;
 
 import org.apache.commons.math.ode.DerivativeException;
-import org.apache.commons.math.ode.FirstOrderIntegrator;
-import org.apache.commons.math.ode.SecondOrderIntegrator;
 
 /** This interface represents an interpolator over the last step
  * during an ODE integration.
@@ -41,8 +39,8 @@
  * {@link #copy()} method.
  * </p>
  *
- * @see FirstOrderIntegrator
- * @see SecondOrderIntegrator
+ * @see org.apache.commons.math.ode.FirstOrderIntegrator
+ * @see org.apache.commons.math.ode.SecondOrderIntegrator
  * @see StepHandler
  * @version $Revision$ $Date$
  * @since 1.2
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
index 33eb958..343f81b 100644
--- a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
+++ b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
@@ -22,7 +22,6 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;
 import org.apache.commons.math.ode.sampling.StepHandler;
 import org.apache.commons.math.ode.sampling.StepInterpolator;
 
@@ -75,7 +74,8 @@
  * ContinuousOutputModel instance can be important if the state vector
  * is large, if the integration interval is long or if the steps are
  * small (which can result from small tolerance settings in {@link
- * AdaptiveStepsizeIntegrator adaptive step size integrators}).</p>
+ * org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator adaptive
+ * step size integrators}).</p>
  *
  * @see StepHandler
  * @see StepInterpolator
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java b/src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java
index 6cdde73..c9ef8b5 100644
--- a/src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java
+++ b/src/java/org/apache/commons/math/ode/sampling/StepNormalizer.java
@@ -49,9 +49,6 @@
 
 public class StepNormalizer implements StepHandler {
 
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = -789699939659144654L;
-
     /** Fixed time step. */
     private double h;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
index 7046fdc..99a604f 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
@@ -41,8 +41,8 @@
 class EulerStepInterpolator
   extends RungeKuttaStepInterpolator {
 
-  /** Serializable version identifier */
-  private static final long serialVersionUID = -7179861704951334960L;
+  /** Serializable version identifier. */
+  private static final long serialVersionUID = 20110928L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java b/src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java
index b79ecb3..f2e6456 100644
--- a/src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java
+++ b/src/main/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java
@@ -57,7 +57,6 @@
    * @param isLast true if the step is the last one
    * @throws DerivativeException if some error condition is encountered
    */
-  public void handleStep(double t, double[] y, double[] yDot, boolean isLast)
-      throws DerivativeException;
+  void handleStep(double t, double[] y, double[] yDot, boolean isLast) throws DerivativeException;
 
 }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
index 96893e0..3460147 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
@@ -113,7 +113,7 @@
     for (StepHandler handler : stepHandlers) {
         handler.reset();
     }
-    CombinedEventsManager manager = addEndTimeChecker(t, eventsHandlersManager);
+    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
     boolean lastStep = false;
 
     // main integration loop
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 8e9686e..77bdc7b 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -198,7 +198,7 @@
     for (StepHandler handler : stepHandlers) {
         handler.reset();
     }
-    CombinedEventsManager manager = addEndTimeChecker(t, eventsHandlersManager);
+    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
     boolean lastStep = false;
 
     // main integration loop
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java b/src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java
index d0d8f84..b79ecb3 100644
--- a/src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java
+++ b/src/java/org/apache/commons/math/ode/sampling/FixedStepHandler.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.ode.sampling;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.ode.DerivativeException;
 
 /**
@@ -40,7 +38,7 @@
  * @since 1.2
  */
 
-public interface FixedStepHandler extends Serializable {
+public interface FixedStepHandler  {
 
   /**
    * Handle the last accepted step
<end>
<start>
diff --git a/src/java/org/apache/commons/math/complex/ComplexFormat.java b/src/java/org/apache/commons/math/complex/ComplexFormat.java
index 2adad36..d9135b1 100644
--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java
+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java
@@ -216,7 +216,7 @@
      * Returns the default complex format for the current locale.
      * @return the default complex format.
      */
-    public static CompositeFormat getInstance() {
+    public static ComplexFormat getInstance() {
         return getInstance(Locale.getDefault());
     }
     
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java b/src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java
index dbd727a..a4e5262 100644
--- a/src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java
+++ b/src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java
@@ -68,7 +68,7 @@
     public TriDiagonalTransformer(RealMatrix matrix)
         throws InvalidMatrixException {
         if (!matrix.isSquare()) {
-            throw new InvalidMatrixException("transformation to tridiagonal requires that the matrix be square");
+            throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());
         }
 
         final int m = matrix.getRowDimension();
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java
index 3dbdd24..ff35fed 100644
--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java
+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java
@@ -16,11 +16,11 @@
  */
 package org.apache.commons.math.stat.regression;
 
-import org.apache.commons.math.linear.LUDecompositionImpl;
-import org.apache.commons.math.linear.QRDecomposition;
-import org.apache.commons.math.linear.QRDecompositionImpl;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.RealMatrixImpl;
+import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
+import org.apache.commons.math.linear.decomposition.QRDecomposition;
+import org.apache.commons.math.linear.decomposition.QRDecompositionImpl;
 
 /**
  * <p>Implements ordinary least squares (OLS) to estimate the parameters of a 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java b/src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java
index 3c03aae..cd2ad01 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java
@@ -54,9 +54,7 @@
 public abstract class AdaptiveStepsizeIntegrator
   extends AbstractIntegrator {
 
-  /** Serializable version identifier. */
-  private static final long serialVersionUID = -6883579828273958419L;
-
+  
   /** Build an integrator with the given stepsize bounds.
    * The default step handler does nothing.
    * @param name name of the method
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index b93e983..a4a557b 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -65,9 +65,6 @@
 public abstract class EmbeddedRungeKuttaIntegrator
   extends AdaptiveStepsizeIntegrator {
 
-  /** Serializable version identifier. */
-  private static final long serialVersionUID = -8436701741819010959L;
-
   /** Build a Runge-Kutta integrator with the given Butcher array.
    * @param name name of the method
    * @param fsal indicate that the method is an <i>fsal</i>
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
index 6a9e813..21e604f 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java
@@ -54,9 +54,6 @@
 
 public abstract class RungeKuttaIntegrator extends AbstractIntegrator {
 
-  /** Serializable version identifier. */
-  private static final long serialVersionUID = -5346558921715095559L;
-
   /** Simple constructor.
    * Build a Runge-Kutta integrator with the given
    * step. The default step handler does nothing.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java b/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java
index 6d4a477..f065ec8 100644
--- a/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java
+++ b/src/java/org/apache/commons/math/random/AbstractRandomGenerator.java
@@ -34,9 +34,6 @@
  */
 public abstract class AbstractRandomGenerator implements RandomGenerator {
     
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = 7026539017027693474L;
-
     /** 
      * Cached random normal value.  The default implementation for 
      * {@link #nextGaussian} generates pairs of values and this field caches the
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java b/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java
index b113ce1..5c41f1c 100644
--- a/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java
+++ b/src/java/org/apache/commons/math/ode/ContinuousOutputModel.java
@@ -315,7 +315,7 @@
       steps.get(index).setInterpolatedTime(time);
 
     } catch (DerivativeException de) {
-      throw new MathRuntimeException("unexpected exception caught", new Object[0], de);
+      throw new MathRuntimeException("unexpected exception caught", null, de);
     }
 
   }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java b/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java
index 622990a..582f038 100644
--- a/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java
+++ b/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java
@@ -270,7 +270,7 @@
 
         } catch (DimensionMismatchException dme) {
             // this should not happen
-            throw new MathRuntimeException("unexpected exception caught", new Object[0], dme);
+            throw new MathRuntimeException("unexpected exception caught", null, dme);
         }
 
     }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/MathException.java b/src/java/org/apache/commons/math/MathException.java
index 93d7b14..143e9a0 100644
--- a/src/java/org/apache/commons/math/MathException.java
+++ b/src/java/org/apache/commons/math/MathException.java
@@ -99,7 +99,7 @@
     public MathException() {
         super();
         this.pattern   = null;
-        this.arguments = null;
+        this.arguments = new Object[0];
     }
     
     /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java b/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java
index 9cdc62c..00603c0 100644
--- a/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java
+++ b/src/java/org/apache/commons/math/stat/descriptive/moment/StandardDeviation.java
@@ -263,7 +263,7 @@
      * @throws NullPointerException if either source or dest is null
      */
     public static void copy(StandardDeviation source, StandardDeviation dest) {
-        dest.variance = (Variance) source.variance.copy();
+        dest.variance = source.variance.copy();
     }
     
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java
index 0017e27..195d000 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java
@@ -154,6 +154,6 @@
         dest.n = source.n;
         dest.m1 = source.m1;
         dest.dev = source.dev;
-        dest.nDev = dest.nDev;
+        dest.nDev = source.nDev;
     }
 }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/QRDecomposition.java b/src/java/org/apache/commons/math/linear/decomposition/QRDecomposition.java
index 67662e8..b275a86 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/QRDecomposition.java
+++ b/src/java/org/apache/commons/math/linear/decomposition/QRDecomposition.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.linear.decomposition;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.linear.RealMatrix;
 
 /**
@@ -39,7 +37,7 @@
  * @version $Revision$ $Date$
  * @since 1.2
  */
-public interface QRDecomposition extends Serializable {
+public interface QRDecomposition {
 
     /**
      * Returns the matrix R of the decomposition. 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecomposition.java b/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecomposition.java
index 2916ad9..66a7ff8 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecomposition.java
+++ b/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecomposition.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.linear.decomposition;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.linear.RealMatrix;
 
 
@@ -49,7 +47,7 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public interface SingularValueDecomposition extends Serializable {
+public interface SingularValueDecomposition {
 
     /**
      * Returns the matrix U of the decomposition. 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/DecompositionSolver.java b/src/java/org/apache/commons/math/linear/decomposition/DecompositionSolver.java
index 88d2b7f..264fbcb 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/DecompositionSolver.java
+++ b/src/java/org/apache/commons/math/linear/decomposition/DecompositionSolver.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.linear.decomposition;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.linear.InvalidMatrixException;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.RealVector;
@@ -38,7 +36,7 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public interface DecompositionSolver extends Serializable {
+public interface DecompositionSolver {
 
     /** Solve the linear equation A &times; X = B for matrices A.
      * <p>The A matrix is implicit, it is provided by the underlying
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java
index 6938173..3af0003 100644
--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java
+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java
@@ -108,7 +108,7 @@
      */
     protected RealMatrix calculateBetaVariance() {
         RealMatrix XTX = X.transpose().multiply(X);
-        return new LUSolver(new LUDecompositionImpl(XTX)).getInverse();
+        return new LUDecompositionImpl(XTX).getSolver().getInverse();
     }
     
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/RealMatrix.java b/src/java/org/apache/commons/math/linear/RealMatrix.java
index ed6bf1e..8b3022f 100644
--- a/src/java/org/apache/commons/math/linear/RealMatrix.java
+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.linear;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.linear.decomposition.DecompositionSolver;
 import org.apache.commons.math.linear.decomposition.LUDecomposition;
 import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/RandomData.java b/src/java/org/apache/commons/math/random/RandomData.java
index 59229af..1aa5804 100644
--- a/src/java/org/apache/commons/math/random/RandomData.java
+++ b/src/java/org/apache/commons/math/random/RandomData.java
@@ -23,7 +23,7 @@
  * Random data generation utilities.
  * @version $Revision$ $Date$
  */
-public interface RandomData extends Serializable {
+public interface RandomData {
     /**
      * Generates a random string of hex characters of length
      * <code>len</code>.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/transform/FastHadamardTransformer.java b/src/java/org/apache/commons/math/transform/FastHadamardTransformer.java
index 21356da..4621ef7 100644
--- a/src/java/org/apache/commons/math/transform/FastHadamardTransformer.java
+++ b/src/java/org/apache/commons/math/transform/FastHadamardTransformer.java
@@ -33,9 +33,6 @@
  */
 public class FastHadamardTransformer implements RealTransformer {
 
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = -720498949613305350L;
-
     /** {@inheritDoc} */
     public double[] transform(double f[])
         throws IllegalArgumentException {
<end>
<start>
diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
index 4fffb5d..feef7ce 100644
--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
@@ -102,7 +102,7 @@
     /** Check if a result has been computed.
      * @exception IllegalStateException if no result has been computed
      */
-    protected void checkResultComputed() throws IllegalArgumentException {
+    protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
             throw MathRuntimeException.createIllegalStateException("no result available", null);
         }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java b/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java
index 10a5d4c..e813df1 100644
--- a/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java
+++ b/src/java/org/apache/commons/math/ode/SecondOrderDifferentialEquations.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.ode;
 
-import java.io.Serializable;
-
 /** This interface represents a second order differential equations set.
 
  * <p>This interface should be implemented by all real second order
@@ -46,7 +44,7 @@
  * @since 1.2
  */
 
-public interface SecondOrderDifferentialEquations extends Serializable {
+public interface SecondOrderDifferentialEquations {
 
   /** Get the dimension of the problem.
    * @return dimension of the problem
<end>
<start>
diff --git a/src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java b/src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java
index e0c9633..c230d17 100644
--- a/src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java
+++ b/src/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java
@@ -36,9 +36,6 @@
  */
 public class RombergIntegrator extends UnivariateRealIntegratorImpl {
 
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = 4616482344304576900L;
-
     /**
      * Construct an integrator for the given function.
      * 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java b/src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java
index b977779..eda04d9 100644
--- a/src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java
+++ b/src/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java
@@ -35,9 +35,6 @@
  */
 public class SimpsonIntegrator extends UnivariateRealIntegratorImpl {
 
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = 2535890386567281329L;
-
     /**
      * Construct an integrator for the given function.
      * 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java b/src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java
index ba62759..f74a1f7 100644
--- a/src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java
+++ b/src/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java
@@ -34,9 +34,6 @@
  */
 public class TrapezoidIntegrator extends UnivariateRealIntegratorImpl {
 
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = 6963842845860399200L;
-
     /** Intermediate result. */
     private double s;
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/SparseRealVector.java b/src/java/org/apache/commons/math/linear/SparseRealVector.java
index 7a27575..865b589 100644
--- a/src/java/org/apache/commons/math/linear/SparseRealVector.java
+++ b/src/java/org/apache/commons/math/linear/SparseRealVector.java
@@ -27,7 +27,7 @@
 */
 public class SparseRealVector implements RealVector {
 
-    private final OpenIntToDoubleHashMap entries;
+    private  OpenIntToDoubleHashMap entries;
     private final int virtualSize;
     private double epsilon = 1.0e-12;
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java b/src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java
similarity index 95%
rename from src/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
rename to src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java
index 158ed02..5ff77ed 100644
--- a/src/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
+++ b/src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear;
+package org.apache.commons.math.linear.decomposition;
 
 import org.apache.commons.math.MathException;
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java b/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java
index 8696a2c..cf89c94 100644
--- a/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java
+++ b/src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java
@@ -23,8 +23,8 @@
 import org.apache.commons.math.ConvergenceException;
 import org.apache.commons.math.DimensionMismatchException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;
 import org.apache.commons.math.linear.RealMatrix;
+import org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException;
 import org.apache.commons.math.random.CorrelatedRandomVectorGenerator;
 import org.apache.commons.math.random.JDKRandomGenerator;
 import org.apache.commons.math.random.RandomGenerator;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java b/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java
index ff95017..aa29996 100644
--- a/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java
+++ b/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java
@@ -19,8 +19,8 @@
 
 import org.apache.commons.math.DimensionMismatchException;
 import org.apache.commons.math.linear.MatrixUtils;
-import org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;
 import org.apache.commons.math.linear.RealMatrix;
+import org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException;
 
 /** 
  * A {@link RandomVectorGenerator} that generates vectors with with 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java b/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java
index 734f39c..ab5ed77 100644
--- a/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java
+++ b/src/java/org/apache/commons/math/linear/AbstractRealMatrix.java
@@ -18,10 +18,6 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.linear.decomposition.DecompositionSolver;
-import org.apache.commons.math.linear.decomposition.LUDecomposition;
-import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
-import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/BiDiagonalTransformer.java b/src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java
similarity index 98%
rename from src/java/org/apache/commons/math/linear/decomposition/BiDiagonalTransformer.java
rename to src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java
index e5150f7..a723b09 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/BiDiagonalTransformer.java
+++ b/src/java/org/apache/commons/math/linear/BiDiagonalTransformer.java
@@ -15,10 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
-import org.apache.commons.math.linear.MatrixUtils;
-import org.apache.commons.math.linear.RealMatrix;
 
 /**
  * Class transforming any matrix to bi-diagonal shape.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
index 3ac8f56..cc3320f 100644
--- a/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
+++ b/src/java/org/apache/commons/math/linear/BigMatrixImpl.java
@@ -20,8 +20,6 @@
 import java.math.BigDecimal;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;
-import org.apache.commons.math.linear.decomposition.SingularMatrixException;
 
 /**
  * Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/CholeskyDecomposition.java b/src/java/org/apache/commons/math/linear/CholeskyDecomposition.java
similarity index 95%
rename from src/java/org/apache/commons/math/linear/decomposition/CholeskyDecomposition.java
rename to src/java/org/apache/commons/math/linear/CholeskyDecomposition.java
index 7c74fa5..5611808 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/CholeskyDecomposition.java
+++ b/src/java/org/apache/commons/math/linear/CholeskyDecomposition.java
@@ -15,9 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
-import org.apache.commons.math.linear.RealMatrix;
 
 /**
  * An interface to classes that implement an algorithm to calculate the 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
similarity index 96%
rename from src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java
rename to src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
index de4d97b..39faa9a 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/CholeskyDecompositionImpl.java
+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
@@ -15,15 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.linear.InvalidMatrixException;
-import org.apache.commons.math.linear.MatrixUtils;
-import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.linear.RealMatrixImpl;
-import org.apache.commons.math.linear.RealVector;
-import org.apache.commons.math.linear.RealVectorImpl;
 
 
 /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/DecompositionSolver.java b/src/java/org/apache/commons/math/linear/DecompositionSolver.java
similarity index 94%
rename from src/java/org/apache/commons/math/linear/decomposition/DecompositionSolver.java
rename to src/java/org/apache/commons/math/linear/DecompositionSolver.java
index 264fbcb..85e0cda 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/DecompositionSolver.java
+++ b/src/java/org/apache/commons/math/linear/DecompositionSolver.java
@@ -15,11 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
-import org.apache.commons.math.linear.InvalidMatrixException;
-import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.linear.RealVector;
 
 
 /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/EigenDecomposition.java b/src/java/org/apache/commons/math/linear/EigenDecomposition.java
similarity index 96%
rename from src/java/org/apache/commons/math/linear/decomposition/EigenDecomposition.java
rename to src/java/org/apache/commons/math/linear/EigenDecomposition.java
index 90410e0..41ff9ae 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/EigenDecomposition.java
+++ b/src/java/org/apache/commons/math/linear/EigenDecomposition.java
@@ -15,10 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
-import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.linear.RealVector;
 
 /**
  * An interface to classes that implement an algorithm to calculate the 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java b/src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
similarity index 99%
rename from src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java
rename to src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
index 0eb9ab9..2027750 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/EigenDecompositionImpl.java
+++ b/src/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -24,11 +24,6 @@
 import org.apache.commons.math.ConvergenceException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
-import org.apache.commons.math.linear.InvalidMatrixException;
-import org.apache.commons.math.linear.MatrixUtils;
-import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.linear.RealVector;
-import org.apache.commons.math.linear.RealVectorImpl;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/LUDecomposition.java b/src/java/org/apache/commons/math/linear/LUDecomposition.java
similarity index 96%
rename from src/java/org/apache/commons/math/linear/decomposition/LUDecomposition.java
rename to src/java/org/apache/commons/math/linear/LUDecomposition.java
index cd6a39d..f3f3c90 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/LUDecomposition.java
+++ b/src/java/org/apache/commons/math/linear/LUDecomposition.java
@@ -15,9 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
-import org.apache.commons.math.linear.RealMatrix;
 
 /**
  * An interface to classes that implement an algorithm to calculate the 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java b/src/java/org/apache/commons/math/linear/LUDecompositionImpl.java
similarity index 97%
rename from src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java
rename to src/java/org/apache/commons/math/linear/LUDecompositionImpl.java
index 6aad47c..0a2eb6d 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/LUDecompositionImpl.java
+++ b/src/java/org/apache/commons/math/linear/LUDecompositionImpl.java
@@ -15,15 +15,9 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.linear.InvalidMatrixException;
-import org.apache.commons.math.linear.MatrixUtils;
-import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.linear.RealMatrixImpl;
-import org.apache.commons.math.linear.RealVector;
-import org.apache.commons.math.linear.RealVectorImpl;
 
 /**
  * Calculates the LUP-decomposition of a square matrix.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/NonSquareMatrixException.java b/src/java/org/apache/commons/math/linear/NonSquareMatrixException.java
similarity index 92%
rename from src/java/org/apache/commons/math/linear/decomposition/NonSquareMatrixException.java
rename to src/java/org/apache/commons/math/linear/NonSquareMatrixException.java
index 8570827..dc839b6 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/NonSquareMatrixException.java
+++ b/src/java/org/apache/commons/math/linear/NonSquareMatrixException.java
@@ -15,9 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
-import org.apache.commons.math.linear.InvalidMatrixException;
 
 /**
  * Thrown when an operation defined only for square matrices is applied to non-square ones.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java b/src/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
similarity index 95%
rename from src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java
rename to src/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
index 559285a..9f50acf 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/NotPositiveDefiniteMatrixException.java
+++ b/src/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathException;
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/NotSymmetricMatrixException.java b/src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java
similarity index 95%
rename from src/java/org/apache/commons/math/linear/decomposition/NotSymmetricMatrixException.java
rename to src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java
index 6fe9a85..8ce11ad 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/NotSymmetricMatrixException.java
+++ b/src/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathException;
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/QRDecomposition.java b/src/java/org/apache/commons/math/linear/QRDecomposition.java
similarity index 95%
rename from src/java/org/apache/commons/math/linear/decomposition/QRDecomposition.java
rename to src/java/org/apache/commons/math/linear/QRDecomposition.java
index b275a86..b1c94cb 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/QRDecomposition.java
+++ b/src/java/org/apache/commons/math/linear/QRDecomposition.java
@@ -15,9 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
-import org.apache.commons.math.linear.RealMatrix;
 
 /**
  * An interface to classes that implement an algorithm to calculate the 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java b/src/java/org/apache/commons/math/linear/QRDecompositionImpl.java
similarity index 97%
rename from src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java
rename to src/java/org/apache/commons/math/linear/QRDecompositionImpl.java
index b145626..3c643d6 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/QRDecompositionImpl.java
+++ b/src/java/org/apache/commons/math/linear/QRDecompositionImpl.java
@@ -15,17 +15,11 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.linear.DenseRealMatrix;
-import org.apache.commons.math.linear.InvalidMatrixException;
-import org.apache.commons.math.linear.MatrixUtils;
-import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.linear.RealVector;
-import org.apache.commons.math.linear.RealVectorImpl;
 
 
 /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/SingularMatrixException.java b/src/java/org/apache/commons/math/linear/SingularMatrixException.java
similarity index 91%
rename from src/java/org/apache/commons/math/linear/decomposition/SingularMatrixException.java
rename to src/java/org/apache/commons/math/linear/SingularMatrixException.java
index 72a620f..48184e8 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/SingularMatrixException.java
+++ b/src/java/org/apache/commons/math/linear/SingularMatrixException.java
@@ -15,9 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
-import org.apache.commons.math.linear.InvalidMatrixException;
 
 /**
  * Thrown when a matrix is singular.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecomposition.java b/src/java/org/apache/commons/math/linear/SingularValueDecomposition.java
similarity index 97%
rename from src/java/org/apache/commons/math/linear/decomposition/SingularValueDecomposition.java
rename to src/java/org/apache/commons/math/linear/SingularValueDecomposition.java
index 66a7ff8..d52512c 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecomposition.java
+++ b/src/java/org/apache/commons/math/linear/SingularValueDecomposition.java
@@ -15,9 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
-import org.apache.commons.math.linear.RealMatrix;
 
 
 /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java b/src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
similarity index 98%
rename from src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java
rename to src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
index 53c2de0..0db5de3 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/SingularValueDecompositionImpl.java
+++ b/src/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
@@ -15,14 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
 import org.apache.commons.math.ConvergenceException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.linear.InvalidMatrixException;
-import org.apache.commons.math.linear.MatrixUtils;
-import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.linear.RealVector;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/decomposition/TriDiagonalTransformer.java b/src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java
similarity index 97%
rename from src/java/org/apache/commons/math/linear/decomposition/TriDiagonalTransformer.java
rename to src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java
index cf7c84c..0becc0a 100644
--- a/src/java/org/apache/commons/math/linear/decomposition/TriDiagonalTransformer.java
+++ b/src/java/org/apache/commons/math/linear/TriDiagonalTransformer.java
@@ -15,13 +15,10 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.linear.decomposition;
+package org.apache.commons.math.linear;
 
 import java.util.Arrays;
 
-import org.apache.commons.math.linear.InvalidMatrixException;
-import org.apache.commons.math.linear.MatrixUtils;
-import org.apache.commons.math.linear.RealMatrix;
 
 /**
  * Class transforming a symmetrical matrix to tridiagonal shape.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java b/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java
index 2ba6bf1..39cef0e 100644
--- a/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java
+++ b/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java
@@ -19,8 +19,8 @@
 
 import org.apache.commons.math.DimensionMismatchException;
 import org.apache.commons.math.linear.MatrixUtils;
+import org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;
 import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.linear.decomposition.NotPositiveDefiniteMatrixException;
 
 /** 
  * A {@link RandomVectorGenerator} that generates vectors with with 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java b/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java
index c76fd43..6d6c6e3 100644
--- a/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java
+++ b/src/java/org/apache/commons/math/stat/regression/GLSMultipleLinearRegression.java
@@ -16,10 +16,10 @@
  */
 package org.apache.commons.math.stat.regression;
 
+import org.apache.commons.math.linear.LUDecompositionImpl;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.RealMatrixImpl;
 import org.apache.commons.math.linear.RealVector;
-import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
 
 
 /**
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java
index a3e67cd..675839f 100644
--- a/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java
+++ b/src/java/org/apache/commons/math/stat/regression/OLSMultipleLinearRegression.java
@@ -17,13 +17,13 @@
 package org.apache.commons.math.stat.regression;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.linear.LUDecompositionImpl;
+import org.apache.commons.math.linear.QRDecomposition;
+import org.apache.commons.math.linear.QRDecompositionImpl;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.RealMatrixImpl;
 import org.apache.commons.math.linear.RealVector;
 import org.apache.commons.math.linear.RealVectorImpl;
-import org.apache.commons.math.linear.decomposition.LUDecompositionImpl;
-import org.apache.commons.math.linear.decomposition.QRDecomposition;
-import org.apache.commons.math.linear.decomposition.QRDecompositionImpl;
 
 /**
  * <p>Implements ordinary least squares (OLS) to estimate the parameters of a 
<end>
<start>
diff --git a/src/site/resources/userguide/TrajectoryDeterminationProblem.java b/src/site/resources/userguide/TrajectoryDeterminationProblem.java
index 96e585c..0a0ad36 100644
--- a/src/site/resources/userguide/TrajectoryDeterminationProblem.java
+++ b/src/site/resources/userguide/TrajectoryDeterminationProblem.java
@@ -15,12 +15,12 @@
  * limitations under the License.
  */
 
-import org.apache.commons.math.optimization.general.EstimationException;
-import org.apache.commons.math.optimization.general.EstimatedParameter;
-import org.apache.commons.math.optimization.general.EstimationProblem;
-import org.apache.commons.math.optimization.general.LevenbergMarquardtEstimator;
-import org.apache.commons.math.optimization.general.SimpleEstimationProblem;
-import org.apache.commons.math.optimization.general.WeightedMeasurement;
+import org.apache.commons.math3.optimization.general.EstimationException;
+import org.apache.commons.math3.optimization.general.EstimatedParameter;
+import org.apache.commons.math3.optimization.general.EstimationProblem;
+import org.apache.commons.math3.optimization.general.LevenbergMarquardtEstimator;
+import org.apache.commons.math3.optimization.general.SimpleEstimationProblem;
+import org.apache.commons.math3.optimization.general.WeightedMeasurement;
 
 public class TrajectoryDeterminationProblem extends SimpleEstimationProblem {
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java b/src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java
index 62de70d..082ec0d 100644
--- a/src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java
+++ b/src/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.math.optimization;
 
+import java.io.Serializable;
+
 import org.apache.commons.math.util.MathUtils;
 
 /** 
@@ -31,7 +33,9 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public class SimpleVectorialValueChecker implements VectorialConvergenceChecker {
+public class SimpleVectorialValueChecker implements VectorialConvergenceChecker, Serializable {
+    // TODO: Add Serializable documentation
+    // TODO: Check Serializable implementation
 
     /** Serializable version identifier. */
     private static final long serialVersionUID = -3892196630780700808L;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java b/src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java
index c4ac494..89e30a2 100644
--- a/src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java
+++ b/src/java/org/apache/commons/math/optimization/VectorialConvergenceChecker.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.optimization;
 
-import java.io.Serializable;
-
 /** This interface specifies how to check if an {@link VectorialOptimizer optimization
  * algorithm} has converged.
  *
@@ -36,7 +34,7 @@
  * @since 2.0
  */
 
-public interface VectorialConvergenceChecker extends Serializable {
+public interface VectorialConvergenceChecker {
 
   /** Check if the optimization algorithm has converged considering the last points.
    * <p>
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java b/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java
index ef9b3ce..2ba6bf1 100644
--- a/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java
+++ b/src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java
@@ -62,9 +62,6 @@
 public class CorrelatedRandomVectorGenerator
     implements RandomVectorGenerator {
 
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = -7162933284241468177L;
-
     /** Simple constructor.
      * <p>Build a correlated random vector generator from its mean
      * vector and covariance matrix.</p>
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/GaussianRandomGenerator.java b/src/java/org/apache/commons/math/random/GaussianRandomGenerator.java
index 0649b02..f1395e8 100644
--- a/src/java/org/apache/commons/math/random/GaussianRandomGenerator.java
+++ b/src/java/org/apache/commons/math/random/GaussianRandomGenerator.java
@@ -27,9 +27,6 @@
 
 public class GaussianRandomGenerator implements NormalizedRandomGenerator {
 
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = -4698731518385853565L;
-
     /** Create a new generator.
      * @param generator underlying random generator to use
      */
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java b/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java
index 680e0b8..800c68a 100644
--- a/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java
+++ b/src/java/org/apache/commons/math/random/NormalizedRandomGenerator.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.random;
 
-import java.io.Serializable;
-
 /** 
  * This interface represent a normalized random generator for
  * scalars.
@@ -26,7 +24,7 @@
  * @version $Revision$ $Date$
  * @since 1.2
  */
-public interface NormalizedRandomGenerator extends Serializable {
+public interface NormalizedRandomGenerator {
 
   /** Generate a random scalar with null mean and unit standard deviation.
    * <p>This method does <strong>not</strong> specify the shape of the
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/RandomVectorGenerator.java b/src/java/org/apache/commons/math/random/RandomVectorGenerator.java
index 097266d..933fc68 100644
--- a/src/java/org/apache/commons/math/random/RandomVectorGenerator.java
+++ b/src/java/org/apache/commons/math/random/RandomVectorGenerator.java
@@ -26,7 +26,7 @@
  *
  */
 
-public interface RandomVectorGenerator extends Serializable {
+public interface RandomVectorGenerator {
 
   /** Generate a random vector.
    * @return a random vector as an array of double.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java b/src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java
index 5f86a12..e512e8d 100644
--- a/src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java
+++ b/src/java/org/apache/commons/math/random/UncorrelatedRandomVectorGenerator.java
@@ -33,9 +33,6 @@
 public class UncorrelatedRandomVectorGenerator
   implements RandomVectorGenerator {
 
-  /** Serializable version identifier. */
-  private static final long serialVersionUID = -3268228248001718811L;
-
   /** Simple constructor.
    * <p>Build an uncorrelated random vector generator from
    * its mean and standard deviation vectors.</p>
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java b/src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java
index df156c2..6b7726f 100644
--- a/src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java
+++ b/src/main/java/org/apache/commons/math/random/UniformRandomGenerator.java
@@ -33,9 +33,6 @@
 
 public class UniformRandomGenerator implements NormalizedRandomGenerator {
 
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = 1569292426375546027L;
-
     /** Square root of three. */
     private static final double SQRT3 = FastMath.sqrt(3.0);
 
<end>
<start>
diff --git a/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java
index bd79bc6..457ada7 100644
--- a/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java
+++ b/src/java/org/apache/commons/math/analysis/UnivariateRealFunction.java
@@ -16,8 +16,6 @@
  */
 package org.apache.commons.math.analysis;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.FunctionEvaluationException;
 
 /**
@@ -25,7 +23,7 @@
  *  
  * @version $Revision$ $Date$
  */
-public interface UnivariateRealFunction extends Serializable {
+public interface UnivariateRealFunction {
     /**
      * Compute the value for the function.
      * @param x the point for which the function value should be computed
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java b/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
index f278bd3..8f2e9d4 100644
--- a/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
+++ b/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.optimization;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
 
@@ -32,7 +30,7 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public interface DifferentiableMultivariateRealOptimizer extends Serializable {
+public interface DifferentiableMultivariateRealOptimizer {
 
     /** Set the maximal number of iterations of the algorithm.
      * @param maxIterations maximal number of function calls
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java b/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java
index 86a69c0..6853768 100644
--- a/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java
+++ b/src/java/org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.optimization;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
 
@@ -32,7 +30,7 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public interface DifferentiableMultivariateVectorialOptimizer extends Serializable {
+public interface DifferentiableMultivariateVectorialOptimizer {
 
     /** Set the maximal number of iterations of the algorithm.
      * @param maxIterations maximal number of function calls
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java b/src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
index c48c82a..78116f2 100644
--- a/src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
+++ b/src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
@@ -119,7 +119,7 @@
         if (optima == null) {
             throw MathRuntimeException.createIllegalStateException("no optimum computed yet");
         }
-        return (RealPointValuePair[]) optima.clone();
+        return optima.clone();
     }
 
     /** {@inheritDoc} */
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java b/src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
index 4da2c2c..9c4d9fa 100644
--- a/src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
+++ b/src/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
@@ -113,7 +113,7 @@
         if (optima == null) {
             throw MathRuntimeException.createIllegalStateException("no optimum computed yet");
         }
-        return (RealPointValuePair[]) optima.clone();
+        return optima.clone();
     }
 
     /** {@inheritDoc} */
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java b/src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java
index e10c28b..c1e570c 100644
--- a/src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java
+++ b/src/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.optimization;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.analysis.MultivariateRealFunction;
 
@@ -32,7 +30,7 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public interface MultivariateRealOptimizer extends Serializable {
+public interface MultivariateRealOptimizer {
 
     /** Set the maximal number of iterations of the algorithm.
      * @param maxIterations maximal number of function calls
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java b/src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java
index 3577472..4609d7c 100644
--- a/src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java
+++ b/src/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.math.optimization;
 
+import java.io.Serializable;
+
 import org.apache.commons.math.util.MathUtils;
 
 /** 
@@ -31,7 +33,9 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public class SimpleScalarValueChecker implements RealConvergenceChecker {
+public class SimpleScalarValueChecker implements RealConvergenceChecker, Serializable {
+    // TODO: Add Serializable documentation
+    // TODO: Check Serializable implementation
 
     /** Serializable version identifier. */
     private static final long serialVersionUID = 2490271385513842607L;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java b/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java
index 326e6e2..0d407b9 100644
--- a/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java
+++ b/src/main/java/org/apache/commons/math/optimization/RealPointValuePair.java
@@ -19,13 +19,12 @@
 
 import java.io.Serializable;
 
-import org.apache.commons.math.analysis.MultivariateRealFunction;
 
 /** 
  * This class holds a point and the value of an objective function at this point.
  * <p>This is a simple immutable container.</p>
  * @see VectorialPointValuePair
- * @see MultivariateRealFunction
+ * @see org.apache.commons.math.analysis.MultivariateRealFunction
  * @version $Revision$ $Date$
  * @since 2.0
  */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java b/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java
index 8613021..71b8353 100644
--- a/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java
+++ b/src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java
@@ -19,13 +19,11 @@
 
 import java.io.Serializable;
 
-import org.apache.commons.math.analysis.MultivariateVectorialFunction;
-
 /** 
  * This class holds a point and the vectorial value of an objective function at this point.
  * <p>This is a simple immutable container.</p>
  * @see RealPointValuePair
- * @see MultivariateVectorialFunction
+ * @see org.apache.commons.math.analysis.MultivariateVectorialFunction
  * @version $Revision$ $Date$
  * @since 2.0
  */
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java b/src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
index a023873..7c00b36 100644
--- a/src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
+++ b/src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
@@ -17,6 +17,8 @@
 
 package org.apache.commons.math.optimization;
 
+import java.io.Serializable;
+
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.MultivariateRealFunction;
@@ -54,7 +56,9 @@
  * @since 2.0
  */
 
-public class LeastSquaresConverter implements MultivariateRealFunction {
+public class LeastSquaresConverter implements MultivariateRealFunction, Serializable {
+    // TODO: Add Serializable documentation
+    // TODO: Check Serializable implementation
 
     /** Serializable version identifier. */
     private static final long serialVersionUID = -4369653306135732243L;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/RealVector.java b/src/java/org/apache/commons/math/linear/RealVector.java
index c246391..4b525ba 100644
--- a/src/java/org/apache/commons/math/linear/RealVector.java
+++ b/src/java/org/apache/commons/math/linear/RealVector.java
@@ -16,8 +16,6 @@
  */
 package org.apache.commons.math.linear;
 
-import java.io.Serializable;
-
 /**
  * Interface defining a real-valued vector with basic algebraic operations.
  * <p>
@@ -41,7 +39,7 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public interface RealVector extends Serializable {
+public interface RealVector {
 
     /**
      * Returns a (deep) copy of this.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/MultistepIntegrator.java b/src/java/org/apache/commons/math/ode/MultistepIntegrator.java
index 13259aa..55a2ccf 100644
--- a/src/java/org/apache/commons/math/ode/MultistepIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/MultistepIntegrator.java
@@ -23,8 +23,6 @@
 import org.apache.commons.math.ode.events.EventException;
 import org.apache.commons.math.ode.events.EventHandler;
 import org.apache.commons.math.ode.events.EventState;
-import org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;
-import org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator;
 import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
 import org.apache.commons.math.ode.sampling.FixedStepHandler;
 import org.apache.commons.math.ode.sampling.MultistepStepInterpolator;
@@ -36,8 +34,8 @@
  * This class is the base class for multistep integrators for Ordinary
  * Differential Equations.
  *
- * @see AdamsBashforthIntegrator
- * @see AdamsMoultonIntegrator
+ * @see org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator
+ * @see org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator
  * @version $Revision$ $Date$
  * @since 2.0
  */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java
index 6178365..4b63efc 100644
--- a/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java
+++ b/src/main/java/org/apache/commons/math/ode/sampling/DummyStepHandler.java
@@ -48,7 +48,7 @@
    * @return the only instance
    */
   public static DummyStepHandler getInstance() {
-    return instance;
+    return INSTANCE;
   }
 
   /** Determines whether this handler needs dense output.
@@ -82,6 +82,6 @@
   }
 
   /** The only instance. */
-  private static final DummyStepHandler instance = new DummyStepHandler();
+  private static final DummyStepHandler INSTANCE = new DummyStepHandler();
 
 }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/fraction/BigFraction.java b/src/java/org/apache/commons/math/fraction/BigFraction.java
index ce48cef..50cffd9 100644
--- a/src/java/org/apache/commons/math/fraction/BigFraction.java
+++ b/src/java/org/apache/commons/math/fraction/BigFraction.java
@@ -16,6 +16,7 @@
  */
 package org.apache.commons.math.fraction;
 
+import java.io.Serializable;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 
@@ -30,7 +31,9 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public class BigFraction extends Number implements FieldElement<BigFraction>, Comparable<BigFraction> {
+public class BigFraction extends Number implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable {
+    // TODO: Add Serializable documentation
+    // TODO: Check Serializable implementation
 
     /** A fraction representing "2 / 1". */
     public static final BigFraction TWO = new BigFraction(2);
<end>
<start>
diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java b/src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java
index dad2052..00f7cdd 100644
--- a/src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java
+++ b/src/test/java/org/apache/commons/math/ode/nonstiff/StepProblem.java
@@ -43,9 +43,9 @@
     this.rate = rate;
   }
 
-  public int eventOccurred(double t, double[] y, boolean increasing) {
+  public Action eventOccurred(double t, double[] y, boolean increasing) {
     setRate(rateAfter);
-    return RESET_DERIVATIVES;
+    return Action.RESET_DERIVATIVES;
   }
 
   public double g(double t, double[] y) {
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/FieldMatrix.java b/src/java/org/apache/commons/math/linear/FieldMatrix.java
index 3ffa6c6..ce79ff3 100644
--- a/src/java/org/apache/commons/math/linear/FieldMatrix.java
+++ b/src/java/org/apache/commons/math/linear/FieldMatrix.java
@@ -17,7 +17,6 @@
 
 package org.apache.commons.math.linear;
 
-import java.io.Serializable;
 
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
@@ -32,7 +31,7 @@
  * @param <T> the type of the field elements
  * @version $Revision$ $Date$
  */
-public interface FieldMatrix<T extends FieldElement<T>> extends AnyMatrix, Serializable {
+public interface FieldMatrix<T extends FieldElement<T>> extends AnyMatrix {
 
     /**
      * Get the type of field elements of the matrix.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/RealMatrix.java b/src/java/org/apache/commons/math/linear/RealMatrix.java
index 9f678ef..ed6bf1e 100644
--- a/src/java/org/apache/commons/math/linear/RealMatrix.java
+++ b/src/java/org/apache/commons/math/linear/RealMatrix.java
@@ -32,7 +32,7 @@
  * 
  * @version $Revision$ $Date$
  */
-public interface RealMatrix extends AnyMatrix, Serializable {
+public interface RealMatrix extends AnyMatrix {
 
     /**
      * Create a new RealMatrix of the same type as the instance with the supplied
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java b/src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java
index e5f708f..be79fc7 100644
--- a/src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java
+++ b/src/java/org/apache/commons/math/linear/OpenMapRealMatrix.java
@@ -286,9 +286,5 @@
         return row * columnDimension + column;
     }
 
-    /** {@inheritDoc} */
-    public MatrixShape getShape() {
-        return MatrixShape.Any;
-    }
 
 }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/java/org/apache/commons/math/linear/OpenMapRealVector.java
index 683b682..68a1144 100644
--- a/src/java/org/apache/commons/math/linear/OpenMapRealVector.java
+++ b/src/java/org/apache/commons/math/linear/OpenMapRealVector.java
@@ -16,6 +16,8 @@
  */
 package org.apache.commons.math.linear;
 
+import java.io.Serializable;
+
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.util.OpenIntToDoubleHashMap;
 import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator;
@@ -25,7 +27,7 @@
  * @version $Revision: 728186 $ $Date$
  * @since 2.0
 */
-public class OpenMapRealVector implements SparseRealVector {
+public class OpenMapRealVector implements SparseRealVector, Serializable {
 
     /** Serializable version identifier. */
     private static final long serialVersionUID = 8772222695580707260L;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/fraction/BigFraction.java b/src/java/org/apache/commons/math/fraction/BigFraction.java
index 5089e41..e70072d 100644
--- a/src/java/org/apache/commons/math/fraction/BigFraction.java
+++ b/src/java/org/apache/commons/math/fraction/BigFraction.java
@@ -31,9 +31,9 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public class BigFraction extends Number implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable {
-    // TODO: Add Serializable documentation
-    // TODO: Check Serializable implementation
+public class BigFraction
+    extends Number
+    implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable {
 
     /** A fraction representing "2 / 1". */
     public static final BigFraction TWO = new BigFraction(2);
<end>
<start>
diff --git a/src/java/org/apache/commons/math/fraction/Fraction.java b/src/java/org/apache/commons/math/fraction/Fraction.java
index bb2e287..4d8c757 100644
--- a/src/java/org/apache/commons/math/fraction/Fraction.java
+++ b/src/java/org/apache/commons/math/fraction/Fraction.java
@@ -31,9 +31,9 @@
  * @since 1.1
  * @version $Revision$ $Date$
  */
-public class Fraction extends Number implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {
-    // TODO: Add Serializable documentation
-    // TODO: Check Serializable implementation
+public class Fraction
+    extends Number
+    implements FieldElement<Fraction>, Comparable<Fraction>, Serializable {
 
     /** A fraction representing "2 / 1". */
     public static final Fraction TWO = new Fraction(2, 1);
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java b/src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
index b8dd6a5..2b3b55b 100644
--- a/src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
+++ b/src/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
@@ -86,12 +86,7 @@
  * @version $Revision$ $Date$
  * @since 1.2
  */
-public abstract class DirectSearchOptimizer implements MultivariateRealOptimizer, Serializable {
-    // TODO: Add Serializable documentation
-    // TODO: Check Serializable implementation
-
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = 4299910390345933369L;
+public abstract class DirectSearchOptimizer implements MultivariateRealOptimizer {
 
     /** Simplex. */
     protected RealPointValuePair[] simplex;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java b/src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
index 7c00b36..561ac88 100644
--- a/src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
+++ b/src/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.optimization;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.MultivariateRealFunction;
@@ -56,12 +54,7 @@
  * @since 2.0
  */
 
-public class LeastSquaresConverter implements MultivariateRealFunction, Serializable {
-    // TODO: Add Serializable documentation
-    // TODO: Check Serializable implementation
-
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = -4369653306135732243L;
+public class LeastSquaresConverter implements MultivariateRealFunction {
 
     /** Underlying vectorial function. */
     private final MultivariateVectorialFunction function;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java b/src/main/java/org/apache/commons/math/analysis/MultivariateFunction.java
similarity index 97%
rename from src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java
rename to src/main/java/org/apache/commons/math/analysis/MultivariateFunction.java
index 82d588a..b8346c7 100644
--- a/src/main/java/org/apache/commons/math/analysis/MultivariateRealFunction.java
+++ b/src/main/java/org/apache/commons/math/analysis/MultivariateFunction.java
@@ -23,7 +23,7 @@
  * @version $Id$
  * @since 2.0
  */
-public interface MultivariateRealFunction {
+public interface MultivariateFunction {
 
     /**
      * Compute the value for the function at the given point.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java b/src/main/java/org/apache/commons/math/analysis/MultivariateVectorFunction.java
similarity index 96%
rename from src/main/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java
rename to src/main/java/org/apache/commons/math/analysis/MultivariateVectorFunction.java
index f6b241e..a194e52 100644
--- a/src/main/java/org/apache/commons/math/analysis/MultivariateVectorialFunction.java
+++ b/src/main/java/org/apache/commons/math/analysis/MultivariateVectorFunction.java
@@ -22,7 +22,7 @@
  * @version $Id$
  * @since 2.0
  */
-public interface MultivariateVectorialFunction {
+public interface MultivariateVectorFunction {
 
     /**
      * Compute the value for the function at the given point.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java b/src/main/java/org/apache/commons/math/analysis/UnivariateVectorFunction.java
similarity index 95%
rename from src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java
rename to src/main/java/org/apache/commons/math/analysis/UnivariateVectorFunction.java
index ece1663..b4e9954 100644
--- a/src/main/java/org/apache/commons/math/analysis/UnivariateVectorialFunction.java
+++ b/src/main/java/org/apache/commons/math/analysis/UnivariateVectorFunction.java
@@ -22,7 +22,7 @@
  * @version $Id$
  * @since 2.0
  */
-public interface UnivariateVectorialFunction {
+public interface UnivariateVectorFunction {
 
     /**
      * Compute the value for the function.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java b/src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
index 0582772..d6d57da 100644
--- a/src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
+++ b/src/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
@@ -17,7 +17,6 @@
 
 package org.apache.commons.math.optimization;
 
-import java.io.Serializable;
 import java.util.Arrays;
 import java.util.Comparator;
 
@@ -39,10 +38,7 @@
  * @since 2.0
  */
 public class MultiStartDifferentiableMultivariateRealOptimizer
-    implements DifferentiableMultivariateRealOptimizer, Serializable {
-
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = -3220364832729994537L;
+    implements DifferentiableMultivariateRealOptimizer {
 
     /** Underlying classical optimizer. */
     private final DifferentiableMultivariateRealOptimizer optimizer;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
index 94aee34..71230aa 100644
--- a/src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
+++ b/src/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
@@ -16,7 +16,6 @@
  */
 package org.apache.commons.math.optimization.general;
 
-import java.io.Serializable;
 import java.util.Arrays;
 
 import org.apache.commons.math.FunctionEvaluationException;
@@ -100,10 +99,7 @@
  * @since 2.0
  *
  */
-public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer implements Serializable {
-
-    /** Serializable version identifier */
-    private static final long serialVersionUID = 8851282236194244323L;
+public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
 
     /** Number of solved point. */
     private int solvedCols;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
index d177118..4ede4e8 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
@@ -764,7 +764,7 @@
                 out[col] = sum;
             }
 
-            return new ArrayFieldVector<T>(out);
+            return new ArrayFieldVector<T>(out, false);
         }
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
index 566922a..7a8f3fc 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
@@ -693,7 +693,7 @@
                 out[col] = sum;
             }
 
-            return new ArrayRealVector(out);
+            return new ArrayRealVector(out, false);
         }
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/genetics/Fitness.java b/src/main/java/org/apache/commons/math/genetics/Fitness.java
index 4ae2280..8c99001 100644
--- a/src/main/java/org/apache/commons/math/genetics/Fitness.java
+++ b/src/main/java/org/apache/commons/math/genetics/Fitness.java
@@ -23,11 +23,13 @@
  * @since 2.0
  */
 public interface Fitness {
+
     /**
      * Compute the fitness. This is usually very time-consuming, so the value
      * should be cached.
      *
      * @return fitness
      */
-    public double fitness();
+    double fitness();
+
 }
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java b/src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java
index 58998b1..c587bf1 100644
--- a/src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java
+++ b/src/java/org/apache/commons/math/ConvergingAlgorithmImpl.java
@@ -17,7 +17,6 @@
 
 package org.apache.commons.math;
 
-import java.io.Serializable;
 
 /**
  * Provide a default implementation for several functions useful to generic
@@ -26,12 +25,7 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public abstract class ConvergingAlgorithmImpl implements ConvergingAlgorithm, Serializable {
-
-    /**
-     *  Serialization UID.
-     */
-    private static final long serialVersionUID = 1L;
+public abstract class ConvergingAlgorithmImpl implements ConvergingAlgorithm{
 
     /** Maximum absolute error. */
     protected double absoluteAccuracy;
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java b/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java
index b787d0b..3fc0a19 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.ode.nonstiff;
 
-import java.io.Serializable;
-
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
@@ -140,10 +138,7 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public class AdamsBashforthIntegrator extends MultistepIntegrator implements Serializable {
-
-    /** Serializable version identifier. */
-    private static final long serialVersionUID = 67792782787082199L;
+public class AdamsBashforthIntegrator extends MultistepIntegrator {
 
     /**
      * Build an Adams-Bashforth with the given order and step size.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java b/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java
index 4480792..836171e 100644
--- a/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java
+++ b/src/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java
@@ -17,7 +17,6 @@
 
 package org.apache.commons.math.ode.nonstiff;
 
-import java.io.Serializable;
 import java.util.Arrays;
 
 import org.apache.commons.math.linear.MatrixVisitorException;
@@ -156,12 +155,7 @@
  * @version $Revision$ $Date$
  * @since 2.0
  */
-public class AdamsMoultonIntegrator extends MultistepIntegrator implements Serializable {
-
-    /**
-     * Serial identification Number
-     */
-    private static final long serialVersionUID = 3624292432281962886L;
+public class AdamsMoultonIntegrator extends MultistepIntegrator {
 
     /**
      * Build an Adams-Moulton integrator with the given order and step size.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java
index 1b0f563..2f8a437 100644
--- a/src/java/org/apache/commons/math/complex/Complex.java
+++ b/src/java/org/apache/commons/math/complex/Complex.java
@@ -976,7 +976,7 @@
      * @return A Complex instance with all fields resolved.
      * @since 2.0
      */
-    private final Object readResolve() {
+    protected final Object readResolve() {
         return createComplex(real, imaginary);
     }
     
<end>
<start>
diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
index 9eb12a3..8156f4e 100644
--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
@@ -31,9 +31,6 @@
 public abstract class UnivariateRealSolverImpl
     extends ConvergingAlgorithmImpl implements UnivariateRealSolver {
 
-    /** Serializable version ID. */
-    private static final long serialVersionUID = 1L;
-
     /** Maximum error of function. */
     protected double functionValueAccuracy;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java b/src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java
index c65d04e..ae7e62a 100644
--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java
+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecomposition.java
@@ -111,7 +111,7 @@
      * @exception IllegalArgumentException if minSingularValue is larger than
      * the largest singular value, meaning all singular values are ignored
      */
-    RealMatrix getCovariance(double minSingularValue) throws IllegalArgumentException;
+    RealMatrix getCovariance(double minSingularValue);
 
     /**
      * Returns the L<sub>2</sub> norm of the matrix.
<end>
<start>
diff --git a/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java b/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java
index f0121f9..650bc74 100644
--- a/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java
+++ b/src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java
@@ -19,8 +19,6 @@
 
 import java.io.Serializable;
 
-import org.apache.commons.math.util.MathUtils;
-
 /**
  * <p>
  * A StatisticalSummary that aggregates statistics from several data sets or
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java
index c56edeb..31aaffa 100644
--- a/src/main/java/org/apache/commons/math/stat/Frequency.java
+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java
@@ -557,7 +557,7 @@
          */
         @SuppressWarnings("unchecked")
         public int compare(Comparable<T> o1, Comparable<T> o2) {
-            return (o1.compareTo((T) o2));
+            return o1.compareTo((T) o2);
         }
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
index 93c3f14..81e1268 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
@@ -20,7 +20,6 @@
 
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
-import org.apache.commons.math.stat.descriptive.summary.Sum;
 
 /**
  * Computes the variance of the available values.  By default, the unbiased
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java
index d4ebda3..f21d3f5 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java
@@ -19,7 +19,6 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
-import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;
 
 /**
  * Returns the product of the available values.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java b/src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java
index 9c8bea8..dd4b882 100644
--- a/src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java
+++ b/src/main/java/org/apache/commons/math/estimation/EstimatedParameter.java
@@ -44,7 +44,7 @@
     protected double  estimate;
 
     /** Name of the parameter */
-    private   String  name;
+    private final String  name;
 
     /** Indicator for bound parameters
      * (ie parameters that should not be estimated)
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
index 303441d..6381952 100644
--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
@@ -383,7 +383,7 @@
      */
     @SuppressWarnings("unchecked") // field is of type T
     private T[] buildArray(final int length) {
-        return (T[]) Array.newInstance(field.getZero().getClass(), length);
+        return (T[]) Array.newInstance(field.getRuntimeClass(), length);
     }
 
     /** {@inheritDoc} */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java
index 52cdcdf..af32c4c 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java
@@ -71,8 +71,8 @@
     /** Shampine (1986) Dense output, element 6. */
     private static final double D6 =      69997945.0 /     29380423.0;
 
-    /** Serializable version identifier */
-    private static final long serialVersionUID = 4104157279605906956L;
+    /** Serializable version identifier. */
+    private static final long serialVersionUID = 20110928L;
 
     /** First vector for interpolation. */
     private double[] v1;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
index ebf3049..45ebb82 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java
@@ -38,8 +38,8 @@
 class DormandPrince853StepInterpolator
   extends RungeKuttaStepInterpolator {
 
-    /** Serializable version identifier */
-    private static final long serialVersionUID = 7152276390558450974L;
+    /** Serializable version identifier. */
+    private static final long serialVersionUID = 20110928L;
 
     /** Propagation weights, element 1. */
     private static final double B_01 =         104257.0 / 1920240.0;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java
index 118dda1..e956b20 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java
@@ -53,8 +53,8 @@
     /** Second Gill coefficient. */
     private static final double TWO_PLUS_SQRT_2 = 2 + FastMath.sqrt(2.0);
 
-    /** Serializable version identifier */
-    private static final long serialVersionUID = -107804074496313322L;
+    /** Serializable version identifier. */
+    private static final long serialVersionUID = 20110928L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java
index ef346b8..6446bee 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java
@@ -79,7 +79,7 @@
   extends AbstractStepInterpolator {
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 7320613236731409847L;
+    private static final long serialVersionUID = 20110928L;
 
     /** Slope at the beginning of the step. */
     private double[] y0Dot;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
index f44d632..ba112d4 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
@@ -33,7 +33,7 @@
   extends RungeKuttaStepInterpolator {
 
   /** Serializable version identifier */
-  private static final long serialVersionUID = -3583240427587318654L;
+  private static final long serialVersionUID = 20110928L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
index 5d0dd2b..1c76483 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
@@ -43,8 +43,8 @@
 class MidpointStepInterpolator
   extends RungeKuttaStepInterpolator {
 
-    /** Serializable version identifier */
-    private static final long serialVersionUID = -865524111506042509L;
+  /** Serializable version identifier */
+  private static final long serialVersionUID = 20110928L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
index ccf17e1..731ec44 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
@@ -48,8 +48,8 @@
 class ThreeEighthesStepInterpolator
   extends RungeKuttaStepInterpolator {
 
-    /** Serializable version identifier */
-    private static final long serialVersionUID = -3345024435978721931L;
+  /** Serializable version identifier */
+  private static final long serialVersionUID = 20110928L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MathRuntimeException.java b/src/main/java/org/apache/commons/math/MathRuntimeException.java
index 8cf2f04..abf058f 100644
--- a/src/main/java/org/apache/commons/math/MathRuntimeException.java
+++ b/src/main/java/org/apache/commons/math/MathRuntimeException.java
@@ -684,7 +684,7 @@
 
         final String argument = "https://issues.apache.org/jira/browse/MATH";
 
-        return new RuntimeException() {
+        return new RuntimeException(cause) {
 
             /** Serializable version identifier. */
             private static final long serialVersionUID = -201865440834027016L;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java
index e750518..6489991 100644
--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java
+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java
@@ -45,12 +45,12 @@
     /**
      * Interpolating points (abscissas).
      */
-    private double x[];
+    private final double x[];
 
     /**
      * Function values at interpolating points.
      */
-    private double y[];
+    private final double y[];
 
     /**
      * Whether the polynomial coefficients are available.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java b/src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java
index 03a257d..12ad2c9 100644
--- a/src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java
+++ b/src/main/java/org/apache/commons/math/distribution/SaddlePointExpansion.java
@@ -45,7 +45,7 @@
 final class SaddlePointExpansion {
 
     /** 1/2 * log(2 &#960;). */
-    private static double HALF_LOG_2_PI = 0.5 * Math.log(MathUtils.TWO_PI);
+    private static final double HALF_LOG_2_PI = 0.5 * Math.log(MathUtils.TWO_PI);
 
     /** exact Stirling expansion error for certain values. */
     private static final double[] EXACT_STIRLING_ERRORS = { 0.0, /* 0.0 */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java
index 360c2bd..4a490a0 100644
--- a/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java
+++ b/src/main/java/org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.java
@@ -105,7 +105,7 @@
      */
     @Override
     public String toString() {
-        final StringBuffer buff = new StringBuffer("(");
+        final StringBuilder buff = new StringBuilder("(");
         final int[] coordinates = getPoint();
         for (int i = 0; i < coordinates.length; i++) {
             buff.append(coordinates[i]);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
index eee3a3b..f098bfb 100644
--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
@@ -44,7 +44,7 @@
     private final int virtualSize;
 
     /** Tolerance for having a value considered zero. */
-    private double epsilon;
+    private final double epsilon;
 
     /**
      * Build a 0-length vector.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java
index 34b2a12..b8e6b22 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java
@@ -19,7 +19,6 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
-import org.apache.commons.math.stat.descriptive.WeightedEvaluation;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java b/src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java
index a3ad454..6c00209 100644
--- a/src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java
+++ b/src/main/java/org/apache/commons/math/ode/jacobians/ParameterizedODE.java
@@ -29,8 +29,7 @@
  * @since 2.1
  */
 
-public interface ParameterizedODE
-    extends FirstOrderDifferentialEquations {
+public interface ParameterizedODE extends FirstOrderDifferentialEquations {
 
     /** Get the number of parameters.
      * @return number of parameters
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java b/src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java
index b4f5ec6..728d787 100644
--- a/src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java
+++ b/src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java
@@ -34,7 +34,7 @@
      * @return the value.
      * @throws FunctionEvaluationException if the function evaluation fails.
      */
-    public double value(double x, double y)
+    double value(double x, double y)
         throws FunctionEvaluationException;
 
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MessagesResources_fr.java b/src/main/java/org/apache/commons/math/MessagesResources_fr.java
index 1fc6de0..fdada82 100644
--- a/src/main/java/org/apache/commons/math/MessagesResources_fr.java
+++ b/src/main/java/org/apache/commons/math/MessagesResources_fr.java
@@ -756,7 +756,7 @@
    // org.apache.commons.math.distribution.AbstractIntegerDistribution
    // org.apache.commons.math.distribution.AbstractContinuousDistribution
    { "Sample size must be positive",
-     "Taille de l'\u00e9chantillon doit \u00eatre positif" },
+     "La taille de l'\u00e9chantillon doit \u00eatre positive" },
 
    // org.apache.commons.math.distribution.BinomialDistributionImpl
    { "number of trials must be non-negative ({0})",
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java
index 711d372..bd08ea5 100644
--- a/src/main/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java
@@ -493,7 +493,7 @@
             yInt = SGN_MASK - yInt;
         }
 
-        final boolean isEqual = (Math.abs(xInt - yInt) <= maxUlps);
+        final boolean isEqual = Math.abs(xInt - yInt) <= maxUlps;
 
         return isEqual && !Double.isNaN(x) && !Double.isNaN(y);
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ConvergenceException.java b/src/main/java/org/apache/commons/math/ConvergenceException.java
index 0c7f925..ed13ee5 100644
--- a/src/main/java/org/apache/commons/math/ConvergenceException.java
+++ b/src/main/java/org/apache/commons/math/ConvergenceException.java
@@ -16,9 +16,9 @@
  */
 package org.apache.commons.math;
 
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Error thrown when a numerical computation can not be performed because the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/DimensionMismatchException.java b/src/main/java/org/apache/commons/math/DimensionMismatchException.java
index c3db815..ae30bff 100644
--- a/src/main/java/org/apache/commons/math/DimensionMismatchException.java
+++ b/src/main/java/org/apache/commons/math/DimensionMismatchException.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math;
 
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Error thrown when two dimensions differ.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java b/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java
index 3ce78a0..83e43b7 100644
--- a/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java
+++ b/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math;
 
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Exception thrown when a sample contains several entries at the same abscissa.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/FunctionEvaluationException.java b/src/main/java/org/apache/commons/math/FunctionEvaluationException.java
index 8352d66..ec1de7c 100644
--- a/src/main/java/org/apache/commons/math/FunctionEvaluationException.java
+++ b/src/main/java/org/apache/commons/math/FunctionEvaluationException.java
@@ -16,10 +16,10 @@
  */
 package org.apache.commons.math;
 
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.ArrayRealVector;
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Exception thrown when an error occurs evaluating a function.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MathConfigurationException.java b/src/main/java/org/apache/commons/math/MathConfigurationException.java
index 42e8f4b..21ee603 100644
--- a/src/main/java/org/apache/commons/math/MathConfigurationException.java
+++ b/src/main/java/org/apache/commons/math/MathConfigurationException.java
@@ -18,8 +18,8 @@
 
 import java.io.Serializable;
 
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
 
 /**
  * Signals a configuration problem with any of the factory methods.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MathException.java b/src/main/java/org/apache/commons/math/MathException.java
index 4facae0..28b6a04 100644
--- a/src/main/java/org/apache/commons/math/MathException.java
+++ b/src/main/java/org/apache/commons/math/MathException.java
@@ -21,9 +21,9 @@
 import java.text.MessageFormat;
 import java.util.Locale;
 
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MathRuntimeException.java b/src/main/java/org/apache/commons/math/MathRuntimeException.java
index 5818730..b2135de 100644
--- a/src/main/java/org/apache/commons/math/MathRuntimeException.java
+++ b/src/main/java/org/apache/commons/math/MathRuntimeException.java
@@ -26,9 +26,9 @@
 import java.util.Locale;
 import java.util.NoSuchElementException;
 
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
 * Base class for commons-math unchecked exceptions.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java b/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java
index d054cb1..02e601f 100644
--- a/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java
+++ b/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java
@@ -18,9 +18,9 @@
 package org.apache.commons.math;
 
 import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Error thrown when a numerical computation exceeds its allowed
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MaxIterationsExceededException.java b/src/main/java/org/apache/commons/math/MaxIterationsExceededException.java
index a3ade62..dbc809f 100644
--- a/src/main/java/org/apache/commons/math/MaxIterationsExceededException.java
+++ b/src/main/java/org/apache/commons/math/MaxIterationsExceededException.java
@@ -18,9 +18,9 @@
 package org.apache.commons.math;
 
 import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Error thrown when a numerical computation exceeds its allowed
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java b/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java
index 679517f..8d4adf0 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/RombergIntegration.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java b/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java
index 306299c..6d88803 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/SimpsonsRule.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java b/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java
index 808143a..8842624 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/TrapezoidalRule.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java
index 0a43c06..f384da3 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java
@@ -19,7 +19,7 @@
 import org.apache.commons.math.ConvergingAlgorithmImpl;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Provide a default implementation for several generic functions.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java
index 79c81a3..1e1a8cd 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java
@@ -21,8 +21,8 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
-import org.apache.commons.math.util.Localizable;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://en.wikipedia.org/wiki/Local_regression">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java
index f3918af..d07507c 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java
@@ -19,11 +19,11 @@
 import org.apache.commons.math.DimensionMismatchException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 import org.apache.commons.math.util.MathUtils.OrderDirection;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Generates a bicubic interpolation function.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java
index 0976a97..ce77ac1 100644
--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java
+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the representation of a real polynomial function in
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java
index b33cc68..6573285 100644
--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java
+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java
@@ -19,7 +19,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the representation of a real polynomial function in
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java
index f03aec7..d32561b 100644
--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java
+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Represents a polynomial spline function.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
index 430b774..70f2b41 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/BrentsMethod.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java
index 3d54ad6..f5650ad 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
 import org.apache.commons.math.complex.Complex;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/LaguerresMethod.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java
index d9a64c5..5b81d10 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements <a href="http://mathworld.wolfram.com/NewtonsMethod.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
index dd58b1b..8bb7724 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
index 83c1fdc..5f12cb6 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Provide a default implementation for several functions useful to generic
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
index 5769966..b66a40b 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.ConvergenceException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Utility routines for {@link UnivariateRealSolver} objects.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index c1c61de..f2c6a2f 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -23,7 +23,7 @@
 
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/complex/ComplexFormat.java b/src/main/java/org/apache/commons/math/complex/ComplexFormat.java
index 514e974..b570625 100644
--- a/src/main/java/org/apache/commons/math/complex/ComplexFormat.java
+++ b/src/main/java/org/apache/commons/math/complex/ComplexFormat.java
@@ -24,8 +24,8 @@
 import java.util.Locale;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.CompositeFormat;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Formats a Complex number in cartesian format "Re(c) + Im(c)i".  'i' can
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/complex/ComplexUtils.java b/src/main/java/org/apache/commons/math/complex/ComplexUtils.java
index 160b425..3465752 100644
--- a/src/main/java/org/apache/commons/math/complex/ComplexUtils.java
+++ b/src/main/java/org/apache/commons/math/complex/ComplexUtils.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.complex;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Static implementations of common
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
index bffff6c..944997f 100644
--- a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
+++ b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
@@ -25,8 +25,8 @@
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.analysis.solvers.BrentSolver;
 import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.random.RandomDataImpl;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Base class for continuous distributions.  Default implementations are
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java b/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java
index 696351c..de7fe48 100644
--- a/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java
+++ b/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Base class for probability distributions.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java
index fdd52e2..230a121 100644
--- a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java
@@ -21,8 +21,8 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.random.RandomDataImpl;
-import org.apache.commons.math.util.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java
index 564b4c0..700c6fe 100644
--- a/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java
@@ -20,8 +20,8 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.special.Beta;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * The default implementation of {@link BinomialDistribution}.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java
index 1291764..342b3af 100644
--- a/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Default implementation of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
index 80a4f7f..ff1882d 100644
--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * The default implementation of {@link ExponentialDistribution}.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java
index 5e88cb8..0b87d11 100644
--- a/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java
@@ -20,8 +20,8 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.special.Beta;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Default implementation of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java
index 7ac64fd..38607e0 100644
--- a/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java
@@ -20,8 +20,8 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.special.Gamma;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * The default implementation of {@link GammaDistribution}.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java
index 6a484bc..4eb3c74 100644
--- a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
index e4b4e66..db3636e 100644
--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
@@ -22,8 +22,8 @@
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.special.Erf;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Default implementation of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java
index 8a71c13..0038baa 100644
--- a/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java
@@ -20,8 +20,8 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.special.Beta;
-import org.apache.commons.math.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
index cdc4f12..7c4300d 100644
--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
@@ -20,8 +20,8 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.special.Gamma;
-import org.apache.commons.math.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java
index c16186c..239597d 100644
--- a/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java
@@ -20,9 +20,9 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.special.Beta;
 import org.apache.commons.math.special.Gamma;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Default implementation of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java
index 30cedd3..d483c6c 100644
--- a/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Default implementation of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java
index 457d8d1..db78748 100644
--- a/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implementation for the {@link ZipfDistribution}.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java b/src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java
index eaefc57..167b5de 100644
--- a/src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java
+++ b/src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java
@@ -19,11 +19,11 @@
 
 import java.util.Arrays;
 
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.InvalidMatrixException;
 import org.apache.commons.math.linear.LUDecompositionImpl;
 import org.apache.commons.math.linear.MatrixUtils;
 import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Base class for implementing estimators.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/estimation/EstimationException.java b/src/main/java/org/apache/commons/math/estimation/EstimationException.java
index 012fe99..0ee1e68 100644
--- a/src/main/java/org/apache/commons/math/estimation/EstimationException.java
+++ b/src/main/java/org/apache/commons/math/estimation/EstimationException.java
@@ -18,8 +18,8 @@
 package org.apache.commons.math.estimation;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
 
 /**
  * This class represents exceptions thrown by the estimation solvers.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java b/src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java
index 078432b..3e3ca31 100644
--- a/src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java
+++ b/src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java
@@ -19,13 +19,13 @@
 
 import java.io.Serializable;
 
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.InvalidMatrixException;
 import org.apache.commons.math.linear.LUDecompositionImpl;
 import org.apache.commons.math.linear.MatrixUtils;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.RealVector;
 import org.apache.commons.math.linear.ArrayRealVector;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * This class implements a solver for estimation problems.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java b/src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java
index 44d802b..1e747f6 100644
--- a/src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java
+++ b/src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java
@@ -19,7 +19,7 @@
 import java.io.Serializable;
 import java.util.Arrays;
 
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java b/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java
index ea155e3..29dc0af 100644
--- a/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java
+++ b/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java
@@ -24,7 +24,7 @@
 import java.util.Locale;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Common part shared by both {@link FractionFormat} and {@link BigFractionFormat}.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/BigFraction.java b/src/main/java/org/apache/commons/math/fraction/BigFraction.java
index fdfd180..941d09e 100644
--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java
+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java
@@ -22,7 +22,7 @@
 
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java b/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java
index 638731b..a17f52e 100644
--- a/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java
+++ b/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java
@@ -26,7 +26,7 @@
 import java.util.Locale;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Formats a BigFraction number in proper format or improper format.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/Fraction.java b/src/main/java/org/apache/commons/math/fraction/Fraction.java
index 8c614c6..67f53e5 100644
--- a/src/main/java/org/apache/commons/math/fraction/Fraction.java
+++ b/src/main/java/org/apache/commons/math/fraction/Fraction.java
@@ -21,7 +21,7 @@
 
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java b/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java
index 8386623..1d89a66 100644
--- a/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java
+++ b/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.fraction;
 
 import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Error thrown when a double value cannot be converted to a fraction
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/FractionFormat.java b/src/main/java/org/apache/commons/math/fraction/FractionFormat.java
index c019e5e..52f0a4f 100644
--- a/src/main/java/org/apache/commons/math/fraction/FractionFormat.java
+++ b/src/main/java/org/apache/commons/math/fraction/FractionFormat.java
@@ -25,7 +25,7 @@
 
 import org.apache.commons.math.ConvergenceException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Formats a Fraction number in proper format or improper format.  The number
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java b/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java
index cbaef2c..d5ad091 100644
--- a/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java
+++ b/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java
@@ -22,7 +22,7 @@
 import java.text.ParsePosition;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Formats a BigFraction number in proper format.  The number format for each of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java b/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java
index f40192f..c834363 100644
--- a/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java
+++ b/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java
@@ -21,7 +21,7 @@
 import java.text.ParsePosition;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java b/src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java
index 0c6210e..43bdcce 100644
--- a/src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java
+++ b/src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.geometry;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /** This class represents exceptions thrown while extractiong Cardan
  * or Euler angles from a rotation.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java b/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java
index 579b186..6ec5ac4 100644
--- a/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java
+++ b/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.geometry;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.util.Localizable;
+import org.apache.commons.math.exception.Localizable;
 
 /**
  * This class represents exceptions thrown while building rotations
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/Rotation.java b/src/main/java/org/apache/commons/math/geometry/Rotation.java
index a055794..7cf362a 100644
--- a/src/main/java/org/apache/commons/math/geometry/Rotation.java
+++ b/src/main/java/org/apache/commons/math/geometry/Rotation.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * This class implements rotations in a three-dimensional space.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java
index 25e11a0..b8ea633 100644
--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java
+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java b/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java
index d4e74bc..4426c7c 100644
--- a/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java
+++ b/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java
@@ -24,8 +24,8 @@
 import java.util.Locale;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.CompositeFormat;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Formats a 3D vector in components list format "{x; y; z}".
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
index a412b4b..6f4bc7c 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Basic implementation of {@link FieldMatrix} methods regardless of the underlying storage.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
index 45df226..87c09e5 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
index 72f4aa1..7f94e7e 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
@@ -25,7 +25,7 @@
 import org.apache.commons.math.analysis.BinaryFunction;
 import org.apache.commons.math.analysis.ComposableFunction;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * This class provides default basic implementations for many methods in the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java b/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java
index 72bc466..a7571af 100644
--- a/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implementation of FieldMatrix<T> using a {@link FieldElement}[][] array to store entries.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java
index 94e10d1..3c5dc16 100644
--- a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implementation of RealMatrix using a double[][] array to store entries and
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
index 9b7dbae..ea638c6 100644
--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * This class implements the {@link FieldVector} interface with a {@link FieldElement} array.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java
index 5a5123e..23356e4 100644
--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java
+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java
@@ -21,7 +21,7 @@
 import java.util.Iterator;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java b/src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java
index 8155fca..b303acd 100644
--- a/src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java
@@ -20,7 +20,7 @@
 import java.math.BigDecimal;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java
index a2eaea3..7467acd 100644
--- a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Cache-friendly implementation of FieldMatrix using a flat arrays to store
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
index 145f883..e7601f6 100644
--- a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
@@ -21,7 +21,7 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Cache-friendly implementation of RealMatrix using a flat arrays to store
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
index bed62be..982115d 100644
--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
index a008886..d1531a8 100644
--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -19,7 +19,7 @@
 
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java
index f835c6a..3c21354 100644
--- a/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Calculates the LUP-decomposition of a square matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java b/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java
index dcd0bde..683a5e9 100644
--- a/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java
+++ b/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java
@@ -18,8 +18,8 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
 
 /**
  * Thrown when a system attempts an operation on a matrix, and
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java
index c5bdb07..afff790 100644
--- a/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Calculates the LUP-decomposition of a square matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java b/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java
index d9cb11d..c70c373 100644
--- a/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java
+++ b/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java
@@ -18,8 +18,8 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
 
 /**
  * Thrown when an operation addresses a matrix coordinate (row, col)
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java
index 8756752..bd3424e 100644
--- a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java
+++ b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java
@@ -27,9 +27,9 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.fraction.BigFraction;
 import org.apache.commons.math.fraction.Fraction;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * A collection of static methods that operate on or return matrices.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java b/src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java
index 737b50f..4696154 100644
--- a/src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java
+++ b/src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.Localizable;
+import org.apache.commons.math.exception.Localizable;
 
 /**
  * Thrown when a visitor encounters an error while processing a matrix entry.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java b/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java
index c41e877..182967e 100644
--- a/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java
+++ b/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math.linear;
 
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java b/src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
index 492f004..6b88447 100644
--- a/src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
+++ b/src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * This class represents exceptions thrown when a matrix expected to
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java b/src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java
index 8e66d36..741dd15 100644
--- a/src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java
+++ b/src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * This class represents exceptions thrown when a matrix expected to
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
index dc71e17..5416fab 100644
--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
@@ -19,7 +19,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.OpenIntToDoubleHashMap;
 import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java
index 28bf946..32d82f4 100644
--- a/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java
@@ -20,7 +20,7 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java b/src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java
index 392dee4..fa07608 100644
--- a/src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implementation of RealMatrix using a double[][] array to store entries and
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java b/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java
index 93c23aa..7a3e980 100644
--- a/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java
+++ b/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java
@@ -26,8 +26,8 @@
 import java.util.Locale;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.CompositeFormat;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Formats a vector in components list format "{v0; v1; ...; vk-1}".
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java b/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java
index 88f06f9..a7f6b6b 100644
--- a/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java
+++ b/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math.linear;
 
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
index 08d5b84..3abf3f0 100644
--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Calculates the compact Singular Value Decomposition of a matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java b/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java
index 8a087a9..22ca828 100644
--- a/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java
+++ b/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.OpenIntToFieldHashMap;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
index d989e2c..422d9c0 100644
--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
@@ -22,11 +22,11 @@
 import java.util.Collections;
 
 import org.apache.commons.math.MaxEvaluationsExceededException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.ode.events.CombinedEventsManager;
 import org.apache.commons.math.ode.events.EventHandler;
 import org.apache.commons.math.ode.events.EventState;
 import org.apache.commons.math.ode.sampling.StepHandler;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Base class managing common boilerplate for all integrators.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
index 02441db..8ce6ea0 100644
--- a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
+++ b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
@@ -22,9 +22,9 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.ode.sampling.StepHandler;
 import org.apache.commons.math.ode.sampling.StepInterpolator;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * This class stores all information provided by an ODE integrator
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/DerivativeException.java b/src/main/java/org/apache/commons/math/ode/DerivativeException.java
index 468c168..b233fb4 100644
--- a/src/main/java/org/apache/commons/math/ode/DerivativeException.java
+++ b/src/main/java/org/apache/commons/math/ode/DerivativeException.java
@@ -18,8 +18,8 @@
 package org.apache.commons.math.ode;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
 
 /**
  * This exception is made available to users to report
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/IntegratorException.java b/src/main/java/org/apache/commons/math/ode/IntegratorException.java
index 75d65a4..e489c2b 100644
--- a/src/main/java/org/apache/commons/math/ode/IntegratorException.java
+++ b/src/main/java/org/apache/commons/math/ode/IntegratorException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.ode;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.util.Localizable;
+import org.apache.commons.math.exception.Localizable;
 
 /**
  * This exception is made available to users to report
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
index 836b897..3ab0b7c 100644
--- a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
@@ -18,13 +18,13 @@
 package org.apache.commons.math.ode;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.Array2DRowRealMatrix;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;
 import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
 import org.apache.commons.math.ode.sampling.StepHandler;
 import org.apache.commons.math.ode.sampling.StepInterpolator;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * This class is the base class for multistep integrators for Ordinary
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/events/EventException.java b/src/main/java/org/apache/commons/math/ode/events/EventException.java
index 3d62ef0..4165ee6 100644
--- a/src/main/java/org/apache/commons/math/ode/events/EventException.java
+++ b/src/main/java/org/apache/commons/math/ode/events/EventException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.ode.events;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.util.Localizable;
+import org.apache.commons.math.exception.Localizable;
 
 /**
  * This exception is made available to users to report
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java b/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java
index 3e193b1..98bcf15 100644
--- a/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java
+++ b/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java
@@ -26,6 +26,7 @@
 
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxEvaluationsExceededException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;
 import org.apache.commons.math.ode.FirstOrderIntegrator;
@@ -34,7 +35,6 @@
 import org.apache.commons.math.ode.events.EventHandler;
 import org.apache.commons.math.ode.sampling.StepHandler;
 import org.apache.commons.math.ode.sampling.StepInterpolator;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /** This class enhances a first order integrator for differential equations to
  * compute also partial derivatives of the solution with respect to initial state
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java b/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
index 8ef7fc8..1dc808e 100644
--- a/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
+++ b/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
@@ -21,8 +21,8 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.MultivariateRealFunction;
 import org.apache.commons.math.analysis.MultivariateVectorialFunction;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /** This class converts {@link MultivariateVectorialFunction vectorial
  * objective functions} to {@link MultivariateRealFunction scalar objective functions}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
index ea87683..00fe80e 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
@@ -23,8 +23,8 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.random.RandomVectorGenerator;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Special implementation of the {@link DifferentiableMultivariateRealOptimizer} interface adding
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java
index 12519e4..b1e598e 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java
@@ -23,8 +23,8 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.random.RandomVectorGenerator;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Special implementation of the {@link DifferentiableMultivariateVectorialOptimizer} interface adding
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
index 1354d71..c594c77 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
@@ -23,8 +23,8 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.MultivariateRealFunction;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.random.RandomVectorGenerator;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Special implementation of the {@link MultivariateRealOptimizer} interface adding
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java
index 26fd5e0..067675f 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java
@@ -21,8 +21,8 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.random.RandomGenerator;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Special implementation of the {@link UnivariateRealOptimizer} interface adding
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/OptimizationException.java b/src/main/java/org/apache/commons/math/optimization/OptimizationException.java
index 81ca5e3..ae85c0c 100644
--- a/src/main/java/org/apache/commons/math/optimization/OptimizationException.java
+++ b/src/main/java/org/apache/commons/math/optimization/OptimizationException.java
@@ -18,8 +18,8 @@
 package org.apache.commons.math.optimization;
 
 import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.util.DummyLocalizable;
-import org.apache.commons.math.util.Localizable;
+import org.apache.commons.math.exception.DummyLocalizable;
+import org.apache.commons.math.exception.Localizable;
 
 /**
  * This class represents exceptions thrown by optimizers.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
index 14a70c1..96dfea2 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
@@ -25,13 +25,13 @@
 import org.apache.commons.math.MaxEvaluationsExceededException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.MultivariateRealFunction;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.optimization.GoalType;
 import org.apache.commons.math.optimization.MultivariateRealOptimizer;
 import org.apache.commons.math.optimization.OptimizationException;
 import org.apache.commons.math.optimization.RealConvergenceChecker;
 import org.apache.commons.math.optimization.RealPointValuePair;
 import org.apache.commons.math.optimization.SimpleScalarValueChecker;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * This class implements simplex-based direct search optimization
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java
index e4d222e..a41c323 100644
--- a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java
@@ -17,8 +17,8 @@
 
 package org.apache.commons.math.optimization.fitting;
 
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.optimization.OptimizationException;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /** This class guesses harmonic coefficients from a sample.
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java
index 039971c..94130f5 100644
--- a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java
@@ -19,9 +19,9 @@
 
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
 import org.apache.commons.math.optimization.OptimizationException;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /** This class implements a curve fitting specialized for sinusoids.
  * <p>Harmonic fitting is a very simple case of curve fitting. The
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
index f6cea19..10f7762 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
@@ -22,6 +22,7 @@
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
 import org.apache.commons.math.analysis.MultivariateMatrixFunction;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.InvalidMatrixException;
 import org.apache.commons.math.linear.LUDecompositionImpl;
 import org.apache.commons.math.linear.MatrixUtils;
@@ -31,7 +32,6 @@
 import org.apache.commons.math.optimization.VectorialConvergenceChecker;
 import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
 import org.apache.commons.math.optimization.VectorialPointValuePair;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Base class for implementing least squares optimizers.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
index df85659..dddca71 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
@@ -18,6 +18,7 @@
 package org.apache.commons.math.optimization.general;
 
 import org.apache.commons.math.FunctionEvaluationException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.BlockRealMatrix;
 import org.apache.commons.math.linear.DecompositionSolver;
 import org.apache.commons.math.linear.InvalidMatrixException;
@@ -26,7 +27,6 @@
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.optimization.OptimizationException;
 import org.apache.commons.math.optimization.VectorialPointValuePair;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Gauss-Newton least-squares solver.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
index 56cc3ce..0c4f39f 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
@@ -19,9 +19,9 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.FunctionEvaluationException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.optimization.OptimizationException;
 import org.apache.commons.math.optimization.VectorialPointValuePair;
-import org.apache.commons.math.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java
index 0c5d171..9a461c9 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java
@@ -22,10 +22,10 @@
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.analysis.solvers.BrentSolver;
 import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.optimization.GoalType;
 import org.apache.commons.math.optimization.OptimizationException;
 import org.apache.commons.math.optimization.RealPointValuePair;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Non-linear conjugate gradient optimizer.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java b/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java
index fbd5ef5..766de29 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java
@@ -17,8 +17,8 @@
 
 package org.apache.commons.math.optimization.linear;
 
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.optimization.OptimizationException;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * This class represents exceptions thrown by optimizers when no solution
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java b/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java
index 4d1659a..fd30662 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java
@@ -17,8 +17,8 @@
 
 package org.apache.commons.math.optimization.linear;
 
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.optimization.OptimizationException;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * This class represents exceptions thrown by optimizers when a solution
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
index 8c40e4f..09a0d2f 100644
--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
@@ -28,9 +28,9 @@
 import java.util.List;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.StatisticalSummary;
 import org.apache.commons.math.stat.descriptive.SummaryStatistics;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Implements <code>EmpiricalDistribution</code> interface.  This implementation
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/random/ValueServer.java b/src/main/java/org/apache/commons/math/random/ValueServer.java
index 7305060..7c343d7 100644
--- a/src/main/java/org/apache/commons/math/random/ValueServer.java
+++ b/src/main/java/org/apache/commons/math/random/ValueServer.java
@@ -23,7 +23,7 @@
 import java.net.URL;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Generates values for use in simulation applications.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java
index 461cb6a..01faf73 100644
--- a/src/main/java/org/apache/commons/math/stat/Frequency.java
+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java
@@ -23,7 +23,7 @@
 import java.util.TreeMap;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Maintains a frequency distribution.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/StatUtils.java b/src/main/java/org/apache/commons/math/stat/StatUtils.java
index b865081..18812a9 100644
--- a/src/main/java/org/apache/commons/math/stat/StatUtils.java
+++ b/src/main/java/org/apache/commons/math/stat/StatUtils.java
@@ -17,6 +17,7 @@
 package org.apache.commons.math.stat;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.UnivariateStatistic;
 import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
 import org.apache.commons.math.stat.descriptive.moment.Mean;
@@ -28,7 +29,6 @@
 import org.apache.commons.math.stat.descriptive.summary.Sum;
 import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
 import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * StatUtils provides static methods for computing statistics based on data
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java b/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java
index e83600d..e8d9fc7 100644
--- a/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java
@@ -17,11 +17,11 @@
 package org.apache.commons.math.stat.correlation;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.BlockRealMatrix;
 import org.apache.commons.math.stat.descriptive.moment.Mean;
 import org.apache.commons.math.stat.descriptive.moment.Variance;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Computes covariances for pairs of arrays or columns of a matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
index 7b56dd3..0a2859f 100644
--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
@@ -20,10 +20,10 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.distribution.TDistribution;
 import org.apache.commons.math.distribution.TDistributionImpl;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.BlockRealMatrix;
 import org.apache.commons.math.stat.regression.SimpleRegression;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Computes Pearson's product-moment correlation coefficients for pairs of arrays
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java b/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java
index fa8cdd8..9d031b4 100644
--- a/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java
@@ -18,11 +18,11 @@
 package org.apache.commons.math.stat.correlation;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.BlockRealMatrix;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.stat.ranking.NaturalRanking;
 import org.apache.commons.math.stat.ranking.RankingAlgorithm;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * <p>Spearman's rank correlation. This implementation performs a rank
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java
index 0588540..bb6eaf9 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math.stat.descriptive;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java
index 05d7c6c..29d0992 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math.stat.descriptive;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Abstract base class for all implementations of the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java
index a338d9f..a2a040a 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java
@@ -21,6 +21,7 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
 import org.apache.commons.math.stat.descriptive.moment.Kurtosis;
 import org.apache.commons.math.stat.descriptive.moment.Mean;
@@ -31,7 +32,6 @@
 import org.apache.commons.math.stat.descriptive.rank.Percentile;
 import org.apache.commons.math.stat.descriptive.summary.Sum;
 import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
-import org.apache.commons.math.util.LocalizedFormats;
 import org.apache.commons.math.util.ResizableDoubleArray;
 
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java
index 766954e..75466c3 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java
@@ -21,6 +21,7 @@
 
 import org.apache.commons.math.DimensionMismatchException;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
 import org.apache.commons.math.stat.descriptive.moment.Mean;
@@ -30,7 +31,6 @@
 import org.apache.commons.math.stat.descriptive.summary.Sum;
 import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
 import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
-import org.apache.commons.math.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java
index 2d8b5bd..002277b 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java
@@ -19,6 +19,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
 import org.apache.commons.math.stat.descriptive.moment.Mean;
 import org.apache.commons.math.stat.descriptive.moment.SecondMoment;
@@ -28,7 +29,6 @@
 import org.apache.commons.math.stat.descriptive.summary.Sum;
 import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
 import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
-import org.apache.commons.math.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java
index be1c31b..8787edd 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java
@@ -19,10 +19,10 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
 import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;
 import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Returns the <a href="http://www.xycoon.com/geometric_mean.htm">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java
index 5b48875..6a8745c 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java
@@ -19,8 +19,8 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
-import org.apache.commons.math.util.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java
index 3a219b4..6df2b45 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java
@@ -19,8 +19,8 @@
 
 import java.io.Serializable;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * <p>Computes the semivariance of a set of values with respect to a given cutoff value.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
index 1a0e437..375cc1f 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
@@ -19,9 +19,9 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.WeightedEvaluation;
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Computes the variance of the available values.  By default, the unbiased
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java
index 0659776..845141d 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java
@@ -20,8 +20,8 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Provides percentile computation.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java
index 1e38628..41c02cf 100644
--- a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java
+++ b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java
@@ -22,9 +22,9 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.distribution.FDistribution;
 import org.apache.commons.math.distribution.FDistributionImpl;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.summary.Sum;
 import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
-import org.apache.commons.math.util.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
index d8e68aa..c9650cf 100644
--- a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
+++ b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
@@ -17,11 +17,11 @@
 package org.apache.commons.math.stat.regression;
 
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.Array2DRowRealMatrix;
 import org.apache.commons.math.linear.RealVector;
 import org.apache.commons.math.linear.ArrayRealVector;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Abstract base class for implementations of MultipleLinearRegression.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java b/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java
index f941c6e..d6a71cc 100644
--- a/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java
+++ b/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.distribution.TDistribution;
 import org.apache.commons.math.distribution.TDistributionImpl;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Estimates an ordinary least squares regression model
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
index 9e9c1e6..b2a4c8b 100644
--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.complex.Complex;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://documents.wolfram.com/v5/Add-onsLinks/
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java
index 1b3ea27..68e7468 100644
--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.complex.Complex;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/FastFourierTransform.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java b/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java
index c6a2c59..71573f2 100644
--- a/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java
@@ -19,7 +19,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://www.archive.chipcenter.com/dsp/DSP000517F1.html">Fast Hadamard Transform</a> (FHT).
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java
index e713855..4da8532 100644
--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.complex.Complex;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://documents.wolfram.com/v5/Add-onsLinks/
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java
index 894f071..3527194 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/Legendre-GaussQuadrature.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java
index 0d22441..1d1373d 100644
--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java
@@ -18,9 +18,9 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.special.Gamma;
 import org.apache.commons.math.special.Beta;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Implements the Beta distribution.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java b/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java
index bbb0cb8..8d7ddf8 100644
--- a/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java
+++ b/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java
@@ -20,7 +20,7 @@
 import java.util.List;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.util.LocalizedFormats;
+import org.apache.commons.math.exception.LocalizedFormats;
 
 /**
  * Mutation operator for {@link RandomKey}s. Changes a randomly chosen element
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java b/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java
index 4f2b77b..ca16001 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.java
@@ -16,12 +16,11 @@
  */
 package org.apache.commons.math.analysis.interpolation;
 
-import org.apache.commons.math.util.LocalizedFormats;
-import org.apache.commons.math.util.MathUtils;
+import org.apache.commons.math.analysis.TrivariateRealFunction;
+import org.apache.commons.math.exception.DimensionMismatchException;
 import org.apache.commons.math.exception.NoDataException;
 import org.apache.commons.math.exception.OutOfRangeException;
-import org.apache.commons.math.exception.DimensionMismatchException;
-import org.apache.commons.math.analysis.TrivariateRealFunction;
+import org.apache.commons.math.util.MathUtils;
 
 /**
  * Function that implements the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java
index 10c85e1..e0833d1 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java
@@ -17,12 +17,11 @@
 package org.apache.commons.math.analysis.interpolation;
 
 import org.apache.commons.math.DimensionMismatchException;
-import org.apache.commons.math.exception.NoDataException;
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.util.LocalizedFormats;
-import org.apache.commons.math.util.MathUtils;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
+import org.apache.commons.math.exception.NoDataException;
+import org.apache.commons.math.util.MathUtils;
 
 /**
  * Generates a bicubic interpolating function.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java
index 85e0cb3..d3f0c12 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java
@@ -17,11 +17,11 @@
 package org.apache.commons.math.analysis.interpolation;
 
 import org.apache.commons.math.exception.DimensionMismatchException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
 import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
 import org.apache.commons.math.util.MathUtils;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Implements a linear function for interpolation of real univariate functions.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java
index 723d728..35bddff 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java
@@ -17,11 +17,11 @@
 package org.apache.commons.math.analysis.interpolation;
 
 import org.apache.commons.math.exception.DimensionMismatchException;
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
 import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
 import org.apache.commons.math.util.MathUtils;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Computes a natural (also known as "free", "unclamped") cubic spline interpolation for the data set.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/NotPositiveException.java b/src/main/java/org/apache/commons/math/exception/NotPositiveException.java
index 20998b2..55b56e8 100644
--- a/src/main/java/org/apache/commons/math/exception/NotPositiveException.java
+++ b/src/main/java/org/apache/commons/math/exception/NotPositiveException.java
@@ -16,7 +16,6 @@
  */
 package org.apache.commons.math.exception;
 
-import org.apache.commons.math.util.Localizable;
 
 /**
  * Exception to be thrown when the argument is negative.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java b/src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java
index 3a3e23d..70a6542 100644
--- a/src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java
+++ b/src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java
@@ -16,7 +16,6 @@
  */
 package org.apache.commons.math.exception;
 
-import org.apache.commons.math.util.Localizable;
 
 /**
  * Exception to be thrown when the argument is negative.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateOptimizer.java
similarity index 93%
rename from src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
rename to src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateOptimizer.java
index 17d6c5e..06224ac 100644
--- a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateOptimizer.java
@@ -26,11 +26,11 @@
  * Optimization algorithms find the input point set that either {@link GoalType
  * maximize or minimize} an objective function.
  *
- * @see MultivariateRealOptimizer
+ * @see MultivariateOptimizer
  * @see DifferentiableMultivariateVectorOptimizer
  *
  * @version $Id$
  * @since 2.0
  */
-public interface DifferentiableMultivariateRealOptimizer
+public interface DifferentiableMultivariateOptimizer
     extends BaseMultivariateOptimizer<DifferentiableMultivariateFunction> {}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultivariateOptimizer.java
similarity index 93%
rename from src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java
rename to src/main/java/org/apache/commons/math/optimization/MultivariateOptimizer.java
index 4980e6f..bbf1600 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultivariateOptimizer.java
@@ -25,10 +25,10 @@
  * <p>Optimization algorithms find the input point set that either {@link GoalType
  * maximize or minimize} an objective function.</p>
  *
- * @see DifferentiableMultivariateRealOptimizer
+ * @see DifferentiableMultivariateOptimizer
  * @see DifferentiableMultivariateVectorOptimizer
  * @version $Id$
  * @since 2.0
  */
-public interface MultivariateRealOptimizer
+public interface MultivariateOptimizer
     extends BaseMultivariateOptimizer<MultivariateFunction> {}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java
index d312243..c6eeb53 100644
--- a/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java
@@ -260,5 +260,6 @@
      *
      * @return the optimum.
      */
-    protected abstract double doOptimize();
+    protected abstract double doOptimize()
+        throws MaxIterationsExceededException, FunctionEvaluationException;
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java
index 1b3a766..10eedcb 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.java
@@ -16,8 +16,8 @@
  */
 package org.apache.commons.math.analysis.interpolation;
 
-import org.apache.commons.math.DimensionMismatchException;
 import org.apache.commons.math.analysis.BivariateRealFunction;
+import org.apache.commons.math.exception.DimensionMismatchException;
 import org.apache.commons.math.exception.NoDataException;
 import org.apache.commons.math.exception.OutOfRangeException;
 import org.apache.commons.math.util.MathUtils;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java b/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java
index 8cff7d0..bc6bc62 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MicrosphereInterpolatingFunction.java
@@ -21,7 +21,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.math.analysis.MultivariateRealFunction;
+import org.apache.commons.math.analysis.MultivariateFunction;
 import org.apache.commons.math.exception.DimensionMismatchException;
 import org.apache.commons.math.exception.NoDataException;
 import org.apache.commons.math.exception.NullArgumentException;
@@ -37,7 +37,7 @@
  * @version $Id$
  */
 public class MicrosphereInterpolatingFunction
-    implements MultivariateRealFunction {
+    implements MultivariateFunction {
     /**
      * Space dimension.
      */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java
index e56bf23..7349ef1 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java
@@ -19,7 +19,7 @@
 
 import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;
 import org.apache.commons.math.analysis.MultivariateVectorFunction;
-import org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer;
+import org.apache.commons.math.optimization.DifferentiableMultivariateOptimizer;
 import org.apache.commons.math.optimization.GoalType;
 import org.apache.commons.math.optimization.ConvergenceChecker;
 import org.apache.commons.math.optimization.RealPointValuePair;
@@ -35,7 +35,7 @@
  */
 public abstract class AbstractScalarDifferentiableOptimizer
     extends BaseAbstractMultivariateOptimizer<DifferentiableMultivariateFunction>
-    implements DifferentiableMultivariateRealOptimizer {
+    implements DifferentiableMultivariateOptimizer {
     /**
      * Objective function gradient.
      */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java
index 4816124..708d600 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractScalarDifferentiableOptimizer.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.optimization.general;
 
 import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;
-import org.apache.commons.math.analysis.MultivariateVectorialFunction;
+import org.apache.commons.math.analysis.MultivariateVectorFunction;
 import org.apache.commons.math.optimization.DifferentiableMultivariateRealOptimizer;
 import org.apache.commons.math.optimization.GoalType;
 import org.apache.commons.math.optimization.ConvergenceChecker;
@@ -39,7 +39,7 @@
     /**
      * Objective function gradient.
      */
-    private MultivariateVectorialFunction gradient;
+    private MultivariateVectorFunction gradient;
 
     /**
      * Simple constructor with default settings.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java
index daf2964..524eba2 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractScalarOptimizer.java
@@ -77,11 +77,6 @@
     }
 
     /** {@inheritDoc} */
-    public void setConvergenceChecker(ConvergenceChecker<RealPointValuePair> convergenceChecker) {
-        this.checker = convergenceChecker;
-    }
-
-    /** {@inheritDoc} */
     public ConvergenceChecker<RealPointValuePair> getConvergenceChecker() {
         return checker;
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/genetics/ListPopulation.java b/src/main/java/org/apache/commons/math/genetics/ListPopulation.java
index 3799e47..f2c6d62 100644
--- a/src/main/java/org/apache/commons/math/genetics/ListPopulation.java
+++ b/src/main/java/org/apache/commons/math/genetics/ListPopulation.java
@@ -20,9 +20,9 @@
 import java.util.Iterator;
 import java.util.List;
 
+import org.apache.commons.math.exception.LocalizedFormats;
 import org.apache.commons.math.exception.NotPositiveException;
 import org.apache.commons.math.exception.NumberIsTooLargeException;
-import org.apache.commons.math.util.LocalizedFormats;
 
 /**
  * Population of chromosomes represented by a {@link List}.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ConvergenceException.java b/src/main/java/org/apache/commons/math/ConvergenceException.java
index ed13ee5..6eb9809 100644
--- a/src/main/java/org/apache/commons/math/ConvergenceException.java
+++ b/src/main/java/org/apache/commons/math/ConvergenceException.java
@@ -16,9 +16,9 @@
  */
 package org.apache.commons.math;
 
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Error thrown when a numerical computation can not be performed because the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/DimensionMismatchException.java b/src/main/java/org/apache/commons/math/DimensionMismatchException.java
index ae30bff..cecb088 100644
--- a/src/main/java/org/apache/commons/math/DimensionMismatchException.java
+++ b/src/main/java/org/apache/commons/math/DimensionMismatchException.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Error thrown when two dimensions differ.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java b/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java
index 83e43b7..00b5f77 100644
--- a/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java
+++ b/src/main/java/org/apache/commons/math/DuplicateSampleAbscissaException.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Exception thrown when a sample contains several entries at the same abscissa.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/FunctionEvaluationException.java b/src/main/java/org/apache/commons/math/FunctionEvaluationException.java
index ec1de7c..2c8b062 100644
--- a/src/main/java/org/apache/commons/math/FunctionEvaluationException.java
+++ b/src/main/java/org/apache/commons/math/FunctionEvaluationException.java
@@ -16,9 +16,9 @@
  */
 package org.apache.commons.math;
 
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.ArrayRealVector;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MathConfigurationException.java b/src/main/java/org/apache/commons/math/MathConfigurationException.java
index 21ee603..e413e57 100644
--- a/src/main/java/org/apache/commons/math/MathConfigurationException.java
+++ b/src/main/java/org/apache/commons/math/MathConfigurationException.java
@@ -18,8 +18,8 @@
 
 import java.io.Serializable;
 
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
 
 /**
  * Signals a configuration problem with any of the factory methods.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MathException.java b/src/main/java/org/apache/commons/math/MathException.java
index 28b6a04..ad9fc2b 100644
--- a/src/main/java/org/apache/commons/math/MathException.java
+++ b/src/main/java/org/apache/commons/math/MathException.java
@@ -21,9 +21,9 @@
 import java.text.MessageFormat;
 import java.util.Locale;
 
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MathRuntimeException.java b/src/main/java/org/apache/commons/math/MathRuntimeException.java
index 1afb888..8cf2f04 100644
--- a/src/main/java/org/apache/commons/math/MathRuntimeException.java
+++ b/src/main/java/org/apache/commons/math/MathRuntimeException.java
@@ -26,9 +26,9 @@
 import java.util.Locale;
 import java.util.NoSuchElementException;
 
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
 * Base class for commons-math unchecked exceptions.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java b/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java
index 02e601f..0b1eb7e 100644
--- a/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java
+++ b/src/main/java/org/apache/commons/math/MaxEvaluationsExceededException.java
@@ -18,9 +18,9 @@
 package org.apache.commons.math;
 
 import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Error thrown when a numerical computation exceeds its allowed
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/MaxIterationsExceededException.java b/src/main/java/org/apache/commons/math/MaxIterationsExceededException.java
index dbc809f..be7290d 100644
--- a/src/main/java/org/apache/commons/math/MaxIterationsExceededException.java
+++ b/src/main/java/org/apache/commons/math/MaxIterationsExceededException.java
@@ -18,9 +18,9 @@
 package org.apache.commons.math;
 
 import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Error thrown when a numerical computation exceeds its allowed
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java
index 3527194..22e9857 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/Legendre-GaussQuadrature.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java b/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java
index 8d4adf0..94bda3c 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/RombergIntegrator.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/RombergIntegration.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java b/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java
index 6d88803..d802d44 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/SimpsonIntegrator.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/SimpsonsRule.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java b/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java
index 8842624..567d3e3 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/TrapezoidIntegrator.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/TrapezoidalRule.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java
index 2280e59..a089595 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java
@@ -19,7 +19,7 @@
 import org.apache.commons.math.ConvergingAlgorithmImpl;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java
index d3f0c12..b8c58b2 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LinearInterpolator.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math.analysis.interpolation;
 
 import org.apache.commons.math.exception.DimensionMismatchException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
 import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java
index 1e1a8cd..9151f5a 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java
@@ -21,8 +21,8 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
-import org.apache.commons.math.exception.Localizable;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.Localizable;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://en.wikipedia.org/wiki/Local_regression">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java
index d07507c..b658fdb 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.util.MathUtils.OrderDirection;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Generates a bicubic interpolation function.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java
index 35bddff..54d27f8 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/SplineInterpolator.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math.analysis.interpolation;
 
 import org.apache.commons.math.exception.DimensionMismatchException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
 import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java
index bd57a3b..c7f2415 100644
--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java
+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java
@@ -19,7 +19,7 @@
 import java.io.Serializable;
 import java.util.Arrays;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NoDataException;
 import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java
index ce77ac1..1f983a1 100644
--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java
+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the representation of a real polynomial function in
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java
index 6573285..d659c7d 100644
--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java
+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.java
@@ -19,7 +19,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the representation of a real polynomial function in
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java
index d32561b..199665c 100644
--- a/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java
+++ b/src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialSplineFunction.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Represents a polynomial spline function.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
index 70f2b41..71ac691 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/BrentsMethod.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java
index f5650ad..af1a3a0 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/LaguerreSolver.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
 import org.apache.commons.math.complex.Complex;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/LaguerresMethod.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java
index 5b81d10..34c1ea3 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/NewtonSolver.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements <a href="http://mathworld.wolfram.com/NewtonsMethod.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
index 8bb7724..60fb451 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
index 59d62b7..ac63c94 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
index 1ee435a..3f2fb04 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.ConvergenceException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index f2c6a2f..a8f5f5a 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -23,7 +23,7 @@
 
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/complex/ComplexFormat.java b/src/main/java/org/apache/commons/math/complex/ComplexFormat.java
index 8711896..e4b5a2c 100644
--- a/src/main/java/org/apache/commons/math/complex/ComplexFormat.java
+++ b/src/main/java/org/apache/commons/math/complex/ComplexFormat.java
@@ -24,7 +24,7 @@
 import java.util.Locale;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.CompositeFormat;
 import org.apache.commons.math.exception.NullArgumentException;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/complex/ComplexUtils.java b/src/main/java/org/apache/commons/math/complex/ComplexUtils.java
index 3465752..dc9a76e 100644
--- a/src/main/java/org/apache/commons/math/complex/ComplexUtils.java
+++ b/src/main/java/org/apache/commons/math/complex/ComplexUtils.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.complex;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Static implementations of common
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
index 944997f..ef6aa1d 100644
--- a/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
+++ b/src/main/java/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
@@ -25,7 +25,7 @@
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.analysis.solvers.BrentSolver;
 import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.random.RandomDataImpl;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java b/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java
index de7fe48..8c22e4f 100644
--- a/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java
+++ b/src/main/java/org/apache/commons/math/distribution/AbstractDistribution.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Base class for probability distributions.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java
index 230a121..0fd0e85 100644
--- a/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math/distribution/AbstractIntegerDistribution.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.random.RandomDataImpl;
 
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java
index 1d1373d..1af99b5 100644
--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java
@@ -18,7 +18,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Gamma;
 import org.apache.commons.math.special.Beta;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java
index 700c6fe..6de652d 100644
--- a/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/BinomialDistributionImpl.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Beta;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java
index 342b3af..f451bbc 100644
--- a/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/CauchyDistributionImpl.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Default implementation of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
index ff1882d..486e8b9 100644
--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * The default implementation of {@link ExponentialDistribution}.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java
index 0b87d11..3280d3f 100644
--- a/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/FDistributionImpl.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Beta;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java
index 38607e0..186821a 100644
--- a/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/GammaDistributionImpl.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Gamma;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java
index 4eb3c74..eb6817c 100644
--- a/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/HypergeometricDistributionImpl.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
index db3636e..6f5bd3f 100644
--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Erf;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java
index 0038baa..bb619d4 100644
--- a/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/PascalDistributionImpl.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Beta;
 import org.apache.commons.math.util.MathUtils;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
index 7c4300d..9110adc 100644
--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Gamma;
 import org.apache.commons.math.util.MathUtils;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java
index 239597d..a0b03b9 100644
--- a/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/TDistributionImpl.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Beta;
 import org.apache.commons.math.special.Gamma;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java
index d483c6c..b849186 100644
--- a/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/WeibullDistributionImpl.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Default implementation of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java
index db78748..2f23038 100644
--- a/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/ZipfDistributionImpl.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implementation for the {@link ZipfDistribution}.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java b/src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java
index 167b5de..9f9b479 100644
--- a/src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java
+++ b/src/main/java/org/apache/commons/math/estimation/AbstractEstimator.java
@@ -19,7 +19,7 @@
 
 import java.util.Arrays;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.InvalidMatrixException;
 import org.apache.commons.math.linear.LUDecompositionImpl;
 import org.apache.commons.math.linear.MatrixUtils;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/estimation/EstimationException.java b/src/main/java/org/apache/commons/math/estimation/EstimationException.java
index 0ee1e68..bb9f148 100644
--- a/src/main/java/org/apache/commons/math/estimation/EstimationException.java
+++ b/src/main/java/org/apache/commons/math/estimation/EstimationException.java
@@ -18,8 +18,8 @@
 package org.apache.commons.math.estimation;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
 
 /**
  * This class represents exceptions thrown by the estimation solvers.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java b/src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java
index 3e3ca31..eae214f 100644
--- a/src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java
+++ b/src/main/java/org/apache/commons/math/estimation/GaussNewtonEstimator.java
@@ -19,7 +19,7 @@
 
 import java.io.Serializable;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.InvalidMatrixException;
 import org.apache.commons.math.linear.LUDecompositionImpl;
 import org.apache.commons.math.linear.MatrixUtils;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java b/src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java
index 1e747f6..4318d93 100644
--- a/src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java
+++ b/src/main/java/org/apache/commons/math/estimation/LevenbergMarquardtEstimator.java
@@ -19,7 +19,7 @@
 import java.io.Serializable;
 import java.util.Arrays;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/DummyLocalizable.java b/src/main/java/org/apache/commons/math/exception/util/DummyLocalizable.java
similarity index 96%
rename from src/main/java/org/apache/commons/math/exception/DummyLocalizable.java
rename to src/main/java/org/apache/commons/math/exception/util/DummyLocalizable.java
index b51e9d4..3e8a06d 100644
--- a/src/main/java/org/apache/commons/math/exception/DummyLocalizable.java
+++ b/src/main/java/org/apache/commons/math/exception/util/DummyLocalizable.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.commons.math.exception;
+package org.apache.commons.math.exception.util;
 
 import java.util.Locale;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/Localizable.java b/src/main/java/org/apache/commons/math/exception/util/Localizable.java
similarity index 96%
rename from src/main/java/org/apache/commons/math/exception/Localizable.java
rename to src/main/java/org/apache/commons/math/exception/util/Localizable.java
index 8d754fa..1e4b6ae 100644
--- a/src/main/java/org/apache/commons/math/exception/Localizable.java
+++ b/src/main/java/org/apache/commons/math/exception/util/Localizable.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.commons.math.exception;
+package org.apache.commons.math.exception.util;
 
 import java.io.Serializable;
 import java.util.Locale;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/LocalizedFormats.java b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java
similarity index 99%
rename from src/main/java/org/apache/commons/math/exception/LocalizedFormats.java
rename to src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java
index 03fc6f8..f31f97b 100644
--- a/src/main/java/org/apache/commons/math/exception/LocalizedFormats.java
+++ b/src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.commons.math.exception;
+package org.apache.commons.math.exception.util;
 
 import java.util.Locale;
 import java.util.MissingResourceException;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java b/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java
index 5390c3b..9dbd124 100644
--- a/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java
+++ b/src/main/java/org/apache/commons/math/fraction/AbstractFormat.java
@@ -24,7 +24,7 @@
 import java.util.Locale;
 
 import org.apache.commons.math.exception.NullArgumentException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Common part shared by both {@link FractionFormat} and {@link BigFractionFormat}.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/BigFraction.java b/src/main/java/org/apache/commons/math/fraction/BigFraction.java
index 76042ac..b598892 100644
--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java
+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java
@@ -22,7 +22,7 @@
 
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 import org.apache.commons.math.util.MathUtils;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java b/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java
index a17f52e..7d11419 100644
--- a/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java
+++ b/src/main/java/org/apache/commons/math/fraction/BigFractionFormat.java
@@ -26,7 +26,7 @@
 import java.util.Locale;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Formats a BigFraction number in proper format or improper format.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/Fraction.java b/src/main/java/org/apache/commons/math/fraction/Fraction.java
index 0052c27..a0c3f89 100644
--- a/src/main/java/org/apache/commons/math/fraction/Fraction.java
+++ b/src/main/java/org/apache/commons/math/fraction/Fraction.java
@@ -21,7 +21,7 @@
 
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 import org.apache.commons.math.util.MathUtils;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java b/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java
index 1d89a66..1f1bf27 100644
--- a/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java
+++ b/src/main/java/org/apache/commons/math/fraction/FractionConversionException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.fraction;
 
 import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Error thrown when a double value cannot be converted to a fraction
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/FractionFormat.java b/src/main/java/org/apache/commons/math/fraction/FractionFormat.java
index 52f0a4f..5554fd3 100644
--- a/src/main/java/org/apache/commons/math/fraction/FractionFormat.java
+++ b/src/main/java/org/apache/commons/math/fraction/FractionFormat.java
@@ -25,7 +25,7 @@
 
 import org.apache.commons.math.ConvergenceException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Formats a Fraction number in proper format or improper format.  The number
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java b/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java
index bd12a5a..552ad98 100644
--- a/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java
+++ b/src/main/java/org/apache/commons/math/fraction/ProperBigFractionFormat.java
@@ -21,7 +21,7 @@
 import java.text.NumberFormat;
 import java.text.ParsePosition;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java b/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java
index a8dd6df..d36c0cd 100644
--- a/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java
+++ b/src/main/java/org/apache/commons/math/fraction/ProperFractionFormat.java
@@ -20,7 +20,7 @@
 import java.text.NumberFormat;
 import java.text.ParsePosition;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 import org.apache.commons.math.util.MathUtils;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/genetics/ListPopulation.java b/src/main/java/org/apache/commons/math/genetics/ListPopulation.java
index f2c6d62..d3cab6e 100644
--- a/src/main/java/org/apache/commons/math/genetics/ListPopulation.java
+++ b/src/main/java/org/apache/commons/math/genetics/ListPopulation.java
@@ -20,7 +20,7 @@
 import java.util.Iterator;
 import java.util.List;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NotPositiveException;
 import org.apache.commons.math.exception.NumberIsTooLargeException;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java b/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java
index 8d7ddf8..5435b5f 100644
--- a/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java
+++ b/src/main/java/org/apache/commons/math/genetics/RandomKeyMutation.java
@@ -20,7 +20,7 @@
 import java.util.List;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Mutation operator for {@link RandomKey}s. Changes a randomly chosen element
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java b/src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java
index 43bdcce..1125687 100644
--- a/src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java
+++ b/src/main/java/org/apache/commons/math/geometry/CardanEulerSingularityException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.geometry;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /** This class represents exceptions thrown while extractiong Cardan
  * or Euler angles from a rotation.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java b/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java
index 6ec5ac4..9ef9cb3 100644
--- a/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java
+++ b/src/main/java/org/apache/commons/math/geometry/NotARotationMatrixException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.geometry;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.util.Localizable;
 
 /**
  * This class represents exceptions thrown while building rotations
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/Rotation.java b/src/main/java/org/apache/commons/math/geometry/Rotation.java
index 7cf362a..4163ade 100644
--- a/src/main/java/org/apache/commons/math/geometry/Rotation.java
+++ b/src/main/java/org/apache/commons/math/geometry/Rotation.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * This class implements rotations in a three-dimensional space.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java
index b8ea633..d0cfd5a 100644
--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java
+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java b/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java
index 4426c7c..f14b3a7 100644
--- a/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java
+++ b/src/main/java/org/apache/commons/math/geometry/Vector3DFormat.java
@@ -24,7 +24,7 @@
 import java.util.Locale;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.CompositeFormat;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
index 6f4bc7c..eff3f4d 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Basic implementation of {@link FieldMatrix} methods regardless of the underlying storage.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
index 87c09e5..5781d49 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
index f2cd89b..9185d26 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
@@ -26,7 +26,7 @@
 import org.apache.commons.math.analysis.BinaryFunction;
 import org.apache.commons.math.analysis.ComposableFunction;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * This class provides default basic implementations for many methods in the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java b/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java
index a7571af..641da9a 100644
--- a/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowFieldMatrix.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implementation of FieldMatrix<T> using a {@link FieldElement}[][] array to store entries.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java
index 3c5dc16..4ce49e8 100644
--- a/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/Array2DRowRealMatrix.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implementation of RealMatrix using a double[][] array to store entries and
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
index ea638c6..9e6ff10 100644
--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * This class implements the {@link FieldVector} interface with a {@link FieldElement} array.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java
index 23356e4..cce9767 100644
--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java
+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java
@@ -21,7 +21,7 @@
 import java.util.Iterator;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java b/src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java
index b303acd..6124d2a 100644
--- a/src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/BigMatrixImpl.java
@@ -20,7 +20,7 @@
 import java.math.BigDecimal;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implementation of {@link BigMatrix} using a BigDecimal[][] array to store entries
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java
index 7467acd..63d52c6 100644
--- a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Cache-friendly implementation of FieldMatrix using a flat arrays to store
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
index e7601f6..b2de249 100644
--- a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
@@ -21,7 +21,7 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Cache-friendly implementation of RealMatrix using a flat arrays to store
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
index 982115d..8af8726 100644
--- a/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
index 468dca7..dfe40c9 100644
--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -19,7 +19,7 @@
 
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxIterationsExceededException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java
index 3c21354..9c4bc91 100644
--- a/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Calculates the LUP-decomposition of a square matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java b/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java
index 683a5e9..525a13c 100644
--- a/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java
+++ b/src/main/java/org/apache/commons/math/linear/InvalidMatrixException.java
@@ -18,8 +18,8 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
 
 /**
  * Thrown when a system attempts an operation on a matrix, and
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java
index afff790..f927683 100644
--- a/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Calculates the LUP-decomposition of a square matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java b/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java
index c70c373..1fca8d8 100644
--- a/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java
+++ b/src/main/java/org/apache/commons/math/linear/MatrixIndexException.java
@@ -18,8 +18,8 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
 
 /**
  * Thrown when an operation addresses a matrix coordinate (row, col)
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java
index bd3424e..7cf7466 100644
--- a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java
+++ b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java
@@ -27,7 +27,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.fraction.BigFraction;
 import org.apache.commons.math.fraction.Fraction;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java b/src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java
index 4696154..6d216b8 100644
--- a/src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java
+++ b/src/main/java/org/apache/commons/math/linear/MatrixVisitorException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.util.Localizable;
 
 /**
  * Thrown when a visitor encounters an error while processing a matrix entry.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java b/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java
index 182967e..bbe8fc5 100644
--- a/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java
+++ b/src/main/java/org/apache/commons/math/linear/NonSquareMatrixException.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math.linear;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java b/src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
index 6b88447..fdc2295 100644
--- a/src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
+++ b/src/main/java/org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * This class represents exceptions thrown when a matrix expected to
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java b/src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java
index 741dd15..ee58383 100644
--- a/src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java
+++ b/src/main/java/org/apache/commons/math/linear/NotSymmetricMatrixException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * This class represents exceptions thrown when a matrix expected to
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
index 5416fab..c87446f 100644
--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
@@ -19,7 +19,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.OpenIntToDoubleHashMap;
 import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java
index 32d82f4..b45939b 100644
--- a/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java
@@ -20,7 +20,7 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java b/src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java
index fa07608..b6e7108 100644
--- a/src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixImpl.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implementation of RealMatrix using a double[][] array to store entries and
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java b/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java
index 7a3e980..030b8b3 100644
--- a/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java
+++ b/src/main/java/org/apache/commons/math/linear/RealVectorFormat.java
@@ -26,7 +26,7 @@
 import java.util.Locale;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.CompositeFormat;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java b/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java
index a7f6b6b..b7627e5 100644
--- a/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java
+++ b/src/main/java/org/apache/commons/math/linear/SingularMatrixException.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math.linear;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
index 597f6c4..2576708 100644
--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Calculates the compact Singular Value Decomposition of a matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java b/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java
index 22ca828..ee5a98a 100644
--- a/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java
+++ b/src/main/java/org/apache/commons/math/linear/SparseFieldVector.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.OpenIntToFieldHashMap;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
index 422d9c0..6bf50c4 100644
--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java
@@ -22,7 +22,7 @@
 import java.util.Collections;
 
 import org.apache.commons.math.MaxEvaluationsExceededException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.ode.events.CombinedEventsManager;
 import org.apache.commons.math.ode.events.EventHandler;
 import org.apache.commons.math.ode.events.EventState;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
index 8ce6ea0..a02859c 100644
--- a/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
+++ b/src/main/java/org/apache/commons/math/ode/ContinuousOutputModel.java
@@ -22,7 +22,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.ode.sampling.StepHandler;
 import org.apache.commons.math.ode.sampling.StepInterpolator;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/DerivativeException.java b/src/main/java/org/apache/commons/math/ode/DerivativeException.java
index b233fb4..80d94a3 100644
--- a/src/main/java/org/apache/commons/math/ode/DerivativeException.java
+++ b/src/main/java/org/apache/commons/math/ode/DerivativeException.java
@@ -18,8 +18,8 @@
 package org.apache.commons.math.ode;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
 
 /**
  * This exception is made available to users to report
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/IntegratorException.java b/src/main/java/org/apache/commons/math/ode/IntegratorException.java
index e489c2b..d89239b 100644
--- a/src/main/java/org/apache/commons/math/ode/IntegratorException.java
+++ b/src/main/java/org/apache/commons/math/ode/IntegratorException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.ode;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.util.Localizable;
 
 /**
  * This exception is made available to users to report
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
index 3ab0b7c..0008c11 100644
--- a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.ode;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.Array2DRowRealMatrix;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/events/EventException.java b/src/main/java/org/apache/commons/math/ode/events/EventException.java
index 4165ee6..8175ad1 100644
--- a/src/main/java/org/apache/commons/math/ode/events/EventException.java
+++ b/src/main/java/org/apache/commons/math/ode/events/EventException.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.ode.events;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.util.Localizable;
 
 /**
  * This exception is made available to users to report
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java b/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java
index 98bcf15..7cc056e 100644
--- a/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java
+++ b/src/main/java/org/apache/commons/math/ode/jacobians/FirstOrderIntegratorWithJacobians.java
@@ -26,7 +26,7 @@
 
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.MaxEvaluationsExceededException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;
 import org.apache.commons.math.ode.FirstOrderIntegrator;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java
index 647f3ca..38cbc61 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math.ode.nonstiff;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.ode.AbstractIntegrator;
 import org.apache.commons.math.ode.DerivativeException;
 import org.apache.commons.math.ode.ExtendedFirstOrderDifferentialEquations;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java b/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
index 1dc808e..d11a69a 100644
--- a/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
+++ b/src/main/java/org/apache/commons/math/optimization/LeastSquaresConverter.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.MultivariateRealFunction;
 import org.apache.commons.math.analysis.MultivariateVectorialFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.RealMatrix;
 
 /** This class converts {@link MultivariateVectorialFunction vectorial
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
index 00fe80e..f523eec 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateRealOptimizer.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.random.RandomVectorGenerator;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java
index b1e598e..a42e10c 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.random.RandomVectorGenerator;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
index c594c77..6847f55 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.MultivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.random.RandomVectorGenerator;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java
index 067675f..26ffbca 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.random.RandomGenerator;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/OptimizationException.java b/src/main/java/org/apache/commons/math/optimization/OptimizationException.java
index ae85c0c..f6e4717 100644
--- a/src/main/java/org/apache/commons/math/optimization/OptimizationException.java
+++ b/src/main/java/org/apache/commons/math/optimization/OptimizationException.java
@@ -18,8 +18,8 @@
 package org.apache.commons.math.optimization;
 
 import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.exception.DummyLocalizable;
-import org.apache.commons.math.exception.Localizable;
+import org.apache.commons.math.exception.util.DummyLocalizable;
+import org.apache.commons.math.exception.util.Localizable;
 
 /**
  * This class represents exceptions thrown by optimizers.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
index 96dfea2..8cf6891 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/DirectSearchOptimizer.java
@@ -25,7 +25,7 @@
 import org.apache.commons.math.MaxEvaluationsExceededException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.MultivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.optimization.GoalType;
 import org.apache.commons.math.optimization.MultivariateRealOptimizer;
 import org.apache.commons.math.optimization.OptimizationException;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java
index 10d040c..9fcd60c 100644
--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianDerivativeFunction.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.exception.DimensionMismatchException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.ZeroException;
 import org.apache.commons.math.exception.NullArgumentException;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java
index ab51a10..dee4097 100644
--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java
@@ -24,7 +24,7 @@
 import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.exception.DimensionMismatchException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.ZeroException;
 import org.apache.commons.math.exception.NullArgumentException;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianParametersGuesser.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianParametersGuesser.java
index 7f98343..fefbecb 100644
--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianParametersGuesser.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianParametersGuesser.java
@@ -20,7 +20,7 @@
 import java.util.Arrays;
 import java.util.Comparator;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.exception.OutOfRangeException;
 import org.apache.commons.math.exception.ZeroException;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java
index a41c323..74a036d 100644
--- a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicCoefficientsGuesser.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math.optimization.fitting;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.optimization.OptimizationException;
 
 /** This class guesses harmonic coefficients from a sample.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java
index 94130f5..4047252 100644
--- a/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java
@@ -19,7 +19,7 @@
 
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
 import org.apache.commons.math.optimization.OptimizationException;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java b/src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java
index 3a28ce5..ed17839 100644
--- a/src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/ParametricGaussianFunction.java
@@ -21,7 +21,7 @@
 
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.exception.DimensionMismatchException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.ZeroException;
 import org.apache.commons.math.exception.NullArgumentException;
 import org.apache.commons.math.optimization.fitting.ParametricRealFunction;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
index 5a60da8..152c30c 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
 import org.apache.commons.math.analysis.MultivariateMatrixFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.InvalidMatrixException;
 import org.apache.commons.math.linear.LUDecompositionImpl;
 import org.apache.commons.math.linear.MatrixUtils;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
index dddca71..ee8ef90 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.optimization.general;
 
 import org.apache.commons.math.FunctionEvaluationException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.BlockRealMatrix;
 import org.apache.commons.math.linear.DecompositionSolver;
 import org.apache.commons.math.linear.InvalidMatrixException;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
index 0c4f39f..4cf4ee0 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java
@@ -19,7 +19,7 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.FunctionEvaluationException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.optimization.OptimizationException;
 import org.apache.commons.math.optimization.VectorialPointValuePair;
 import org.apache.commons.math.util.MathUtils;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java
index 9a461c9..2920bb3 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.analysis.solvers.BrentSolver;
 import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.optimization.GoalType;
 import org.apache.commons.math.optimization.OptimizationException;
 import org.apache.commons.math.optimization.RealPointValuePair;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java b/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java
index 766de29..59777cd 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/NoFeasibleSolutionException.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math.optimization.linear;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.optimization.OptimizationException;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java b/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java
index fd30662..85482ce 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/UnboundedSolutionException.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math.optimization.linear;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.optimization.OptimizationException;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
index 09a0d2f..3eb402e 100644
--- a/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/random/EmpiricalDistributionImpl.java
@@ -28,7 +28,7 @@
 import java.util.List;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.StatisticalSummary;
 import org.apache.commons.math.stat.descriptive.SummaryStatistics;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java
index 15f5389..60cfee3 100644
--- a/src/main/java/org/apache/commons/math/random/RandomDataImpl.java
+++ b/src/main/java/org/apache/commons/math/random/RandomDataImpl.java
@@ -26,7 +26,7 @@
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.exception.NumberIsTooLargeException;
 import org.apache.commons.math.distribution.BetaDistributionImpl;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/random/ValueServer.java b/src/main/java/org/apache/commons/math/random/ValueServer.java
index 7c343d7..aab068d 100644
--- a/src/main/java/org/apache/commons/math/random/ValueServer.java
+++ b/src/main/java/org/apache/commons/math/random/ValueServer.java
@@ -23,7 +23,7 @@
 import java.net.URL;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Generates values for use in simulation applications.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java
index 01faf73..b60b2e9 100644
--- a/src/main/java/org/apache/commons/math/stat/Frequency.java
+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java
@@ -23,7 +23,7 @@
 import java.util.TreeMap;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Maintains a frequency distribution.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/StatUtils.java b/src/main/java/org/apache/commons/math/stat/StatUtils.java
index 18812a9..3cd4b6c 100644
--- a/src/main/java/org/apache/commons/math/stat/StatUtils.java
+++ b/src/main/java/org/apache/commons/math/stat/StatUtils.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math.stat;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.UnivariateStatistic;
 import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
 import org.apache.commons.math.stat.descriptive.moment.Mean;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java b/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java
index e8d9fc7..b9a2323 100644
--- a/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/Covariance.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math.stat.correlation;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.BlockRealMatrix;
 import org.apache.commons.math.stat.descriptive.moment.Mean;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
index 0ac847d..97330e0 100644
--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.distribution.TDistribution;
 import org.apache.commons.math.distribution.TDistributionImpl;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 import org.apache.commons.math.exception.DimensionMismatchException;
 import org.apache.commons.math.linear.RealMatrix;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java b/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java
index 9d031b4..45e5413 100644
--- a/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java
+++ b/src/main/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math.stat.correlation;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.BlockRealMatrix;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.stat.ranking.NaturalRanking;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java
index 7dbf307..19ea908 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math.stat.descriptive;
 
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 import org.apache.commons.math.util.MathUtils;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java
index 18c50ef..ddfaa44 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math.stat.descriptive;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 import org.apache.commons.math.exception.NotPositiveException;
 import org.apache.commons.math.exception.DimensionMismatchException;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java
index a2a040a..6f7484d 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/DescriptiveStatistics.java
@@ -21,7 +21,7 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
 import org.apache.commons.math.stat.descriptive.moment.Kurtosis;
 import org.apache.commons.math.stat.descriptive.moment.Mean;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java
index 75466c3..27e84d7 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java
@@ -21,7 +21,7 @@
 
 import org.apache.commons.math.DimensionMismatchException;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
 import org.apache.commons.math.stat.descriptive.moment.Mean;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java
index 002277b..034c648 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java
@@ -19,7 +19,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
 import org.apache.commons.math.stat.descriptive.moment.Mean;
 import org.apache.commons.math.stat.descriptive.moment.SecondMoment;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java
index 8787edd..f87d6df 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java
@@ -19,7 +19,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
 import org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic;
 import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java
index 6a8745c..f3b5ad8 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java
@@ -19,7 +19,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
 
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java
index 652b901..09494aa 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/SemiVariance.java
@@ -19,7 +19,7 @@
 
 import java.io.Serializable;
 import org.apache.commons.math.exception.NullArgumentException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
index 1bb3f75..1466238 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
@@ -19,7 +19,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.exception.NullArgumentException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.WeightedEvaluation;
 import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java
index 845141d..bd791c1 100644
--- a/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java
+++ b/src/main/java/org/apache/commons/math/stat/descriptive/rank/Percentile.java
@@ -20,7 +20,7 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java
index 41c02cf..7607489 100644
--- a/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java
+++ b/src/main/java/org/apache/commons/math/stat/inference/OneWayAnovaImpl.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.distribution.FDistribution;
 import org.apache.commons.math.distribution.FDistributionImpl;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.summary.Sum;
 import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
index c9650cf..c6182a5 100644
--- a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
+++ b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math.stat.regression;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.Array2DRowRealMatrix;
 import org.apache.commons.math.linear.RealVector;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java b/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java
index d6a71cc..11eb2be 100644
--- a/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java
+++ b/src/main/java/org/apache/commons/math/stat/regression/SimpleRegression.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.distribution.TDistribution;
 import org.apache.commons.math.distribution.TDistributionImpl;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Estimates an ordinary least squares regression model
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
index b2a4c8b..ce59b4d 100644
--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.complex.Complex;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://documents.wolfram.com/v5/Add-onsLinks/
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java
index 68e7468..ba8fb6b 100644
--- a/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastFourierTransformer.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.complex.Complex;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://mathworld.wolfram.com/FastFourierTransform.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java b/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java
index 71573f2..97e152b 100644
--- a/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastHadamardTransformer.java
@@ -19,7 +19,7 @@
 import org.apache.commons.math.FunctionEvaluationException;
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://www.archive.chipcenter.com/dsp/DSP000517F1.html">Fast Hadamard Transform</a> (FHT).
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java
index 4da8532..12785f1 100644
--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.complex.Complex;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Implements the <a href="http://documents.wolfram.com/v5/Add-onsLinks/
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math/util/ContinuedFraction.java
index ab97d90..672a270 100644
--- a/src/main/java/org/apache/commons/math/util/ContinuedFraction.java
+++ b/src/main/java/org/apache/commons/math/util/ContinuedFraction.java
@@ -19,7 +19,7 @@
 import org.apache.commons.math.ConvergenceException;
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MaxIterationsExceededException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Provides a generic means to evaluate continued fractions.  Subclasses simply
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/util/DefaultTransformer.java b/src/main/java/org/apache/commons/math/util/DefaultTransformer.java
index a17a79e..73bb830 100644
--- a/src/main/java/org/apache/commons/math/util/DefaultTransformer.java
+++ b/src/main/java/org/apache/commons/math/util/DefaultTransformer.java
@@ -20,7 +20,7 @@
 import java.io.Serializable;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NullArgumentException;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java
index 1accc8f..b5707de 100644
--- a/src/main/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java
@@ -22,8 +22,8 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.Localizable;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.Localizable;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.exception.NonMonotonousSequenceException;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java b/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java
index 5144a82..1145475 100644
--- a/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java
+++ b/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java
@@ -24,7 +24,7 @@
 import java.util.NoSuchElementException;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Open addressed map from int to double.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java b/src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java
index 5de851b..99c2d0e 100644
--- a/src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java
+++ b/src/main/java/org/apache/commons/math/util/OpenIntToFieldHashMap.java
@@ -26,7 +26,7 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Open addressed map from int to FieldElement.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java b/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java
index 98e027e..a61f97a 100644
--- a/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java
+++ b/src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java
@@ -20,7 +20,7 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.LocalizedFormats;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * <p>
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java
index 3766f22..af46664 100644
--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java
@@ -28,7 +28,7 @@
 import org.apache.commons.math.exception.ZeroException;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
-import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;
+import org.apache.commons.math.optimization.DifferentiableMultivariateVectorOptimizer;
 import org.apache.commons.math.optimization.fitting.CurveFitter;
 import org.apache.commons.math.optimization.fitting.WeightedObservedPoint;
 
@@ -64,7 +64,7 @@
      *
      * @param optimizer Optimizer to use for the fitting.
      */
-    public GaussianFitter(DifferentiableMultivariateVectorialOptimizer optimizer) {
+    public GaussianFitter(DifferentiableMultivariateVectorOptimizer optimizer) {
         super(optimizer);
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java
index 2187483..3bc75b9 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/LoessInterpolator.java
@@ -25,7 +25,6 @@
 import org.apache.commons.math.exception.DimensionMismatchException;
 import org.apache.commons.math.exception.NoDataException;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
-import org.apache.commons.math.exception.util.Localizable;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.FastMath;
 import org.apache.commons.math.util.MathUtils;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/OptimizationException.java b/src/main/java/org/apache/commons/math/optimization/OptimizationException.java
index e7358ea..2d23dfe 100644
--- a/src/main/java/org/apache/commons/math/optimization/OptimizationException.java
+++ b/src/main/java/org/apache/commons/math/optimization/OptimizationException.java
@@ -18,7 +18,6 @@
 package org.apache.commons.math.optimization;
 
 import org.apache.commons.math.ConvergenceException;
-import org.apache.commons.math.exception.util.DummyLocalizable;
 import org.apache.commons.math.exception.util.Localizable;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java b/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java
index 9605fab..1863885 100644
--- a/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java
+++ b/src/main/java/org/apache/commons/math/util/OpenIntToDoubleHashMap.java
@@ -23,8 +23,6 @@
 import java.util.ConcurrentModificationException;
 import java.util.NoSuchElementException;
 
-import org.apache.commons.math.exception.util.LocalizedFormats;
-
 /**
  * Open addressed map from int to double.
  * <p>This class provides a dedicated map from integers to doubles with a
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
index 9b759ec..6a6ccd2 100644
--- a/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
+++ b/src/main/java/org/apache/commons/math/stat/regression/AbstractMultipleLinearRegression.java
@@ -149,7 +149,6 @@
      */
     public double[] estimateRegressionParametersStandardErrors() {
         double[][] betaVariance = estimateRegressionParametersVariance();
-        RealVector residuals = calculateResiduals();
         double sigma = calculateErrorVariance();
         int length = betaVariance[0].length;
         double[] result = new double[length];
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
index 5a6265b..387a39c 100644
--- a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
@@ -17,11 +17,11 @@
 
 package org.apache.commons.math.optimization;
 
-import org.apache.commons.math.analysis.DifferentiableMultivariateRealFunction;
+import org.apache.commons.math.analysis.DifferentiableMultivariateFunction;
 
 /**
  * This interface represents an optimization algorithm for
- * {@link DifferentiableMultivariateRealFunction scalar differentiable objective
+ * {@link DifferentiableMultivariateFunction scalar differentiable objective
  * functions}.
  * Optimization algorithms find the input point set that either {@link GoalType
  * maximize or minimize} an objective function.
@@ -33,4 +33,4 @@
  * @since 2.0
  */
 public interface DifferentiableMultivariateRealOptimizer
-    extends BaseMultivariateRealOptimizer<DifferentiableMultivariateRealFunction> {}
+    extends BaseMultivariateRealOptimizer<DifferentiableMultivariateFunction> {}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java
index 2a11982..b53cf72 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartDifferentiableMultivariateVectorialOptimizer.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math.optimization;
 
-import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
+import org.apache.commons.math.analysis.DifferentiableMultivariateVectorFunction;
 import org.apache.commons.math.random.RandomVectorGenerator;
 
 /**
@@ -32,7 +32,7 @@
  * @since 2.0
  */
 public class MultiStartDifferentiableMultivariateVectorialOptimizer
-    extends BaseMultiStartMultivariateVectorialOptimizer<DifferentiableMultivariateVectorialFunction>
+    extends BaseMultiStartMultivariateVectorialOptimizer<DifferentiableMultivariateVectorFunction>
     implements DifferentiableMultivariateVectorialOptimizer {
     /**
      * Create a multi-start optimizer from a single-start optimizer.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
index 3ef5020..3068ebe 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartMultivariateRealOptimizer.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math.optimization;
 
-import org.apache.commons.math.analysis.MultivariateRealFunction;
+import org.apache.commons.math.analysis.MultivariateFunction;
 import org.apache.commons.math.random.RandomVectorGenerator;
 
 /**
@@ -32,7 +32,7 @@
  * @since 2.0
  */
 public class MultiStartMultivariateRealOptimizer
-    extends BaseMultiStartMultivariateRealOptimizer<MultivariateRealFunction>
+    extends BaseMultiStartMultivariateRealOptimizer<MultivariateFunction>
     implements MultivariateRealOptimizer {
     /**
      * Create a multi-start optimizer from a single-start optimizer.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java b/src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java
index 3e1f5fd..9250fb1 100644
--- a/src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java
+++ b/src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java
@@ -17,13 +17,12 @@
 
 package org.apache.commons.math.optimization;
 
-import org.apache.commons.math.util.MathUtils;
 import org.apache.commons.math.util.FastMath;
 
 /**
  * Simple implementation of the {@link ConvergenceChecker} interface using
  * only point coordinates.
- * 
+ *
  * Convergence is considered to have been reached if either the relative
  * difference between each point coordinate are smaller than a threshold
  * or if either the absolute difference between the point coordinates are
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java
index afb1514..ff79331 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math.util.FastMath;
 import org.apache.commons.math.util.MathArrays;
 import org.apache.commons.math.analysis.UnivariateFunction;
-import org.apache.commons.math.analysis.MultivariateRealFunction;
+import org.apache.commons.math.analysis.MultivariateFunction;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.optimization.GoalType;
@@ -46,7 +46,7 @@
  * @since 2.2
  */
 public class PowellOptimizer
-    extends BaseAbstractScalarOptimizer<MultivariateRealFunction>
+    extends BaseAbstractScalarOptimizer<MultivariateFunction>
     implements MultivariateRealOptimizer {
     /**
      * Minimum relative tolerance.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java
index d59ab69..b90b6d0 100644
--- a/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/BlockFieldMatrix.java
@@ -23,7 +23,6 @@
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.exception.NoDataException;
 import org.apache.commons.math.exception.DimensionMismatchException;
-import org.apache.commons.math.exception.MatrixDimensionMismatchException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.FastMath;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
index ca6a0f1..9a53cb6 100644
--- a/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/BlockRealMatrix.java
@@ -20,7 +20,6 @@
 import java.io.Serializable;
 import java.util.Arrays;
 
-import org.apache.commons.math.exception.MatrixDimensionMismatchException;
 import org.apache.commons.math.exception.DimensionMismatchException;
 import org.apache.commons.math.exception.NoDataException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
index 81feba6..8125219 100644
--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
@@ -85,7 +85,7 @@
             throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);
         }
         mean = p;
-        normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
+        normal = new NormalDistribution(p, FastMath.sqrt(p));
         this.epsilon = epsilon;
         this.maxIterations = maxIterations;
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java
index 99cc864..c3642f9 100644
--- a/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/BetaDistributionImpl.java
@@ -89,13 +89,11 @@
     }
 
     /** {@inheritDoc} */
-    @Override
     public double getAlpha() {
         return alpha;
     }
 
     /** {@inheritDoc} */
-    @Override
     public double getBeta() {
         return beta;
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
index 268a564..708d512 100644
--- a/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
@@ -71,7 +71,6 @@
     /**
      * {@inheritDoc}
      */
-    @Override
     public double getMean() {
         return mean;
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
index e081931..a5276dd 100644
--- a/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
+++ b/src/main/java/org/apache/commons/math/linear/ArrayFieldVector.java
@@ -349,7 +349,7 @@
         data = buildArray(v1.length + v2.length);
         System.arraycopy(v1, 0, data, 0, v1.length);
         System.arraycopy(v2, 0, data, v1.length, v2.length);
-        this.field = data[0].getField();
+        this.field = field;
     }
 
     /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java
index 303294e..10b27bb 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java
@@ -34,7 +34,7 @@
  * @since 1.2
  */
 public class DividedDifferenceInterpolator
-    implements UnivariateRealInterpolator, Serializable {
+    implements UnivariateInterpolator, Serializable {
     /** serializable version identifier */
     private static final long serialVersionUID = 107049519551235069L;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java
index 68a9676..7a3ce4a 100644
--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java
+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFunction.java
@@ -19,7 +19,6 @@
 
 import java.io.Serializable;
 
-import org.apache.commons.math.exception.FunctionEvaluationException;
 import org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction;
 import org.apache.commons.math.analysis.UnivariateRealFunction;
 import org.apache.commons.math.exception.DimensionMismatchException;
@@ -117,7 +116,7 @@
     }
 
     /** {@inheritDoc} */
-    public double value(double x) throws FunctionEvaluationException {
+    public double value(double x) {
         final double xMc = x - c;
         return a + b * Math.exp(-xMc * xMc / (2.0 * (d * d)));
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
index 0c1c49f..1d0e6a9 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
@@ -18,7 +18,6 @@
 package org.apache.commons.math.optimization.general;
 
 import org.apache.commons.math.exception.SingularMatrixException;
-import org.apache.commons.math.exception.FunctionEvaluationException;
 import org.apache.commons.math.exception.ConvergenceException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.BlockRealMatrix;
@@ -62,8 +61,7 @@
 
     /** {@inheritDoc} */
     @Override
-    public VectorialPointValuePair doOptimize()
-        throws FunctionEvaluationException {
+    public VectorialPointValuePair doOptimize() {
 
         final ConvergenceChecker<VectorialPointValuePair> checker
             = getConvergenceChecker();
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
index a764d0c..3f89d68 100644
--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -18,8 +18,6 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.exception.MaxCountExceededException;
-import org.apache.commons.math.exception.SingularMatrixException;
-import org.apache.commons.math.exception.NonSymmetricMatrixException;
 import org.apache.commons.math.exception.DimensionMismatchException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.MathUtils;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java
index d5cde01..740e92e 100644
--- a/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/FieldLUDecompositionImpl.java
@@ -22,8 +22,6 @@
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
 import org.apache.commons.math.exception.DimensionMismatchException;
-import org.apache.commons.math.exception.NonSquareMatrixException;
-import org.apache.commons.math.exception.SingularMatrixException;
 
 /**
  * Calculates the LUP-decomposition of a square matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java
index c57c337..01fa921 100644
--- a/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/LUDecompositionImpl.java
@@ -18,8 +18,6 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.exception.DimensionMismatchException;
-import org.apache.commons.math.exception.NonSquareMatrixException;
-import org.apache.commons.math.exception.SingularMatrixException;
 import org.apache.commons.math.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java
index 9ba2e1b..ba56b3c 100644
--- a/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/QRDecompositionImpl.java
@@ -20,7 +20,6 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.exception.DimensionMismatchException;
-import org.apache.commons.math.exception.SingularMatrixException;
 import org.apache.commons.math.util.FastMath;
 
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
index 8d3a1e1..3c9c729 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
@@ -18,7 +18,6 @@
 package org.apache.commons.math.optimization.general;
 
 import org.apache.commons.math.exception.MathUserException;
-import org.apache.commons.math.exception.SingularMatrixException;
 import org.apache.commons.math.exception.ConvergenceException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.BlockRealMatrix;
@@ -26,6 +25,7 @@
 import org.apache.commons.math.linear.LUDecompositionImpl;
 import org.apache.commons.math.linear.QRDecompositionImpl;
 import org.apache.commons.math.linear.RealMatrix;
+import org.apache.commons.math.linear.SingularMatrixException;
 import org.apache.commons.math.optimization.VectorialPointValuePair;
 import org.apache.commons.math.optimization.ConvergenceChecker;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java b/src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java
index 12a5f3b..98d379f 100644
--- a/src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java
+++ b/src/main/java/org/apache/commons/math/linear/FieldDecompositionSolver.java
@@ -47,7 +47,7 @@
      * @throws SingularMatrixException
      * if the decomposed matrix is singular.
      */
-    T[] solve(final T[] b);
+    //T[] solve(final T[] b);
 
     /** Solve the linear equation A &times; X = B for matrices A.
      * <p>The A matrix is implicit, it is provided by the underlying
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java
index 8c764b9..79dca81 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/LegendreGaussIntegrator.java
@@ -153,12 +153,6 @@
 
     }
 
-    @Deprecated
-    public double integrate(final double min, final double max)
-        throws ConvergenceException,  MathUserException, IllegalArgumentException {
-        return integrate(f, min, max);
-    }
-
     /** {@inheritDoc} */
     public double integrate(final UnivariateRealFunction f, final double min, final double max)
         throws ConvergenceException,  MathUserException, IllegalArgumentException {
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java b/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java
index 769f7c4..c59d09d 100644
--- a/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java
+++ b/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.java
@@ -18,7 +18,6 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.FieldElement;
-import org.apache.commons.math.exception.MathUserException;
 
 /**
  * Default implementation of the {@link FieldMatrixChangingVisitor} interface.
@@ -33,7 +32,6 @@
  */
 public class DefaultFieldMatrixChangingVisitor<T extends FieldElement<T>>
     implements FieldMatrixChangingVisitor<T> {
-
     /** Zero element of the field. */
     private final T zero;
 
@@ -58,5 +56,4 @@
     public T end() {
         return zero;
     }
-
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java b/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java
index 0505b56..6232216 100644
--- a/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java
+++ b/src/main/java/org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.java
@@ -18,7 +18,6 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.FieldElement;
-import org.apache.commons.math.exception.MathUserException;
 
 /**
  * Default implementation of the {@link FieldMatrixPreservingVisitor} interface.
@@ -33,7 +32,6 @@
  */
 public class DefaultFieldMatrixPreservingVisitor<T extends FieldElement<T>>
     implements FieldMatrixPreservingVisitor<T> {
-
     /** Zero element of the field. */
     private final T zero;
 
@@ -56,5 +54,4 @@
     public T end() {
         return zero;
     }
-
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/FieldMatrix.java b/src/main/java/org/apache/commons/math/linear/FieldMatrix.java
index 3b7597a..b143961 100644
--- a/src/main/java/org/apache/commons/math/linear/FieldMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrix.java
@@ -20,7 +20,6 @@
 
 import org.apache.commons.math.Field;
 import org.apache.commons.math.FieldElement;
-import org.apache.commons.math.exception.MathUserException;
 
 /**
  * Interface defining field-valued matrix with basic algebraic operations.
@@ -32,7 +31,6 @@
  * @version $Revision$ $Date$
  */
 public interface FieldMatrix<T extends FieldElement<T>> extends AnyMatrix {
-
     /**
      * Get the type of field elements of the matrix.
      *
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java b/src/main/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java
index 9555645..34b9639 100644
--- a/src/main/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java
+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrixChangingVisitor.java
@@ -18,7 +18,6 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.FieldElement;
-import org.apache.commons.math.exception.MathUserException;
 
 /**
  * Interface defining a visitor for matrix entries.
@@ -28,7 +27,6 @@
  * @since 2.0
  */
 public interface FieldMatrixChangingVisitor<T extends FieldElement<?>> {
-
     /**
      * Start visiting a matrix.
      * <p>This method is called once before any entry of the matrix is visited.</p>
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java b/src/main/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java
index 6f89204..46f2b68 100644
--- a/src/main/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java
+++ b/src/main/java/org/apache/commons/math/linear/FieldMatrixPreservingVisitor.java
@@ -18,7 +18,6 @@
 package org.apache.commons.math.linear;
 
 import org.apache.commons.math.FieldElement;
-import org.apache.commons.math.exception.MathUserException;
 
 /**
  * Interface defining a visitor for matrix entries.
@@ -28,7 +27,6 @@
  * @since 2.0
  */
 public interface FieldMatrixPreservingVisitor<T extends FieldElement<?>> {
-
     /**
      * Start visiting a matrix.
      * <p>This method is called once before any entry of the matrix is visited.</p>
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/RealMatrix.java b/src/main/java/org/apache/commons/math/linear/RealMatrix.java
index b295413..5b6dc7b 100644
--- a/src/main/java/org/apache/commons/math/linear/RealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/RealMatrix.java
@@ -17,9 +17,6 @@
 
 package org.apache.commons.math.linear;
 
-import org.apache.commons.math.exception.MathUserException;
-
-
 /**
  * Interface defining a real-valued matrix with basic algebraic operations.
  * <p>
@@ -29,7 +26,6 @@
  * @version $Revision$ $Date$
  */
 public interface RealMatrix extends AnyMatrix {
-
     /**
      * Create a new RealMatrix of the same type as the instance with the supplied
      * row and column dimensions.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java b/src/main/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java
index 395c6b8..0465b07 100644
--- a/src/main/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java
+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixChangingVisitor.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.linear;
 
-import org.apache.commons.math.exception.MathUserException;
-
 /**
  * Interface defining a visitor for matrix entries.
  *
@@ -27,7 +25,6 @@
  * @since 2.0
  */
 public interface RealMatrixChangingVisitor {
-
     /**
      * Start visiting a matrix.
      * <p>This method is called once before any entry of the matrix is visited.</p>
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java b/src/main/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java
index 5dee525..5c999b3 100644
--- a/src/main/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java
+++ b/src/main/java/org/apache/commons/math/linear/RealMatrixPreservingVisitor.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.linear;
 
-import org.apache.commons.math.exception.MathUserException;
-
 /**
  * Interface defining a visitor for matrix entries.
  *
@@ -27,7 +25,6 @@
  * @since 2.0
  */
 public interface RealMatrixPreservingVisitor {
-
     /**
      * Start visiting a matrix.
      * <p>This method is called once before any entry of the matrix is visited.</p>
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
index bfc121a..b594b3d 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/GaussNewtonOptimizer.java
@@ -18,7 +18,6 @@
 package org.apache.commons.math.optimization.general;
 
 import org.apache.commons.math.exception.ConvergenceException;
-import org.apache.commons.math.exception.MathUserException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.linear.ArrayRealVector;
 import org.apache.commons.math.linear.BlockRealMatrix;
@@ -26,7 +25,6 @@
 import org.apache.commons.math.linear.LUDecompositionImpl;
 import org.apache.commons.math.linear.QRDecompositionImpl;
 import org.apache.commons.math.linear.RealMatrix;
-import org.apache.commons.math.linear.RealVector;
 import org.apache.commons.math.linear.SingularMatrixException;
 import org.apache.commons.math.optimization.ConvergenceChecker;
 import org.apache.commons.math.optimization.SimpleVectorialValueChecker;
@@ -97,7 +95,7 @@
 
     /** {@inheritDoc} */
     @Override
-    public VectorialPointValuePair doOptimize() throws MathUserException {
+    public VectorialPointValuePair doOptimize() {
 
         final ConvergenceChecker<VectorialPointValuePair> checker
             = getConvergenceChecker();
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java
index 05e9ac2..b1fa1b2 100644
--- a/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java
@@ -18,7 +18,6 @@
 
 import org.apache.commons.math.util.MathUtils;
 import org.apache.commons.math.util.FastMath;
-import org.apache.commons.math.exception.MathUserException;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.optimization.ConvergenceChecker;
@@ -86,7 +85,7 @@
 
     /** {@inheritDoc} */
     @Override
-    protected UnivariateRealPointValuePair doOptimize() throws MathUserException {
+    protected UnivariateRealPointValuePair doOptimize() {
         final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
         final double lo = getMin();
         final double mid = getStartValue();
<end>
<start>
diff --git a/src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java b/src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java
index 9120d50..f1425f0 100644
--- a/src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java
+++ b/src/test/java/org/apache/commons/math/analysis/MonitoredFunction.java
@@ -16,8 +16,6 @@
  */
 package org.apache.commons.math.analysis;
 
-import org.apache.commons.math.exception.MathUserException;
-
 /**
  * Wrapper class for counting functions calls.
  *
@@ -38,7 +36,7 @@
         return callsCount;
     }
 
-    public double value(double x) throws MathUserException {
+    public double value(double x) {
         ++callsCount;
         return f.value(x);
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java
index 0366661..2715a68 100644
--- a/src/main/java/org/apache/commons/math/linear/MatrixUtils.java
+++ b/src/main/java/org/apache/commons/math/linear/MatrixUtils.java
@@ -29,7 +29,6 @@
 import org.apache.commons.math.exception.NoDataException;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.exception.NullArgumentException;
-import org.apache.commons.math.exception.MatrixDimensionMismatchException;
 import org.apache.commons.math.exception.DimensionMismatchException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.fraction.BigFraction;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
index 93c936e..bee009c 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
@@ -28,10 +28,10 @@
  */
 public class BisectionSolver extends AbstractUnivariateRealSolver {
     /** Default absolute accuracy. */
-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
 
     /**
-     * Construct a solver with default accuracy.
+     * Construct a solver with default accuracy (1e-6).
      */
     public BisectionSolver() {
         this(DEFAULT_ABSOLUTE_ACCURACY);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java
index 6ae8621..1d2a198 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RiddersSolver.java
@@ -33,10 +33,10 @@
  */
 public class RiddersSolver extends AbstractUnivariateRealSolver {
     /** Default absolute accuracy. */
-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
 
     /**
-     * Construct a solver with default accuracy.
+     * Construct a solver with default accuracy (1e-6).
      */
     public RiddersSolver() {
         this(DEFAULT_ABSOLUTE_ACCURACY);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
index 4770563..af9a3f4 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
@@ -38,10 +38,10 @@
  */
 public class SecantSolver extends AbstractUnivariateRealSolver {
     /** Default absolute accuracy. */
-    public static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
+    private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
 
     /**
-     * Construct a solver with default accuracy.
+     * Construct a solver with default accuracy (1e-6).
      */
     public SecantSolver() {
         this(DEFAULT_ABSOLUTE_ACCURACY);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java b/src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java
index 8f88a29..ed615eb 100644
--- a/src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java
+++ b/src/main/java/org/apache/commons/math/analysis/interpolation/MultivariateRealInterpolator.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math.analysis.interpolation;
 
-import org.apache.commons.math.analysis.MultivariateRealFunction;
+import org.apache.commons.math.analysis.MultivariateFunction;
 
 /**
  * Interface representing a univariate real interpolating function.
@@ -46,5 +46,5 @@
      * @throws org.apache.commons.math.exception.NullArgumentException if
      * the arguments are {@code null}.
      */
-    MultivariateRealFunction interpolate(double[][] xval, double[] yval);
+    MultivariateFunction interpolate(double[][] xval, double[] yval);
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java b/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java
index 39cda00..169863d 100644
--- a/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java
+++ b/src/main/java/org/apache/commons/math/exception/MathArithmeticException.java
@@ -36,7 +36,7 @@
      * Default constructor.
      */
     public MathArithmeticException() {
-        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION, null);
+        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);
     }
 
     /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java b/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java
index 5291ec0..e476c4c 100644
--- a/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java
+++ b/src/main/java/org/apache/commons/math/exception/MathIllegalStateException.java
@@ -59,6 +59,6 @@
      * Default constructor.
      */
     public MathIllegalStateException() {
-        addMessage(LocalizedFormats.ILLEGAL_STATE, null);
+        addMessage(LocalizedFormats.ILLEGAL_STATE);
     }
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/MathInternalError.java b/src/main/java/org/apache/commons/math/exception/MathInternalError.java
index 11f4c3b..27d4bbb 100644
--- a/src/main/java/org/apache/commons/math/exception/MathInternalError.java
+++ b/src/main/java/org/apache/commons/math/exception/MathInternalError.java
@@ -34,7 +34,7 @@
      * Simple constructor.
      */
     public MathInternalError() {
-        addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
+        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
     }
 
     /**
@@ -44,5 +44,4 @@
     public MathInternalError(final Throwable cause) {
         super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
     }
-
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java b/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java
index b5a666f..8c1cf3b 100644
--- a/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java
+++ b/src/main/java/org/apache/commons/math/exception/MathUnsupportedOperationException.java
@@ -36,7 +36,7 @@
      * Default constructor.
      */
     public MathUnsupportedOperationException() {
-        this(LocalizedFormats.UNSUPPORTED_OPERATION, null);
+        this(LocalizedFormats.UNSUPPORTED_OPERATION);
     }
     /**
      * @param pattern Message pattern providing the specific context of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/NoDataException.java b/src/main/java/org/apache/commons/math/exception/NoDataException.java
index 365dd57..396f94a 100644
--- a/src/main/java/org/apache/commons/math/exception/NoDataException.java
+++ b/src/main/java/org/apache/commons/math/exception/NoDataException.java
@@ -42,6 +42,6 @@
      * @param specific Contextual information on what caused the exception.
      */
     public NoDataException(Localizable specific) {
-        super(specific, null);
+        super(specific);
     }
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/NullArgumentException.java b/src/main/java/org/apache/commons/math/exception/NullArgumentException.java
index 83e8830..5d39bdc 100644
--- a/src/main/java/org/apache/commons/math/exception/NullArgumentException.java
+++ b/src/main/java/org/apache/commons/math/exception/NullArgumentException.java
@@ -38,7 +38,7 @@
      * Default constructor.
      */
     public NullArgumentException() {
-        this(LocalizedFormats.NULL_NOT_ALLOWED, null);
+        this(LocalizedFormats.NULL_NOT_ALLOWED);
     }
     /**
      * @param pattern Message pattern providing the specific context of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
index 3b4b70e..142fb36 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
@@ -152,7 +152,6 @@
     }    
 
     /** {@inheritDoc} */
-    @Override
     public RealMatrix power(final int p) {
         if (p < 0) {
             throw new IllegalArgumentException("p must be >= 0");
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
index fa6d221..a6f2f1d 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractFieldMatrix.java
@@ -267,7 +267,6 @@
     }
     
     /** {@inheritDoc} */
-    @Override
     public FieldMatrix<T> power(final int p) {
         if (p < 0) {
             throw new IllegalArgumentException("p must be >= 0");
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java b/src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java
index baaa70e..4f21324 100644
--- a/src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java
+++ b/src/main/java/org/apache/commons/math/distribution/KolmogorovSmirnovDistribution.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.math.distribution;
 
-import org.apache.commons.math.exception.MathArithmeticException;
-
 /**
  * Treats the distribution of the two-sided 
  * {@code P(D}<sub>{@code n}</sub>{@code < d)}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
index db304b4..2eac5f5 100644
--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
@@ -24,7 +24,6 @@
 
 import org.apache.commons.math.exception.ConvergenceException;
 import org.apache.commons.math.exception.MathIllegalArgumentException;
-import org.apache.commons.math.exception.NullArgumentException;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.stat.descriptive.moment.Variance;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateIntegrator.java
similarity index 98%
rename from src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java
rename to src/main/java/org/apache/commons/math/analysis/integration/UnivariateIntegrator.java
index 3fc7593..1252248 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegrator.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateIntegrator.java
@@ -28,7 +28,7 @@
  * @version $Id$
  * @since 1.2
  */
-public interface UnivariateRealIntegrator {
+public interface UnivariateIntegrator {
 
     /**
      * Get the actual relative accuracy.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/MathParseException.java b/src/main/java/org/apache/commons/math/exception/MathParseException.java
index 8b2dac1..4769aaf 100644
--- a/src/main/java/org/apache/commons/math/exception/MathParseException.java
+++ b/src/main/java/org/apache/commons/math/exception/MathParseException.java
@@ -16,9 +16,8 @@
  */
 package org.apache.commons.math.exception;
 
-import org.apache.commons.math.exception.util.LocalizedFormats;
-import org.apache.commons.math.exception.util.ExceptionContext;
 import org.apache.commons.math.exception.util.ExceptionContextProvider;
+import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
  * Class to signal parse failures.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/CardanEulerSingularityException.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException.java
similarity index 96%
rename from src/main/java/org/apache/commons/math/geometry/euclidean/threeD/CardanEulerSingularityException.java
rename to src/main/java/org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException.java
index c6498fb..da32a07 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/CardanEulerSingularityException.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.geometry.euclidean.threeD;
+package org.apache.commons.math.geometry.euclidean.threed;
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/NotARotationMatrixException.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException.java
similarity index 96%
rename from src/main/java/org/apache/commons/math/geometry/euclidean/threeD/NotARotationMatrixException.java
rename to src/main/java/org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException.java
index 2b5737b..5a1f995 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/NotARotationMatrixException.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.geometry.euclidean.threeD;
+package org.apache.commons.math.geometry.euclidean.threed;
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.exception.util.Localizable;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
similarity index 99%
rename from src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Rotation.java
rename to src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
index 7f4f443..8563f4a 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Rotation.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.geometry.euclidean.threeD;
+package org.apache.commons.math.geometry.euclidean.threed;
 
 import java.io.Serializable;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrder.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/RotationOrder.java
similarity index 98%
rename from src/main/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrder.java
rename to src/main/java/org/apache/commons/math/geometry/euclidean/threed/RotationOrder.java
index 844ddef..4fa6451 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/RotationOrder.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/RotationOrder.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.geometry.euclidean.threeD;
+package org.apache.commons.math.geometry.euclidean.threed;
 
 /**
  * This class is a utility representing a rotation order specification
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java
similarity index 99%
rename from src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3D.java
rename to src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java
index 5b50c22..b85e499 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3D.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.geometry.euclidean.threeD;
+package org.apache.commons.math.geometry.euclidean.threed;
 
 import java.io.Serializable;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormat.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java
similarity index 99%
rename from src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormat.java
rename to src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java
index 2aff092..685aeb6 100644
--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threeD/Vector3DFormat.java
+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math.geometry.euclidean.threeD;
+package org.apache.commons.math.geometry.euclidean.threed;
 
 import java.text.FieldPosition;
 import java.text.NumberFormat;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java b/src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java
index 25eb984..65703b3 100644
--- a/src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java
+++ b/src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java
@@ -429,7 +429,7 @@
      * difference and symmetric difference (exclusive or).</p>
      * @param <S> Type of the space.
      */
-    public static interface LeafMerger<S extends Space> {
+    public interface LeafMerger<S extends Space> {
 
         /** Merge a leaf node and a tree node.
          * <p>This method is called at the end of a recursive merging
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java b/src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java
index e7e4d61..8e7febf 100644
--- a/src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java
+++ b/src/main/java/org/apache/commons/math/genetics/InvalidRepresentationException.java
@@ -36,8 +36,7 @@
      * @param pattern Message pattern.
      * @param args Arguments.
      */
-    public InvalidRepresentationException(Localizable pattern,
-            Object ... args) {
+    public InvalidRepresentationException(Localizable pattern, Object ... args) {
        super(pattern, args);
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/genetics/RandomKey.java b/src/main/java/org/apache/commons/math/genetics/RandomKey.java
index 86c35f8..7ac6506 100644
--- a/src/main/java/org/apache/commons/math/genetics/RandomKey.java
+++ b/src/main/java/org/apache/commons/math/genetics/RandomKey.java
@@ -21,7 +21,6 @@
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
-import org.apache.commons.math.exception.OutOfRangeException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/ODEIntegrator.java b/src/main/java/org/apache/commons/math/ode/ODEIntegrator.java
index e7a99f9..3ada91d 100644
--- a/src/main/java/org/apache/commons/math/ode/ODEIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/ODEIntegrator.java
@@ -20,7 +20,6 @@
 import java.util.Collection;
 
 import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
-import org.apache.commons.math.analysis.solvers.BrentSolver;
 import org.apache.commons.math.ode.events.EventHandler;
 import org.apache.commons.math.ode.sampling.StepHandler;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
index 0d50c94..52ae77e 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
@@ -36,7 +36,7 @@
  *
  * @version $Id$
  */
-public class SecantSolver extends SecantBase {
+public class SecantSolver extends BaseSecantSolver {
     /** Construct a solver with default accuracy (1e-6). */
     public SecantSolver() {
         super(DEFAULT_ABSOLUTE_ACCURACY, Method.SECANT);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java
index 37c3ab8..c27d958 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java
@@ -38,7 +38,8 @@
  * @since 3.0
  * @version $Id$
  */
-public class IllinoisSolver extends BaseBracketedSecantSolver {
+public class IllinoisSolver extends BaseSecantSolver {
+
     /** Construct a solver with default accuracy (1e-6). */
     public IllinoisSolver() {
         super(DEFAULT_ABSOLUTE_ACCURACY, Method.ILLINOIS);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java
index 30e8ad4..03c9c9a 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java
@@ -40,7 +40,8 @@
  * @since 3.0
  * @version $Id$
  */
-public class PegasusSolver extends BaseBracketedSecantSolver {
+public class PegasusSolver extends BaseSecantSolver {
+
     /** Construct a solver with default accuracy (1e-6). */
     public PegasusSolver() {
         super(DEFAULT_ABSOLUTE_ACCURACY, Method.PEGASUS);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java
index 4ab3426..2465904 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java
@@ -35,7 +35,8 @@
  * @since 3.0
  * @version $Id$
  */
-public class RegulaFalsiSolver extends BaseBracketedSecantSolver {
+public class RegulaFalsiSolver extends BaseSecantSolver {
+
     /** Construct a solver with default accuracy (1e-6). */
     public RegulaFalsiSolver() {
         super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
index 363a8b3..aa46ec5 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/SecantSolver.java
@@ -38,7 +38,7 @@
  *
  * @version $Id$
  */
-public class SecantSolver extends AbstractUnivariateRealSolver {
+public class SecantSolver extends AbstractUnivariateSolver {
 
     /** Default absolute accuracy. */
     protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/util/CompositeFormat.java b/src/main/java/org/apache/commons/math/util/CompositeFormat.java
index b92a1f6..6cd7bd2 100644
--- a/src/main/java/org/apache/commons/math/util/CompositeFormat.java
+++ b/src/main/java/org/apache/commons/math/util/CompositeFormat.java
@@ -52,7 +52,7 @@
      */
     public static NumberFormat getDefaultNumberFormat(final Locale locale) {
         final NumberFormat nf = NumberFormat.getInstance(locale);
-        nf.setMaximumFractionDigits(8);
+        nf.setMaximumFractionDigits(2);
         return nf;
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
index a9d896e..c820c97 100644
--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java
@@ -42,7 +42,7 @@
     private static final double TINY = 0x1.0p-966;
 
     /** Computed singular values. */
-    private double[] singularValues;
+    private final double[] singularValues;
 
     /** max(row dimension, column dimension). */
     private final int m;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java b/src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java
index 5a695c4..58f6a9e 100644
--- a/src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java
+++ b/src/main/java/org/apache/commons/math/stat/regression/MillerUpdatingRegression.java
@@ -17,10 +17,6 @@
 package org.apache.commons.math.stat.regression;
 
 import java.util.Arrays;
-import org.apache.commons.math.MathException;
-import org.apache.commons.math.MathRuntimeException;
-import org.apache.commons.math.exception.util.DummyLocalizable;
-import org.apache.commons.math.exception.util.Localizable;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.util.FastMath;
 import org.apache.commons.math.util.MathUtils;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
index 3d31a6f..85aa85c 100644
--- a/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealMatrix.java
@@ -625,7 +625,6 @@
     }
 
     /** {@inheritDoc} */
-    @Override
     public double[] operate(final double[] v) {
         final int nRows = getRowDimension();
         final int nCols = getColumnDimension();
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
index 9323aa6..38938ba 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
@@ -20,7 +20,6 @@
 import java.util.Arrays;
 
 import org.apache.commons.math.analysis.MultivariateRealFunction;
-import org.apache.commons.math.exception.DimensionMismatchException;
 import org.apache.commons.math.exception.MathIllegalStateException;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.exception.OutOfRangeException;
@@ -31,7 +30,6 @@
 import org.apache.commons.math.optimization.GoalType;
 import org.apache.commons.math.optimization.MultivariateRealOptimizer;
 import org.apache.commons.math.optimization.RealPointValuePair;
-import org.apache.commons.math.util.MathArrays;
 
 /**
  * Powell's BOBYQA algorithm. This implementation is translated and
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
index 96030e7..2fcd836 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
@@ -22,7 +22,6 @@
 import org.apache.commons.math.analysis.MultivariateRealFunction;
 import org.apache.commons.math.exception.DimensionMismatchException;
 import org.apache.commons.math.exception.MathIllegalStateException;
-import org.apache.commons.math.exception.MathInternalError;
 import org.apache.commons.math.exception.NumberIsTooSmallException;
 import org.apache.commons.math.exception.OutOfRangeException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java
index 38ba5db..6e20b13 100644
--- a/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/general/NonLinearConjugateGradientOptimizer.java
@@ -144,7 +144,7 @@
     /** {@inheritDoc} */
     @Override
     protected RealPointValuePair doOptimize() {
-        final ConvergenceChecker checker = getConvergenceChecker();
+        final ConvergenceChecker<RealPointValuePair> checker = getConvergenceChecker();
         point = getStartPoint();
         final GoalType goal = getGoalType();
         final int n = point.length;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java b/src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java
index ae643f5..8c3ed13 100644
--- a/src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java
+++ b/src/main/java/org/apache/commons/math/exception/util/ExceptionContextProvider.java
@@ -31,9 +31,4 @@
      */
     ExceptionContext getContext();
 
-    /** Get a reference to the exception to which the context relates.
-     * @return a reference to the exception to which the context relates
-     */
-    Throwable getException();
-
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java
index 9c3d48c..bb08db1 100644
--- a/src/main/java/org/apache/commons/math/util/FastMath.java
+++ b/src/main/java/org/apache/commons/math/util/FastMath.java
@@ -77,7 +77,7 @@
     private static final int EXP_INT_TABLE_MAX_INDEX = 750;
     private static final int EXP_INT_TABLE_LEN = EXP_INT_TABLE_MAX_INDEX * 2;
 
-    private static final boolean INIT_TABLES = true;
+    private static final boolean INIT_TABLES = false;
 
     // Enclose large data table in nested static class so it's only loaded on first access
     private static class ExpIntTable {
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java
index 42796c7..baf236a 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java
@@ -48,7 +48,7 @@
     extends RungeKuttaStepInterpolator {
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20110928L;
+    private static final long serialVersionUID = 20111120L;
 
     /** Simple constructor.
      * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java
index af32c4c..1dac8ab 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java
@@ -72,7 +72,7 @@
     private static final double D6 =      69997945.0 /     29380423.0;
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20110928L;
+    private static final long serialVersionUID = 20111120L;
 
     /** First vector for interpolation. */
     private double[] v1;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
index 99a604f..d2807a4 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java
@@ -42,7 +42,7 @@
   extends RungeKuttaStepInterpolator {
 
   /** Serializable version identifier. */
-  private static final long serialVersionUID = 20110928L;
+  private static final long serialVersionUID = 20111120L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java
index e956b20..5377755 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java
@@ -54,7 +54,7 @@
     private static final double TWO_PLUS_SQRT_2 = 2 + FastMath.sqrt(2.0);
 
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20110928L;
+    private static final long serialVersionUID = 20111120L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
index ba112d4..b928b53 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java
@@ -33,7 +33,7 @@
   extends RungeKuttaStepInterpolator {
 
   /** Serializable version identifier */
-  private static final long serialVersionUID = 20110928L;
+  private static final long serialVersionUID = 20111120L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
index 1c76483..25f77c5 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java
@@ -44,7 +44,7 @@
   extends RungeKuttaStepInterpolator {
 
   /** Serializable version identifier */
-  private static final long serialVersionUID = 20110928L;
+  private static final long serialVersionUID = 20111120L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
index 731ec44..fdc9d75 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java
@@ -49,7 +49,7 @@
   extends RungeKuttaStepInterpolator {
 
   /** Serializable version identifier */
-  private static final long serialVersionUID = 20110928L;
+  private static final long serialVersionUID = 20111120L;
 
   /** Simple constructor.
    * This constructor builds an instance that is not usable yet, the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
index c95ffb8..45226e2 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -21,7 +21,7 @@
 import java.util.List;
 
 import org.apache.commons.math.exception.MaxCountExceededException;
-import org.apache.commons.math.optimization.RealPointValuePair;
+import org.apache.commons.math.optimization.PointValuePair;
 import org.apache.commons.math.util.Precision;
 
 
@@ -182,7 +182,7 @@
 
     /** {@inheritDoc} */
     @Override
-    public RealPointValuePair doOptimize()
+    public PointValuePair doOptimize()
         throws MaxCountExceededException, UnboundedSolutionException, NoFeasibleSolutionException {
         final SimplexTableau tableau =
             new SimplexTableau(function, linearConstraints, goal, nonNegative,
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java
index 8de5878..eb708c8 100644
--- a/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java
+++ b/src/main/java/org/apache/commons/math/analysis/integration/UnivariateRealIntegratorImpl.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math.analysis.integration;
 
 import org.apache.commons.math.analysis.UnivariateFunction;
-import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;
+import org.apache.commons.math.analysis.solvers.UnivariateSolverUtils;
 import org.apache.commons.math.exception.MathIllegalArgumentException;
 import org.apache.commons.math.exception.MaxCountExceededException;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
@@ -226,7 +226,7 @@
 
         // Checks.
         MathUtils.checkNotNull(f);
-        UnivariateRealSolverUtils.verifyInterval(lower, upper);
+        UnivariateSolverUtils.verifyInterval(lower, upper);
 
         // Reset.
         this.min = lower;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
index cc532be..39ea815 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
@@ -21,7 +21,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-import org.apache.commons.math.analysis.MultivariateRealFunction;
+import org.apache.commons.math.analysis.MultivariateFunction;
 import org.apache.commons.math.exception.MultiDimensionMismatchException;
 import org.apache.commons.math.exception.NoDataException;
 import org.apache.commons.math.exception.NotPositiveException;
@@ -81,7 +81,7 @@
  */
 
 public class CMAESOptimizer
-    extends BaseAbstractScalarOptimizer<MultivariateRealFunction>
+    extends BaseAbstractScalarOptimizer<MultivariateFunction>
     implements MultivariateRealOptimizer {
     /** Default value for {@link #checkFeasableCount}: {@value}. */
     public static final int DEFAULT_CHECKFEASABLECOUNT = 0;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
index 5304342..715e68e 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
@@ -28,7 +28,6 @@
 import org.apache.commons.math.linear.ArrayRealVector;
 import org.apache.commons.math.linear.RealVector;
 import org.apache.commons.math.optimization.GoalType;
-import org.apache.commons.math.optimization.BaseSimpleBoundsMultivariateRealOptimizer;
 import org.apache.commons.math.optimization.RealPointValuePair;
 import org.apache.commons.math.optimization.MultivariateRealOptimizer;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
index 468f436..238537e 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
@@ -47,8 +47,8 @@
  * @version $Id$
  */
 public abstract class BaseSecantSolver
-    extends AbstractUnivariateRealSolver
-    implements BracketedUnivariateRealSolver<UnivariateFunction> {
+    extends AbstractUnivariateSolver
+    implements BracketedUnivariateSolver<UnivariateFunction> {
 
     /** Default absolute accuracy. */
     protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java
index 59dc461..cfa4307 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java
@@ -41,8 +41,8 @@
  * @version $Id$
  */
 public class BracketingNthOrderBrentSolver
-    extends AbstractUnivariateRealSolver
-    implements BracketedUnivariateRealSolver<UnivariateFunction> {
+    extends AbstractUnivariateSolver
+    implements BracketedUnivariateSolver<UnivariateFunction> {
 
     /** Default absolute accuracy. */
     private static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateSolver.java
similarity index 89%
rename from src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java
rename to src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateSolver.java
index db02b52..fc4aab2 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateRealSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/DifferentiableUnivariateSolver.java
@@ -25,5 +25,5 @@
  *
  * @version $Id$
  */
-public interface DifferentiableUnivariateRealSolver
-    extends BaseUnivariateRealSolver<DifferentiableUnivariateFunction> {}
+public interface DifferentiableUnivariateSolver
+    extends BaseUnivariateSolver<DifferentiableUnivariateFunction> {}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateOptimizer.java
similarity index 97%
rename from src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java
rename to src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateOptimizer.java
index b28c3ba..932f1d2 100644
--- a/src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/univariate/BaseUnivariateOptimizer.java
@@ -34,7 +34,7 @@
  * @version $Id$
  * @since 3.0
  */
-public interface BaseUnivariateRealOptimizer<FUNC extends UnivariateFunction>
+public interface BaseUnivariateOptimizer<FUNC extends UnivariateFunction>
     extends BaseOptimizer<UnivariateRealPointValuePair> {
     /**
      * Find an optimum in the given interval.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java
index 2657725..2a038eb 100644
--- a/src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/univariate/UnivariateRealOptimizer.java
@@ -25,4 +25,4 @@
  * @since 3.0
  */
 public interface UnivariateRealOptimizer
-    extends BaseUnivariateRealOptimizer<UnivariateFunction> {}
+    extends BaseUnivariateOptimizer<UnivariateFunction> {}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateOptimizer.java
similarity index 96%
rename from src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java
rename to src/main/java/org/apache/commons/math/optimization/BaseMultivariateOptimizer.java
index 758b7e7..a36ded4 100644
--- a/src/main/java/org/apache/commons/math/optimization/BaseMultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateOptimizer.java
@@ -33,7 +33,7 @@
  * @version $Id$
  * @since 3.0
  */
-public interface BaseMultivariateRealOptimizer<FUNC extends MultivariateFunction>
+public interface BaseMultivariateOptimizer<FUNC extends MultivariateFunction>
     extends BaseOptimizer<RealPointValuePair> {
     /**
      * Optimize an objective function.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/BaseSimpleBoundsMultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateSimpleBoundsOptimizer.java
similarity index 96%
rename from src/main/java/org/apache/commons/math/optimization/BaseSimpleBoundsMultivariateRealOptimizer.java
rename to src/main/java/org/apache/commons/math/optimization/BaseMultivariateSimpleBoundsOptimizer.java
index 3342092..833eca3 100644
--- a/src/main/java/org/apache/commons/math/optimization/BaseSimpleBoundsMultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/BaseMultivariateSimpleBoundsOptimizer.java
@@ -33,7 +33,7 @@
  * @version $Id$
  * @since 3.0
  */
-public interface BaseSimpleBoundsMultivariateRealOptimizer<FUNC extends MultivariateFunction>
+public interface BaseMultivariateSimpleBoundsOptimizer<FUNC extends MultivariateFunction>
     extends BaseMultivariateRealOptimizer<FUNC> {
     /**
      * Optimize an objective function.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
index 05a6a2b..17d6c5e 100644
--- a/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/DifferentiableMultivariateRealOptimizer.java
@@ -33,4 +33,4 @@
  * @since 2.0
  */
 public interface DifferentiableMultivariateRealOptimizer
-    extends BaseMultivariateRealOptimizer<DifferentiableMultivariateFunction> {}
+    extends BaseMultivariateOptimizer<DifferentiableMultivariateFunction> {}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java
index 8146a6b..4980e6f 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultivariateRealOptimizer.java
@@ -31,4 +31,4 @@
  * @since 2.0
  */
 public interface MultivariateRealOptimizer
-    extends BaseMultivariateRealOptimizer<MultivariateFunction> {}
+    extends BaseMultivariateOptimizer<MultivariateFunction> {}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
index 5f1e2fa..0efabee 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java
@@ -50,7 +50,7 @@
  * @since 3.0
  */
 public class BOBYQAOptimizer
-    extends BaseAbstractSimpleBoundsScalarOptimizer<MultivariateFunction>
+    extends BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>
     implements MultivariateRealOptimizer {
     /** Minimum dimension of the problem: {@value} */
     public static final int MINIMUM_PROBLEM_DIMENSION = 2;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
index 39ea815..a141037 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/CMAESOptimizer.java
@@ -81,7 +81,7 @@
  */
 
 public class CMAESOptimizer
-    extends BaseAbstractScalarOptimizer<MultivariateFunction>
+    extends BaseAbstractMultivariateOptimizer<MultivariateFunction>
     implements MultivariateRealOptimizer {
     /** Default value for {@link #checkFeasableCount}: {@value}. */
     public static final int DEFAULT_CHECKFEASABLECOUNT = 0;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java
index ff79331..487cfa4 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/PowellOptimizer.java
@@ -46,7 +46,7 @@
  * @since 2.2
  */
 public class PowellOptimizer
-    extends BaseAbstractScalarOptimizer<MultivariateFunction>
+    extends BaseAbstractMultivariateOptimizer<MultivariateFunction>
     implements MultivariateRealOptimizer {
     /**
      * Minimum relative tolerance.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java b/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java
index 0fe0265..da88fa3 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java
@@ -84,7 +84,7 @@
  * @since 3.0
  */
 public class SimplexOptimizer
-    extends BaseAbstractScalarOptimizer<MultivariateFunction>
+    extends BaseAbstractMultivariateOptimizer<MultivariateFunction>
     implements MultivariateRealOptimizer {
     /** Simplex. */
     private AbstractSimplex simplex;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
index 094cc0b..f284a93 100644
--- a/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java
@@ -382,7 +382,7 @@
         }
 
         /** {@inheritDoc} */
-        public void init(double t0, double[] y0, double t) {
+        public void init(double t0, double[] y0, double time) {
             // nothing to do
         }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
index d460f82..9ded318 100644
--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
@@ -58,7 +58,7 @@
      * @see #create()
      * @see #createOrthogonal()
      */
-    public FastCosineTransformer(final boolean orthogonal) {
+    private FastCosineTransformer(final boolean orthogonal) {
         this.orthogonal = orthogonal;
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
index a28d61c..02dbe84 100644
--- a/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastCosineTransformer.java
@@ -25,7 +25,6 @@
 import org.apache.commons.math.exception.NonMonotonicSequenceException;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
-import org.apache.commons.math.transform.FastFourierTransformer.DftNormalization;
 import org.apache.commons.math.util.ArithmeticUtils;
 import org.apache.commons.math.util.FastMath;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java
index 61e09b1..f6e36ba 100644
--- a/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java
+++ b/src/main/java/org/apache/commons/math/transform/FastSineTransformer.java
@@ -25,7 +25,6 @@
 import org.apache.commons.math.exception.NonMonotonicSequenceException;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
-import org.apache.commons.math.transform.FastFourierTransformer.DftNormalization;
 import org.apache.commons.math.util.ArithmeticUtils;
 import org.apache.commons.math.util.FastMath;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
index c3654ee..96087cd 100644
--- a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
+++ b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
@@ -98,7 +98,7 @@
     private RealMatrix cachedVt;
 
     /** Internally used epsilon criteria. */
-    private final double epsilon = 1e-16;
+    private final double epsilon = 1e-12;
 
     /**
      * Calculates the eigen decomposition of the given real matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/linear/RealVector.java b/src/main/java/org/apache/commons/math3/linear/RealVector.java
index f05ea4d..184b162 100644
--- a/src/main/java/org/apache/commons/math3/linear/RealVector.java
+++ b/src/main/java/org/apache/commons/math3/linear/RealVector.java
@@ -1088,7 +1088,7 @@
      * not equal to this {@code RealVector} instance.
      */
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(Object other) {
         throw new UnsupportedOperationException();
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
index e07cfc5..0f67f36 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
@@ -27,14 +27,13 @@
 import java.util.List;
 import java.util.Set;
 
-import odk.lang.FastMath;
-
 import org.apache.commons.math3.linear.Array2DRowRealMatrix;
 import org.apache.commons.math3.linear.MatrixUtils;
 import org.apache.commons.math3.linear.RealMatrix;
 import org.apache.commons.math3.linear.RealVector;
 import org.apache.commons.math3.optimization.GoalType;
 import org.apache.commons.math3.optimization.PointValuePair;
+import org.apache.commons.math3.util.FastMath;
 import org.apache.commons.math3.util.Precision;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
index 1d59d19..b37dd43 100644
--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
@@ -17,17 +17,17 @@
 
 package org.apache.commons.math3.optimization.fitting;
 
-import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
 import org.apache.commons.math3.analysis.function.HarmonicOscillator;
-import org.apache.commons.math3.exception.ZeroException;
-import org.apache.commons.math3.exception.NumberIsTooSmallException;
 import org.apache.commons.math3.exception.MathIllegalStateException;
+import org.apache.commons.math3.exception.NumberIsTooSmallException;
+import org.apache.commons.math3.exception.ZeroException;
 import org.apache.commons.math3.exception.util.LocalizedFormats;
+import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
 import org.apache.commons.math3.util.FastMath;
 
 /**
  * Class that implements a curve fitting specialized for sinusoids.
- *
+ * <p>
  * Harmonic fitting is a very simple case of curve fitting. The
  * estimated coefficients are the amplitude a, the pulsation &omega; and
  * the phase &phi;: <code>f (t) = a cos (&omega; t + &phi;)</code>. They are
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java
index 43a80f6..ace0e48 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiator.java
@@ -25,10 +25,10 @@
 public interface UnivariateDifferentiator {
 
     /** Create an implementation of a differential for a
-     * {@link UnivariateDifferentiable differentiable function}.
+     * {@link UnivariateDifferentiableFunction differentiable function}.
      * @param function function to differentiate
      * @return differential function
      */
-    UnivariateDifferentiable differentiate(UnivariateFunction function);
+    UnivariateDifferentiableFunction differentiate(UnivariateFunction function);
 
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java
index 0894546..2a5d079 100644
--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java
+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java
@@ -26,7 +26,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.ParametricUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 import org.apache.commons.math3.util.MathUtils;
 
@@ -38,7 +38,7 @@
  *
  * @version $Id$
  */
-public class PolynomialFunction implements UnivariateDifferentiable, DifferentiableUnivariateFunction, Serializable {
+public class PolynomialFunction implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction, Serializable {
     /**
      * Serialization identifier
      */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java
index ff34f37..875fdc0 100644
--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java
+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialSplineFunction.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.exception.OutOfRangeException;
 import org.apache.commons.math3.exception.NumberIsTooSmallException;
 import org.apache.commons.math3.exception.DimensionMismatchException;
@@ -63,7 +63,7 @@
  *
  * @version $Id$
  */
-public class PolynomialSplineFunction implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class PolynomialSplineFunction implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /**
      * Spline segment interval delimiters (knots).
      * Size is n + 1 for n segments.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Acos.java b/src/main/java/org/apache/commons/math3/analysis/function/Acos.java
index 317ed08..2e422be 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Acos.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Acos.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Acos implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Acos implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.acos(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Acosh.java b/src/main/java/org/apache/commons/math3/analysis/function/Acosh.java
index 25e0bcf..2d67a3d 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Acosh.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Acosh.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Acosh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Acosh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.acosh(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Asin.java b/src/main/java/org/apache/commons/math3/analysis/function/Asin.java
index 72d656c..13a0ddb 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Asin.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Asin.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Asin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Asin implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.asin(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Asinh.java b/src/main/java/org/apache/commons/math3/analysis/function/Asinh.java
index dd627ef..18bc656 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Asinh.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Asinh.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Asinh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Asinh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.asinh(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Atan.java b/src/main/java/org/apache/commons/math3/analysis/function/Atan.java
index 4378a69..f7d6fe0 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Atan.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Atan.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Atan implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Atan implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.atan(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Atanh.java b/src/main/java/org/apache/commons/math3/analysis/function/Atanh.java
index df1f75f..1895856 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Atanh.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Atanh.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Atanh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Atanh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.atanh(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java b/src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java
index 407c62d..9ef7f28 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Cbrt.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Cbrt implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Cbrt implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.cbrt(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Constant.java b/src/main/java/org/apache/commons/math3/analysis/function/Constant.java
index 7244f7d..968164b 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Constant.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Constant.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.FunctionUtils;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 
 /**
  * Constant function.
@@ -29,7 +29,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Constant implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Constant implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** Constant. */
     private final double c;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Cos.java b/src/main/java/org/apache/commons/math3/analysis/function/Cos.java
index 4aff02d..d371d36 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Cos.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Cos.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Cos implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Cos implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.cos(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Cosh.java b/src/main/java/org/apache/commons/math3/analysis/function/Cosh.java
index df1bbe2..6032cd9 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Cosh.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Cosh.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.FunctionUtils;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Cosh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Cosh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.cosh(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Exp.java b/src/main/java/org/apache/commons/math3/analysis/function/Exp.java
index 33f5d25..bfd958b 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Exp.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Exp.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Exp implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Exp implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.exp(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Expm1.java b/src/main/java/org/apache/commons/math3/analysis/function/Expm1.java
index 9761761..dbc321a 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Expm1.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Expm1.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Expm1 implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Expm1 implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.expm1(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java b/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java
index a46361a..13c1d07 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Gaussian.java
@@ -24,7 +24,7 @@
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.ParametricUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.exception.NotStrictlyPositiveException;
 import org.apache.commons.math3.exception.NullArgumentException;
 import org.apache.commons.math3.exception.DimensionMismatchException;
@@ -38,7 +38,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Gaussian implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Gaussian implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** Mean. */
     private final double mean;
     /** Inverse of the standard deviation. */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java b/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java
index 523ae6c..85f4267 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/HarmonicOscillator.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math3.analysis.ParametricUnivariateFunction;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.exception.NullArgumentException;
 import org.apache.commons.math3.util.FastMath;
@@ -34,7 +34,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class HarmonicOscillator implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class HarmonicOscillator implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** Amplitude. */
     private final double amplitude;
     /** Angular frequency. */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Identity.java b/src/main/java/org/apache/commons/math3/analysis/function/Identity.java
index c21eee9..fb7d73d 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Identity.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Identity.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.FunctionUtils;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 
 /**
  * Identity function.
@@ -29,7 +29,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Identity implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Identity implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return x;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Inverse.java b/src/main/java/org/apache/commons/math3/analysis/function/Inverse.java
index e37dce6..fa8aed5 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Inverse.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Inverse.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 
 /**
  * Inverse function.
@@ -29,7 +29,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Inverse implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Inverse implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return 1 / x;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Log.java b/src/main/java/org/apache/commons/math3/analysis/function/Log.java
index fc45682..88d5113 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Log.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Log.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Log implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Log implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.log(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Log10.java b/src/main/java/org/apache/commons/math3/analysis/function/Log10.java
index e59d3d4..cf616be 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Log10.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Log10.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Log10 implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Log10 implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
 
     /** {@inheritDoc} */
     public double value(double x) {
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Log1p.java b/src/main/java/org/apache/commons/math3/analysis/function/Log1p.java
index 1b11aeb..d2d3b9a 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Log1p.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Log1p.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Log1p implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Log1p implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.log1p(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java b/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java
index 10316e4..9deb8f5 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Logistic.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.ParametricUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.exception.NotStrictlyPositiveException;
 import org.apache.commons.math3.exception.NullArgumentException;
 import org.apache.commons.math3.exception.DimensionMismatchException;
@@ -35,7 +35,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Logistic implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Logistic implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** Lower asymptote. */
     private final double a;
     /** Upper asymptote. */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Logit.java b/src/main/java/org/apache/commons/math3/analysis/function/Logit.java
index bfe8c4b..ea435b1 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Logit.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Logit.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math3.analysis.ParametricUnivariateFunction;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.exception.NullArgumentException;
 import org.apache.commons.math3.exception.OutOfRangeException;
@@ -36,7 +36,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Logit implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Logit implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** Lower bound. */
     private final double lo;
     /** Higher bound. */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Minus.java b/src/main/java/org/apache/commons/math3/analysis/function/Minus.java
index 7c86cb1..0402c68 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Minus.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Minus.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.FunctionUtils;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 
 /**
  * Minus function.
@@ -29,7 +29,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Minus implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Minus implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return -x;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Power.java b/src/main/java/org/apache/commons/math3/analysis/function/Power.java
index 2d5f743..cc9dc38 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Power.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Power.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Power implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Power implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** Power. */
     private final double p;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java b/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java
index a39d06d..4da36d6 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java
@@ -24,7 +24,7 @@
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.ParametricUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.exception.NullArgumentException;
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.util.FastMath;
@@ -39,7 +39,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Sigmoid implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Sigmoid implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** Lower asymptote. */
     private final double lo;
     /** Higher asymptote. */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Sin.java b/src/main/java/org/apache/commons/math3/analysis/function/Sin.java
index df01287..ed80f0e 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Sin.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sin.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.FunctionUtils;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Sin implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.sin(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Sinc.java b/src/main/java/org/apache/commons/math3/analysis/function/Sinc.java
index 9bdcbbe..a8d5560 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Sinc.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sinc.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.FunctionUtils;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -35,7 +35,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Sinc implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Sinc implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /**
      * Value below which the computations are done using Taylor series.
      * <p>
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Sinh.java b/src/main/java/org/apache/commons/math3/analysis/function/Sinh.java
index e9f1963..121ce80 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Sinh.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sinh.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.FunctionUtils;
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Sinh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Sinh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.sinh(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java b/src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java
index 8808e74..cbb8900 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sqrt.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Sqrt implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Sqrt implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.sqrt(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Tan.java b/src/main/java/org/apache/commons/math3/analysis/function/Tan.java
index 220623e..3a8d45c 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Tan.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Tan.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Tan implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Tan implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.tan(x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Tanh.java b/src/main/java/org/apache/commons/math3/analysis/function/Tanh.java
index 643b8a4..4eed9c8 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Tanh.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Tanh.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math3.analysis.UnivariateFunction;
 import org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.util.FastMath;
 
 /**
@@ -30,7 +30,7 @@
  * @since 3.0
  * @version $Id$
  */
-public class Tanh implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
+public class Tanh implements UnivariateDifferentiableFunction, DifferentiableUnivariateFunction {
     /** {@inheritDoc} */
     public double value(double x) {
         return FastMath.tanh(x);
<end>
<start>
diff --git a/src/test/java/org/apache/commons/math3/analysis/QuinticFunction.java b/src/test/java/org/apache/commons/math3/analysis/QuinticFunction.java
index 69f0cbf..2d7b4eb 100644
--- a/src/test/java/org/apache/commons/math3/analysis/QuinticFunction.java
+++ b/src/test/java/org/apache/commons/math3/analysis/QuinticFunction.java
@@ -17,14 +17,14 @@
 package org.apache.commons.math3.analysis;
 
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 
 /**
  * Auxiliary class for testing solvers.
  *
  * @version $Id$
  */
-public class QuinticFunction implements UnivariateDifferentiable {
+public class QuinticFunction implements UnivariateDifferentiableFunction {
 
     /* Evaluate quintic.
      * @see org.apache.commons.math3.UnivariateFunction#value(double)
<end>
<start>
diff --git a/src/test/java/org/apache/commons/math3/analysis/XMinus5Function.java b/src/test/java/org/apache/commons/math3/analysis/XMinus5Function.java
index 1503e24..f08970b 100644
--- a/src/test/java/org/apache/commons/math3/analysis/XMinus5Function.java
+++ b/src/test/java/org/apache/commons/math3/analysis/XMinus5Function.java
@@ -17,14 +17,14 @@
 package org.apache.commons.math3.analysis;
 
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 
 /**
  * Auxiliary class for testing solvers.
  *
  * @version $Id$
  */
-public class XMinus5Function implements UnivariateDifferentiable {
+public class XMinus5Function implements UnivariateDifferentiableFunction {
 
     /* Evaluate x - 5 fuction.
      * @see org.apache.commons.math3.UnivariateFunction#value(double)
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java b/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java
index 592fe0b..548d251 100644
--- a/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java
+++ b/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java
@@ -24,8 +24,6 @@
 
 import org.apache.commons.math3.distribution.IntegerDistribution;
 import org.apache.commons.math3.distribution.RealDistribution;
-import org.apache.commons.math3.exception.NotStrictlyPositiveException;
-import org.apache.commons.math3.exception.MathIllegalArgumentException;
 
 /**
  * Generates random deviates and other random data using a {@link RandomGenerator}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java
index ad2690b..0b5be88 100644
--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java
+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java
@@ -20,7 +20,6 @@
 import org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.exception.NoDataException;
-import org.apache.commons.math3.exception.NumberIsTooSmallException;
 import org.apache.commons.math3.exception.NonMonotonicSequenceException;
 import org.apache.commons.math3.util.MathArrays;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolator.java b/src/main/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolator.java
index e584ef8..3e1c96c 100644
--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolator.java
+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/DividedDifferenceInterpolator.java
@@ -20,7 +20,6 @@
 import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;
 import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;
 import org.apache.commons.math3.exception.DimensionMismatchException;
-import org.apache.commons.math3.exception.NoDataException;
 import org.apache.commons.math3.exception.NumberIsTooSmallException;
 import org.apache.commons.math3.exception.NonMonotonicSequenceException;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/events/EventState.java b/src/main/java/org/apache/commons/math4/ode/events/EventState.java
index f4abfb3..b89b00d 100644
--- a/src/main/java/org/apache/commons/math4/ode/events/EventState.java
+++ b/src/main/java/org/apache/commons/math4/ode/events/EventState.java
@@ -414,7 +414,7 @@
         /** Simple constructor.
          * @param exception exception to wrap
          */
-        public LocalMaxCountExceededException(final MaxCountExceededException exception) {
+        LocalMaxCountExceededException(final MaxCountExceededException exception) {
             wrapped = exception;
         }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/FDistribution.java b/src/main/java/org/apache/commons/math4/distribution/FDistribution.java
index c34d45f..12e59dc 100644
--- a/src/main/java/org/apache/commons/math4/distribution/FDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/FDistribution.java
@@ -305,16 +305,6 @@
         return Double.POSITIVE_INFINITY;
     }
 
-    /** {@inheritDoc} */
-    public boolean isSupportLowerBoundInclusive() {
-        return false;
-    }
-
-    /** {@inheritDoc} */
-    public boolean isSupportUpperBoundInclusive() {
-        return false;
-    }
-
     /**
      * {@inheritDoc}
      *
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
index 92913bd..9079894 100644
--- a/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/UniformRealDistribution.java
@@ -213,16 +213,6 @@
         return upper;
     }
 
-    /** {@inheritDoc} */
-    public boolean isSupportLowerBoundInclusive() {
-        return true;
-    }
-
-    /** {@inheritDoc} */
-    public boolean isSupportUpperBoundInclusive() {
-        return true;
-    }
-
     /**
      * {@inheritDoc}
      *
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/exception/util/LocalizedFormats.java b/src/main/java/org/apache/commons/math4/exception/util/LocalizedFormats.java
index ebac0d3..373bc19 100644
--- a/src/main/java/org/apache/commons/math4/exception/util/LocalizedFormats.java
+++ b/src/main/java/org/apache/commons/math4/exception/util/LocalizedFormats.java
@@ -129,8 +129,6 @@
     INITIAL_CAPACITY_NOT_POSITIVE("initial capacity ({0}) is not positive"),
     INITIAL_COLUMN_AFTER_FINAL_COLUMN("initial column {1} after final column {0}"),
     INITIAL_ROW_AFTER_FINAL_ROW("initial row {1} after final row {0}"),
-    @Deprecated
-    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE("input data comes from unsupported datasource: {0}, supported sources: {1}, {2}"),
     INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES("instance of class {0} not comparable to existing values"),
     INSUFFICIENT_DATA("insufficient data"),
     INSUFFICIENT_DATA_FOR_T_STATISTIC("insufficient data for t statistic, needs at least 2, got {0}"),
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java
index ac99111..d9e6a78 100644
--- a/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java
+++ b/src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunctionNewtonForm.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math3.analysis.polynomials;
 
 import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
-import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
+import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.exception.NoDataException;
 import org.apache.commons.math3.exception.util.LocalizedFormats;
@@ -35,7 +35,7 @@
  * @version $Id$
  * @since 1.2
  */
-public class PolynomialFunctionNewtonForm implements UnivariateDifferentiable {
+public class PolynomialFunctionNewtonForm implements UnivariateDifferentiableFunction {
 
     /**
      * The coefficients of the polynomial, ordered by degree -- i.e.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
index acaf826..27c21fb 100644
--- a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
+++ b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
@@ -97,7 +97,6 @@
     EMPTY_SELECTED_ROW_INDEX_ARRAY("empty selected row index array"),
     EMPTY_STRING_FOR_IMAGINARY_CHARACTER("empty string for imaginary character"),
     ENDPOINTS_NOT_AN_INTERVAL("endpoints do not specify an interval: [{0}, {1}]"),
-    ENTRY("entry {0}"),
     EQUAL_VERTICES_IN_SIMPLEX("equal vertices {0} and {1} in simplex configuration"),
     EULER_ANGLES_SINGULARITY("Euler angles singularity"),
     EVALUATION("evaluation"), /* keep */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
index 881e118..432d9ed 100644
--- a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
+++ b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
@@ -976,5 +976,6 @@
         throws OutOfRangeException;
 
     /** {@inheritDoc} */
-    public abstract void setEntry(int row, int column, double value);
+    public abstract void setEntry(int row, int column, double value)
+        throws OutOfRangeException;
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/optimization/package-info.java b/src/main/java/org/apache/commons/math3/optimization/package-info.java
index 232aa07..1e88992 100644
--- a/src/main/java/org/apache/commons/math3/optimization/package-info.java
+++ b/src/main/java/org/apache/commons/math3/optimization/package-info.java
@@ -70,5 +70,3 @@
  *
  */
 package org.apache.commons.math3.optimization;
-import org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;
-
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 5c04a06..608df0e 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -391,7 +391,7 @@
      * guess).
      * Too small values might however lead to early termination.
      */
-    public class Sigma implements OptimizationData {
+    public static class Sigma implements OptimizationData {
         /** Sigma values. */
         private final double[] sigma;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
index 76ac185..5d8a992 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java
@@ -186,7 +186,7 @@
         }
 
         // build the edges
-        List<Edge> edges = new ArrayList<Edge>();
+        List<Edge> edges = new ArrayList<Edge>(n);
         for (int i = 0; i < n; ++i) {
 
             // get the endpoints of the edge
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java
index 33d0d8d..e4bc54a 100644
--- a/src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizer.java
@@ -119,7 +119,7 @@
             residualsWeights[i] = weightMatrix.getEntry(i, i);
         }
 
-        double[] currentPoint = getStartPoint();
+        final double[] currentPoint = getStartPoint();
 
         // iterate until convergence is reached
         PointVectorValuePair current = null;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java b/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java
index 3df078b..4b72046 100644
--- a/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java
+++ b/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java
@@ -930,7 +930,7 @@
      * @return the result.
      * @since 3.1
      */
-    public double compute(MathArrays.Function f) {
+    public synchronized double compute(MathArrays.Function f) {
         return f.evaluate(internalArray, startIndex, numElements);
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java
index 36a9da2..a973f81 100644
--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java
+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolator.java
@@ -20,7 +20,6 @@
 import org.apache.commons.math3.exception.NoDataException;
 import org.apache.commons.math3.exception.NonMonotonicSequenceException;
 import org.apache.commons.math3.exception.NullArgumentException;
-import org.apache.commons.math3.exception.NumberIsTooSmallException;
 import org.apache.commons.math3.util.MathArrays;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java b/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java
index b9f0b0e..bbc7343 100644
--- a/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java
@@ -35,7 +35,7 @@
  * from distribution to distribution.
  *
  */
-public abstract class AbstractIntegerDistribution implements IntegerDistribution, Serializable {
+public abstract class AbstractIntegerDistribution implements DiscreteDistribution, Serializable {
     /** Serializable version identifier */
     private static final long serialVersionUID = 20160318L;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java b/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java
index 237fa26..b8dccbb 100644
--- a/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java
+++ b/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java
@@ -103,7 +103,7 @@
 
     /** {@inheritDoc} */
     @Override
-    public DiagonalMatrix copy() {
+    public RealMatrix copy() {
         return new DiagonalMatrix(data);
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/MultistepIntegrator.java b/src/main/java/org/apache/commons/math4/ode/MultistepIntegrator.java
index 6f0400c..b415dd1 100644
--- a/src/main/java/org/apache/commons/math4/ode/MultistepIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/MultistepIntegrator.java
@@ -252,7 +252,7 @@
             // this is the expected nominal interruption of the start integrator
 
             // count the evaluations used by the starter
-            getEvaluationsCounter().incrementCount(starter.getEvaluations());
+            getCounter().increment(starter.getEvaluations());
 
         }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java
index 5a44288..19ca893 100644
--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java
+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/BicubicSplineInterpolatingFunction.java
@@ -293,7 +293,7 @@
         final int r = Arrays.binarySearch(val, c);
 
         if (r == -1 ||
-            r == -val.length) {
+            r == -val.length - 1) {
             throw new OutOfRangeException(c, val[0], val[val.length - 1]);
         }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java
index 35df0a0..2a28164 100644
--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java
+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/GaussIntegratorFactory.java
@@ -20,9 +20,7 @@
 
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.exception.NotStrictlyPositiveException;
-import org.apache.commons.math3.analysis.BivariateFunction;
 import org.apache.commons.math3.util.Pair;
-import org.apache.commons.math3.util.FastMath;
 
 /**
  * Class that provides different ways to compute the nodes and weights to be
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java b/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java
index ffeb30f..9e6562e 100644
--- a/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java
+++ b/src/main/java/org/apache/commons/math3/linear/DiagonalMatrix.java
@@ -300,7 +300,7 @@
     /** {@inheritDoc} */
     @Override
     public RealVector preMultiply(final RealVector v) throws DimensionMismatchException {
-        double[] vectorData = null;
+        final double[] vectorData;
         if (v instanceof ArrayRealVector) {
             vectorData = ((ArrayRealVector) v).getDataRef();
         } else {
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/util/CombinatoricsUtils.java b/src/main/java/org/apache/commons/math3/util/CombinatoricsUtils.java
index 9548d93..d73a1be 100644
--- a/src/main/java/org/apache/commons/math3/util/CombinatoricsUtils.java
+++ b/src/main/java/org/apache/commons/math3/util/CombinatoricsUtils.java
@@ -439,7 +439,7 @@
      * @throws NumberIsTooLargeException if {@code k > n}.
      */
     public static Iterator<int[]> combinationsIterator(int n, int k) {
-        return new Combinations(n, k, Combinations.IterationOrder.LEXICOGRAPHIC).iterator();
+        return new Combinations(n, k).iterator();
     }
 
     /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
index da48dde..e33e9a5 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
@@ -73,7 +73,7 @@
     private static final int DEFAULT_ULPS = 10;
 
     /** The cut-off threshold to zero-out entries. */
-    private static final double CUTOFF_THRESHOLD = 1e-10;
+    private static final double CUTOFF_THRESHOLD = 1e-12;
 
     /** Serializable version identifier. */
     private static final long serialVersionUID = -1369660067587938365L;
<end>
<start>
diff --git a/src/userguide/java/org/apache/commons/math3/userguide/genetics/ImageEvolutionExample.java b/src/userguide/java/org/apache/commons/math3/userguide/genetics/ImageEvolutionExample.java
index f897400..00e2ed0 100644
--- a/src/userguide/java/org/apache/commons/math3/userguide/genetics/ImageEvolutionExample.java
+++ b/src/userguide/java/org/apache/commons/math3/userguide/genetics/ImageEvolutionExample.java
@@ -52,8 +52,8 @@
 @SuppressWarnings("serial")
 public class ImageEvolutionExample {
 
-    public static final int   POPULATION_SIZE  = 50;
-    public static final int   TOURNAMENT_ARITY = 2;
+    public static final int   POPULATION_SIZE  = 40;
+    public static final int   TOURNAMENT_ARITY = 5;
     public static final float MUTATION_RATE    = 0.02f;
     public static final float MUTATION_CHANGE  = 0.1f;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/geometry/Vector.java b/src/main/java/org/apache/commons/math3/geometry/Vector.java
index 20fb6b9..8ab965f 100644
--- a/src/main/java/org/apache/commons/math3/geometry/Vector.java
+++ b/src/main/java/org/apache/commons/math3/geometry/Vector.java
@@ -120,9 +120,7 @@
      * vector is built</p>
      * @param v second vector
      * @return the distance between the instance and p according to the L<sub>2</sub> norm
-     * @deprecated as of 3.3 replaced with {@link Point#distance(Point)}
      */
-    @Deprecated
     double distance(Vector<S> v);
 
     /** Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java
index 2a62b38..2b12c34 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint.java
@@ -73,9 +73,7 @@
     /** Get the offset (oriented distance) of a vector.
      * @param vector vector to check
      * @return offset of the vector
-     * @deprecated as of 3.3, replaced with {@link #getOffset(Point)}
      */
-    @Deprecated
     public double getOffset(Vector<Euclidean1D> vector) {
         return getOffset((Point<Euclidean1D>) vector);
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java
index a0f7765..e57d742 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Vector3D.java
@@ -475,10 +475,7 @@
         return dx + dy + dz;
     }
 
-    /** {@inheritDoc}
-     * @deprecated as of 3.3, replaced with {@link #distance(Point)}
-     */
-    @Deprecated
+    /** {@inheritDoc} */
     public double distance(Vector<Euclidean3D> v) {
         return distance((Point<Euclidean3D>) v);
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java
index eaee92b..ca0d76b 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/Vector2D.java
@@ -294,9 +294,7 @@
     }
 
     /** {@inheritDoc}
-     * @deprecated as of 3.3, replaced with {@link #distance(Point)}
      */
-    @Deprecated
     public double distance(Vector<Euclidean2D> p) {
         return distance((Point<Euclidean2D>) p);
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/spherical/oned/S1Point.java b/src/main/java/org/apache/commons/math4/geometry/spherical/oned/S1Point.java
index d57d02c..e308bf4 100644
--- a/src/main/java/org/apache/commons/math4/geometry/spherical/oned/S1Point.java
+++ b/src/main/java/org/apache/commons/math4/geometry/spherical/oned/S1Point.java
@@ -16,6 +16,7 @@
  */
 package org.apache.commons.math4.geometry.spherical.oned;
 
+import org.apache.commons.numbers.angle.PlaneAngleRadians;
 import org.apache.commons.math4.geometry.Point;
 import org.apache.commons.math4.geometry.Space;
 import org.apache.commons.math4.geometry.euclidean.twod.Cartesian2D;
@@ -48,7 +49,7 @@
      * @see #getAlpha()
      */
     public S1Point(final double alpha) {
-        this(MathUtils.normalizeAngle(alpha, FastMath.PI),
+        this(PlaneAngleRadians.normalizeBetweenZeroAndTwoPi(alpha),
              new Cartesian2D(FastMath.cos(alpha), FastMath.sin(alpha)));
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/NestedLoops.java b/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/NestedLoops.java
index faead92..a0bd47d 100644
--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/NestedLoops.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/NestedLoops.java
@@ -69,7 +69,7 @@
      * @param tolerance tolerance below which points are considered identical
      * @since 3.3
      */
-    public NestedLoops(final double tolerance) {
+    NestedLoops(final double tolerance) {
         this.surrounded = new ArrayList<NestedLoops>();
         this.tolerance  = tolerance;
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/euclidean/oned/IntervalsSet.java b/src/main/java/org/apache/commons/math4/geometry/euclidean/oned/IntervalsSet.java
index e8bd4d4..7d944af 100644
--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/oned/IntervalsSet.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/oned/IntervalsSet.java
@@ -527,7 +527,7 @@
 
         /** Simple constructor.
          */
-        public SubIntervalsIterator() {
+        SubIntervalsIterator() {
 
             current = getFirstIntervalBoundary();
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/ml/neuralnet/oned/NeuronString.java b/src/main/java/org/apache/commons/math3/ml/neuralnet/oned/NeuronString.java
index 20d5c97..db2db63 100644
--- a/src/main/java/org/apache/commons/math3/ml/neuralnet/oned/NeuronString.java
+++ b/src/main/java/org/apache/commons/math3/ml/neuralnet/oned/NeuronString.java
@@ -32,10 +32,6 @@
  * @since 3.3
  */
 public class NeuronString implements Serializable {
-
-    /** Serializable UID. */
-    private static final long serialVersionUID = 20140208L;
-
     /** Underlying network. */
     private final Network network;
     /** Number of neurons. */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/ml/neuralnet/twod/NeuronSquareMesh2D.java b/src/main/java/org/apache/commons/math3/ml/neuralnet/twod/NeuronSquareMesh2D.java
index 5a21dcb..41ccf31 100644
--- a/src/main/java/org/apache/commons/math3/ml/neuralnet/twod/NeuronSquareMesh2D.java
+++ b/src/main/java/org/apache/commons/math3/ml/neuralnet/twod/NeuronSquareMesh2D.java
@@ -42,10 +42,6 @@
  * @since 3.3
  */
 public class NeuronSquareMesh2D implements Serializable {
-
-    /** Serializable UID. */
-    private static final long serialVersionUID = 20140208L;
-
     /** Underlying network. */
     private final Network network;
     /** Number of rows. */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/fitting/AbstractCurveFitter.java b/src/main/java/org/apache/commons/math3/fitting/AbstractCurveFitter.java
index 871efbc..764672c 100644
--- a/src/main/java/org/apache/commons/math3/fitting/AbstractCurveFitter.java
+++ b/src/main/java/org/apache/commons/math3/fitting/AbstractCurveFitter.java
@@ -74,7 +74,7 @@
      * given {@code points}.
      */
     protected LeastSquaresOptimizer getOptimizer() {
-        return LevenbergMarquardtOptimizer.create();
+        return new LevenbergMarquardtOptimizer();
     }
 
     /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/fitting/HarmonicCurveFitter.java b/src/main/java/org/apache/commons/math3/fitting/HarmonicCurveFitter.java
index 0c5462f..6cd3777 100644
--- a/src/main/java/org/apache/commons/math3/fitting/HarmonicCurveFitter.java
+++ b/src/main/java/org/apache/commons/math3/fitting/HarmonicCurveFitter.java
@@ -27,8 +27,6 @@
 import org.apache.commons.math3.exception.util.LocalizedFormats;
 import org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder;
 import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
-import org.apache.commons.math3.fitting.leastsquares.WithMaxIterations;
-import org.apache.commons.math3.fitting.leastsquares.WithStartPoint;
 import org.apache.commons.math3.linear.DiagonalMatrix;
 import org.apache.commons.math3.util.FastMath;
 
@@ -49,9 +47,7 @@
  * @version $Id$
  * @since 3.3
  */
-public class HarmonicCurveFitter extends AbstractCurveFitter
-    implements WithStartPoint<HarmonicCurveFitter>,
-               WithMaxIterations<HarmonicCurveFitter> {
+public class HarmonicCurveFitter extends AbstractCurveFitter {
     /** Parametric function to be fitted. */
     private static final HarmonicOscillator.Parametric FUNCTION = new HarmonicOscillator.Parametric();
     /** Initial guess. */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/fitting/PolynomialCurveFitter.java b/src/main/java/org/apache/commons/math3/fitting/PolynomialCurveFitter.java
index c012e0e..11b3a6e 100644
--- a/src/main/java/org/apache/commons/math3/fitting/PolynomialCurveFitter.java
+++ b/src/main/java/org/apache/commons/math3/fitting/PolynomialCurveFitter.java
@@ -22,8 +22,6 @@
 import org.apache.commons.math3.exception.MathInternalError;
 import org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder;
 import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
-import org.apache.commons.math3.fitting.leastsquares.WithMaxIterations;
-import org.apache.commons.math3.fitting.leastsquares.WithStartPoint;
 import org.apache.commons.math3.linear.DiagonalMatrix;
 
 /**
@@ -39,9 +37,7 @@
  * @version $Id$
  * @since 3.3
  */
-public class PolynomialCurveFitter extends AbstractCurveFitter
-    implements WithStartPoint<PolynomialCurveFitter>,
-               WithMaxIterations<PolynomialCurveFitter> {
+public class PolynomialCurveFitter extends AbstractCurveFitter {
     /** Parametric function to be fitted. */
     private static final PolynomialFunction.Parametric FUNCTION = new PolynomialFunction.Parametric();
     /** Initial guess. */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresProblem.java b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresProblem.java
index 5d40653..bb22d2a 100644
--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresProblem.java
+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/LeastSquaresProblem.java
@@ -1,7 +1,6 @@
 package org.apache.commons.math3.fitting.leastsquares;
 
 import org.apache.commons.math3.exception.DimensionMismatchException;
-import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation;
 import org.apache.commons.math3.linear.RealMatrix;
 import org.apache.commons.math3.linear.RealVector;
 
@@ -13,7 +12,7 @@
  *
  * @version $Id$
  */
-public interface LeastSquaresProblem extends OptimizationProblem<Evaluation> {
+public interface LeastSquaresProblem extends OptimizationProblem<LeastSquaresProblem.Evaluation> {
 
     /**
      * Gets the initial guess.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/fitting/leastsquares/DenseWeightedEvaluation.java b/src/main/java/org/apache/commons/math3/fitting/leastsquares/DenseWeightedEvaluation.java
index d6afa8b..b76e3dc 100644
--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/DenseWeightedEvaluation.java
+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/DenseWeightedEvaluation.java
@@ -59,11 +59,6 @@
         return this.weightSqrt.operate(this.unweighted.getResiduals());
     }
 
-    /** {@inheritDoc} */
-    public RealVector getValue() {
-        return this.weightSqrt.operate(unweighted.getValue());
-    }
-
     /* delegate */
 
     /** {@inheritDoc} */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/fitting/leastsquares/OptimumImpl.java b/src/main/java/org/apache/commons/math3/fitting/leastsquares/OptimumImpl.java
index a028594..8c4ad65 100644
--- a/src/main/java/org/apache/commons/math3/fitting/leastsquares/OptimumImpl.java
+++ b/src/main/java/org/apache/commons/math3/fitting/leastsquares/OptimumImpl.java
@@ -77,11 +77,6 @@
     }
 
     /** {@inheritDoc} */
-    public RealVector getValue() {
-        return value.getValue();
-    }
-
-    /** {@inheritDoc} */
     public RealMatrix getJacobian() {
         return value.getJacobian();
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
index b37dd43..1d59d19 100644
--- a/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java
@@ -17,17 +17,17 @@
 
 package org.apache.commons.math3.optimization.fitting;
 
-import org.apache.commons.math3.analysis.function.HarmonicOscillator;
-import org.apache.commons.math3.exception.MathIllegalStateException;
-import org.apache.commons.math3.exception.NumberIsTooSmallException;
-import org.apache.commons.math3.exception.ZeroException;
-import org.apache.commons.math3.exception.util.LocalizedFormats;
 import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
+import org.apache.commons.math3.analysis.function.HarmonicOscillator;
+import org.apache.commons.math3.exception.ZeroException;
+import org.apache.commons.math3.exception.NumberIsTooSmallException;
+import org.apache.commons.math3.exception.MathIllegalStateException;
+import org.apache.commons.math3.exception.util.LocalizedFormats;
 import org.apache.commons.math3.util.FastMath;
 
 /**
  * Class that implements a curve fitting specialized for sinusoids.
- * <p>
+ *
  * Harmonic fitting is a very simple case of curve fitting. The
  * estimated coefficients are the amplitude a, the pulsation &omega; and
  * the phase &phi;: <code>f (t) = a cos (&omega; t + &phi;)</code>. They are
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java b/src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java
index 6569964..6e0b2a4 100644
--- a/src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java
+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/SimpleUnivariateValueChecker.java
@@ -17,9 +17,9 @@
 
 package org.apache.commons.math3.optimization.univariate;
 
+import org.apache.commons.math3.util.FastMath;
 import org.apache.commons.math3.exception.NotStrictlyPositiveException;
 import org.apache.commons.math3.optimization.AbstractConvergenceChecker;
-import org.apache.commons.math3.util.FastMath;
 
 /**
  * Simple implementation of the
@@ -30,7 +30,7 @@
  * difference between the objective function values is smaller than a
  * threshold or if either the absolute difference between the objective
  * function values is smaller than another threshold.
- * <p>
+ * <br/>
  * The {@link #converged(int,UnivariatePointValuePair,UnivariatePointValuePair)
  * converged} method will also return {@code true} if the number of iterations
  * has been set (see {@link #SimpleUnivariateValueChecker(double,double,int)
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Median.java b/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Median.java
index f042347..2a64fba 100644
--- a/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Median.java
+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Median.java
@@ -80,7 +80,7 @@
 
     /** {@inheritDoc} */
     @Override
-    public Median withEstimationtype(final EstimationType newEstimationType) {
+    public Median withEstimationType(final EstimationType newEstimationType) {
         return new Median(newEstimationType, getNaNStrategy(), getPivotingStrategy());
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/descriptive/rank/Percentile.java b/src/main/java/org/apache/commons/math4/stat/descriptive/rank/Percentile.java
index c05d782..2015d7c 100644
--- a/src/main/java/org/apache/commons/math4/stat/descriptive/rank/Percentile.java
+++ b/src/main/java/org/apache/commons/math4/stat/descriptive/rank/Percentile.java
@@ -434,7 +434,7 @@
      */
     private static double[] copyOf(final double[] values, final int begin, final int length) {
         MathArrays.verifyValues(values, begin, length);
-        return MathArrays.copyOfRange(values, begin, begin + length);
+        return Arrays.copyOfRange(values, begin, begin + length);
     }
 
     /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/util/ResizableDoubleArray.java b/src/main/java/org/apache/commons/math4/util/ResizableDoubleArray.java
index 6377141..7d9547c 100644
--- a/src/main/java/org/apache/commons/math4/util/ResizableDoubleArray.java
+++ b/src/main/java/org/apache/commons/math4/util/ResizableDoubleArray.java
@@ -287,7 +287,7 @@
         numElements = 0;
         startIndex = 0;
 
-        if (data != null && data.length > 1) {
+        if (data != null && data.length > 0) {
             addElements(data);
         }
     }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math3/util/FastMath.java b/src/main/java/org/apache/commons/math3/util/FastMath.java
index 9126df3..5178215 100644
--- a/src/main/java/org/apache/commons/math3/util/FastMath.java
+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java
@@ -873,7 +873,6 @@
          * intPartA will have the upper 22 bits, intPartB will have the lower
          * 52 bits.
          */
-        System.out.println("Computing exp(" + x + ")");
         if (x < 0.0) {
             intVal = (int) -x;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/analysis/differentiation/SparseGradient.java b/src/main/java/org/apache/commons/math4/analysis/differentiation/SparseGradient.java
index 643a975..c642fed 100644
--- a/src/main/java/org/apache/commons/math4/analysis/differentiation/SparseGradient.java
+++ b/src/main/java/org/apache/commons/math4/analysis/differentiation/SparseGradient.java
@@ -28,7 +28,7 @@
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * First derivative computation with large number of variables.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/analysis/function/Gaussian.java b/src/main/java/org/apache/commons/math4/analysis/function/Gaussian.java
index e703ed3..08dcac0 100644
--- a/src/main/java/org/apache/commons/math4/analysis/function/Gaussian.java
+++ b/src/main/java/org/apache/commons/math4/analysis/function/Gaussian.java
@@ -26,7 +26,7 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * <a href="http://en.wikipedia.org/wiki/Gaussian_function">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/analysis/integration/SimpsonIntegrator.java b/src/main/java/org/apache/commons/math4/analysis/integration/SimpsonIntegrator.java
index 2ac7fa7..0ede25e 100644
--- a/src/main/java/org/apache/commons/math4/analysis/integration/SimpsonIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/analysis/integration/SimpsonIntegrator.java
@@ -16,11 +16,9 @@
  */
 package org.apache.commons.math4.analysis.integration;
 
-import org.apache.commons.math4.exception.MaxCountExceededException;
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.NumberIsTooSmallException;
-import org.apache.commons.math4.exception.TooManyEvaluationsException;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/analysis/interpolation/AkimaSplineInterpolator.java b/src/main/java/org/apache/commons/math4/analysis/interpolation/AkimaSplineInterpolator.java
index 100b927..089a7ac 100644
--- a/src/main/java/org/apache/commons/math4/analysis/interpolation/AkimaSplineInterpolator.java
+++ b/src/main/java/org/apache/commons/math4/analysis/interpolation/AkimaSplineInterpolator.java
@@ -25,7 +25,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Computes a cubic spline interpolation for the data set using the Akima
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/analysis/solvers/BracketingNthOrderBrentSolver.java b/src/main/java/org/apache/commons/math4/analysis/solvers/BracketingNthOrderBrentSolver.java
index e519f02..8a185bb 100644
--- a/src/main/java/org/apache/commons/math4/analysis/solvers/BracketingNthOrderBrentSolver.java
+++ b/src/main/java/org/apache/commons/math4/analysis/solvers/BracketingNthOrderBrentSolver.java
@@ -24,7 +24,7 @@
 import org.apache.commons.math4.exception.NumberIsTooSmallException;
 import org.apache.commons.math4.exception.TooManyEvaluationsException;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * This class implements a modification of the <a
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math4/analysis/solvers/BrentSolver.java
index 3b9f322..9e1e551 100644
--- a/src/main/java/org/apache/commons/math4/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math4/analysis/solvers/BrentSolver.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.TooManyEvaluationsException;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * This class implements the <a href="http://mathworld.wolfram.com/BrentsMethod.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/analysis/solvers/LaguerreSolver.java b/src/main/java/org/apache/commons/math4/analysis/solvers/LaguerreSolver.java
index ab01885..f0ecdc8 100644
--- a/src/main/java/org/apache/commons/math4/analysis/solvers/LaguerreSolver.java
+++ b/src/main/java/org/apache/commons/math4/analysis/solvers/LaguerreSolver.java
@@ -16,9 +16,9 @@
  */
 package org.apache.commons.math4.analysis.solvers;
 
+import org.apache.commons.numbers.complex.Complex;
+import org.apache.commons.numbers.complex.ComplexUtils;
 import org.apache.commons.math4.analysis.polynomials.PolynomialFunction;
-import org.apache.commons.math4.complex.Complex;
-import org.apache.commons.math4.complex.ComplexUtils;
 import org.apache.commons.math4.exception.NoBracketingException;
 import org.apache.commons.math4.exception.NoDataException;
 import org.apache.commons.math4.exception.NullArgumentException;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/complex/Quaternion.java b/src/main/java/org/apache/commons/math4/complex/Quaternion.java
index 505b64e..0394d18 100644
--- a/src/main/java/org/apache/commons/math4/complex/Quaternion.java
+++ b/src/main/java/org/apache/commons/math4/complex/Quaternion.java
@@ -24,7 +24,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * This class implements <a href="http://mathworld.wolfram.com/Quaternion.html">
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EmpiricalDistribution.java
similarity index 98%
rename from src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java
rename to src/main/java/org/apache/commons/math4/distribution/EmpiricalDistribution.java
index 5439cd2..f898d95 100644
--- a/src/main/java/org/apache/commons/math4/random/EmpiricalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EmpiricalDistribution.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.commons.math4.random;
+package org.apache.commons.math4.distribution;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -28,10 +28,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.math4.distribution.AbstractRealDistribution;
-import org.apache.commons.math4.distribution.ConstantRealDistribution;
-import org.apache.commons.math4.distribution.NormalDistribution;
-import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.exception.MathIllegalStateException;
 import org.apache.commons.math4.exception.MathInternalError;
 import org.apache.commons.math4.exception.NullArgumentException;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/fitting/leastsquares/EvaluationRmsChecker.java b/src/main/java/org/apache/commons/math4/fitting/leastsquares/EvaluationRmsChecker.java
index 86b8463..3872323 100644
--- a/src/main/java/org/apache/commons/math4/fitting/leastsquares/EvaluationRmsChecker.java
+++ b/src/main/java/org/apache/commons/math4/fitting/leastsquares/EvaluationRmsChecker.java
@@ -18,7 +18,7 @@
 
 import org.apache.commons.math4.fitting.leastsquares.LeastSquaresProblem.Evaluation;
 import org.apache.commons.math4.optim.ConvergenceChecker;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Check if an optimization has converged based on the change in computed RMS.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/fitting/leastsquares/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math4/fitting/leastsquares/LevenbergMarquardtOptimizer.java
index c7a721a..9e256d1 100644
--- a/src/main/java/org/apache/commons/math4/fitting/leastsquares/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math4/fitting/leastsquares/LevenbergMarquardtOptimizer.java
@@ -26,7 +26,7 @@
 import org.apache.commons.math4.optim.ConvergenceChecker;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.Incrementor;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/fraction/BigFraction.java b/src/main/java/org/apache/commons/math4/fraction/BigFraction.java
index 69e8dc8..a3da8c0 100644
--- a/src/main/java/org/apache/commons/math4/fraction/BigFraction.java
+++ b/src/main/java/org/apache/commons/math4/fraction/BigFraction.java
@@ -26,7 +26,7 @@
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.ZeroException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.util.ArithmeticUtils;
+import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/fraction/Fraction.java b/src/main/java/org/apache/commons/math4/fraction/Fraction.java
index 39eba8d..834573c 100644
--- a/src/main/java/org/apache/commons/math4/fraction/Fraction.java
+++ b/src/main/java/org/apache/commons/math4/fraction/Fraction.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math4.exception.MathArithmeticException;
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.util.ArithmeticUtils;
+import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/euclidean/oned/IntervalsSet.java b/src/main/java/org/apache/commons/math4/geometry/euclidean/oned/IntervalsSet.java
index 1b58cd9..7282da5 100644
--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/oned/IntervalsSet.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/oned/IntervalsSet.java
@@ -27,7 +27,7 @@
 import org.apache.commons.math4.geometry.partitioning.BSPTree;
 import org.apache.commons.math4.geometry.partitioning.BoundaryProjection;
 import org.apache.commons.math4.geometry.partitioning.SubHyperplane;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /** This class represents a 1D region: a set of intervals.
  * @since 3.0
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/Line.java
index 3173ac2..6b14f6e 100644
--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/Line.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/Line.java
@@ -25,7 +25,7 @@
 import org.apache.commons.math4.geometry.euclidean.oned.Vector1D;
 import org.apache.commons.math4.geometry.partitioning.Embedding;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /** The class represent lines in a three dimensional space.
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/PolygonsSet.java b/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/PolygonsSet.java
index 38b94f4..b006e32 100644
--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/PolygonsSet.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/PolygonsSet.java
@@ -34,7 +34,7 @@
 import org.apache.commons.math4.geometry.partitioning.Side;
 import org.apache.commons.math4.geometry.partitioning.SubHyperplane;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /** This class represents a 2D region: a set of polygons.
  * @since 3.0
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/hull/ConvexHull2D.java b/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/hull/ConvexHull2D.java
index 7356da1..86076ba 100644
--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/hull/ConvexHull2D.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/hull/ConvexHull2D.java
@@ -29,7 +29,7 @@
 import org.apache.commons.math4.geometry.partitioning.Region;
 import org.apache.commons.math4.geometry.partitioning.RegionFactory;
 import org.apache.commons.math4.util.MathArrays;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * This class represents a convex hull in an two-dimensional euclidean space.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/hull/MonotoneChain.java b/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/hull/MonotoneChain.java
index 5746c7f..8497da1 100644
--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/hull/MonotoneChain.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/hull/MonotoneChain.java
@@ -25,7 +25,7 @@
 import org.apache.commons.math4.geometry.euclidean.twod.Line;
 import org.apache.commons.math4.geometry.euclidean.twod.Vector2D;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Implements Andrew's monotone chain method to generate the convex hull of a finite set of
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/partitioning/Characterization.java b/src/main/java/org/apache/commons/math4/geometry/partitioning/Characterization.java
index 90b07f4..93fd171 100644
--- a/src/main/java/org/apache/commons/math4/geometry/partitioning/Characterization.java
+++ b/src/main/java/org/apache/commons/math4/geometry/partitioning/Characterization.java
@@ -19,7 +19,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.math4.exception.MathInternalError;
 import org.apache.commons.math4.geometry.Space;
 
 /** Cut sub-hyperplanes characterization with respect to inside/outside cells.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/spherical/oned/Arc.java b/src/main/java/org/apache/commons/math4/geometry/spherical/oned/Arc.java
index b175250..84c6c5c 100644
--- a/src/main/java/org/apache/commons/math4/geometry/spherical/oned/Arc.java
+++ b/src/main/java/org/apache/commons/math4/geometry/spherical/oned/Arc.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math4.geometry.partitioning.Region.Location;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 
 /** This class represents an arc on a circle.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/spherical/oned/ArcsSet.java b/src/main/java/org/apache/commons/math4/geometry/spherical/oned/ArcsSet.java
index bc1e390..3e33c81 100644
--- a/src/main/java/org/apache/commons/math4/geometry/spherical/oned/ArcsSet.java
+++ b/src/main/java/org/apache/commons/math4/geometry/spherical/oned/ArcsSet.java
@@ -34,7 +34,7 @@
 import org.apache.commons.math4.geometry.partitioning.SubHyperplane;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /** This class represents a region of a circle: a set of arcs.
  * <p>
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/linear/DiagonalMatrix.java b/src/main/java/org/apache/commons/math4/linear/DiagonalMatrix.java
index 56ab4b2..1b35204 100644
--- a/src/main/java/org/apache/commons/math4/linear/DiagonalMatrix.java
+++ b/src/main/java/org/apache/commons/math4/linear/DiagonalMatrix.java
@@ -25,7 +25,7 @@
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Implementation of a diagonal matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/linear/EigenDecomposition.java b/src/main/java/org/apache/commons/math4/linear/EigenDecomposition.java
index f9afeb7..75e9614 100644
--- a/src/main/java/org/apache/commons/math4/linear/EigenDecomposition.java
+++ b/src/main/java/org/apache/commons/math4/linear/EigenDecomposition.java
@@ -24,7 +24,7 @@
 import org.apache.commons.math4.exception.MaxCountExceededException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Calculates the eigen decomposition of a real matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/linear/HessenbergTransformer.java b/src/main/java/org/apache/commons/math4/linear/HessenbergTransformer.java
index e7bf442..c10c41a 100644
--- a/src/main/java/org/apache/commons/math4/linear/HessenbergTransformer.java
+++ b/src/main/java/org/apache/commons/math4/linear/HessenbergTransformer.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math4.linear;
 
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Class transforming a general real matrix to Hessenberg form.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/linear/MatrixUtils.java b/src/main/java/org/apache/commons/math4/linear/MatrixUtils.java
index 9485b7b..cb71b37 100644
--- a/src/main/java/org/apache/commons/math4/linear/MatrixUtils.java
+++ b/src/main/java/org/apache/commons/math4/linear/MatrixUtils.java
@@ -37,7 +37,7 @@
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * A collection of static methods that operate on or return matrices.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/linear/SchurTransformer.java b/src/main/java/org/apache/commons/math4/linear/SchurTransformer.java
index 3d818b4..b836efe 100644
--- a/src/main/java/org/apache/commons/math4/linear/SchurTransformer.java
+++ b/src/main/java/org/apache/commons/math4/linear/SchurTransformer.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math4.exception.MaxCountExceededException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Class transforming a general real matrix to Schur form.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/linear/SingularValueDecomposition.java b/src/main/java/org/apache/commons/math4/linear/SingularValueDecomposition.java
index 65ec195..4d4116e 100644
--- a/src/main/java/org/apache/commons/math4/linear/SingularValueDecomposition.java
+++ b/src/main/java/org/apache/commons/math4/linear/SingularValueDecomposition.java
@@ -19,7 +19,7 @@
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Calculates the compact Singular Value Decomposition of a matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ml/neuralnet/Neuron.java b/src/main/java/org/apache/commons/math4/ml/neuralnet/Neuron.java
index 61b3aa1..409e553 100644
--- a/src/main/java/org/apache/commons/math4/ml/neuralnet/Neuron.java
+++ b/src/main/java/org/apache/commons/math4/ml/neuralnet/Neuron.java
@@ -23,7 +23,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 import org.apache.commons.math4.exception.DimensionMismatchException;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/events/Transformer.java b/src/main/java/org/apache/commons/math4/ode/events/Transformer.java
index f341f35..08e71e2 100644
--- a/src/main/java/org/apache/commons/math4/ode/events/Transformer.java
+++ b/src/main/java/org/apache/commons/math4/ode/events/Transformer.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math4.ode.events;
 
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 
 /** Transformer for {@link EventHandler#g(double, double[]) g functions}.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/sampling/StepNormalizer.java b/src/main/java/org/apache/commons/math4/ode/sampling/StepNormalizer.java
index dfc34fe..edec00c 100644
--- a/src/main/java/org/apache/commons/math4/ode/sampling/StepNormalizer.java
+++ b/src/main/java/org/apache/commons/math4/ode/sampling/StepNormalizer.java
@@ -19,7 +19,7 @@
 
 import org.apache.commons.math4.exception.MaxCountExceededException;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * This class wraps an object implementing {@link FixedStepHandler}
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java
index 04b6ab9..ae8eb8c 100644
--- a/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math4.optim.OptimizationData;
 import org.apache.commons.math4.optim.PointValuePair;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Solves a linear problem using the "Two-Phase Simplex" method.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java
index 02ee664..c435094 100644
--- a/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java
@@ -34,7 +34,7 @@
 import org.apache.commons.math4.linear.RealVector;
 import org.apache.commons.math4.optim.PointValuePair;
 import org.apache.commons.math4.optim.nonlinear.scalar.GoalType;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * A tableau for use in the Simplex method.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/optim/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math4/optim/univariate/BrentOptimizer.java
index 420a919..e1b2d9d 100644
--- a/src/main/java/org/apache/commons/math4/optim/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math4/optim/univariate/BrentOptimizer.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math4.optim.ConvergenceChecker;
 import org.apache.commons.math4.optim.nonlinear.scalar.GoalType;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * For a function defined on some interval {@code (lo, hi)}, this class
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/special/BesselJ.java b/src/main/java/org/apache/commons/math4/special/BesselJ.java
index ad5eddc..ff82161 100644
--- a/src/main/java/org/apache/commons/math4/special/BesselJ.java
+++ b/src/main/java/org/apache/commons/math4/special/BesselJ.java
@@ -21,7 +21,6 @@
 import org.apache.commons.math4.exception.ConvergenceException;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.special.Gamma;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
 
@@ -139,6 +138,7 @@
      * @throws MathIllegalArgumentException if {@code x} is too large relative to {@code order}
      * @throws ConvergenceException if the algorithm fails to converge
      */
+    @Override
     public double value(double x)
         throws MathIllegalArgumentException, ConvergenceException {
         return BesselJ.value(order, x);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/correlation/PearsonsCorrelation.java b/src/main/java/org/apache/commons/math4/stat/correlation/PearsonsCorrelation.java
index b14f8a6..c964d58 100644
--- a/src/main/java/org/apache/commons/math4/stat/correlation/PearsonsCorrelation.java
+++ b/src/main/java/org/apache/commons/math4/stat/correlation/PearsonsCorrelation.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math4.stat.correlation;
 
-import org.apache.commons.math4.distribution.TDistribution;
+import org.apache.commons.statistics.distribution.TDistribution;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.NullArgumentException;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/descriptive/AbstractStorelessUnivariateStatistic.java b/src/main/java/org/apache/commons/math4/stat/descriptive/AbstractStorelessUnivariateStatistic.java
index 599188f..7d9b0d7 100644
--- a/src/main/java/org/apache/commons/math4/stat/descriptive/AbstractStorelessUnivariateStatistic.java
+++ b/src/main/java/org/apache/commons/math4/stat/descriptive/AbstractStorelessUnivariateStatistic.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Abstract base class for implementations of the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/descriptive/MultivariateSummaryStatistics.java b/src/main/java/org/apache/commons/math4/stat/descriptive/MultivariateSummaryStatistics.java
index 39083d0..a161fc8 100644
--- a/src/main/java/org/apache/commons/math4/stat/descriptive/MultivariateSummaryStatistics.java
+++ b/src/main/java/org/apache/commons/math4/stat/descriptive/MultivariateSummaryStatistics.java
@@ -34,7 +34,7 @@
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * <p>Computes summary statistics for a stream of n-tuples added using the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/descriptive/StatisticalSummaryValues.java b/src/main/java/org/apache/commons/math4/stat/descriptive/StatisticalSummaryValues.java
index a83d657..d1aa197 100644
--- a/src/main/java/org/apache/commons/math4/stat/descriptive/StatisticalSummaryValues.java
+++ b/src/main/java/org/apache/commons/math4/stat/descriptive/StatisticalSummaryValues.java
@@ -20,7 +20,7 @@
 
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  *  Value object representing the results of a univariate statistical summary.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math4/stat/descriptive/SummaryStatistics.java
index b255805..91f77fb 100644
--- a/src/main/java/org/apache/commons/math4/stat/descriptive/SummaryStatistics.java
+++ b/src/main/java/org/apache/commons/math4/stat/descriptive/SummaryStatistics.java
@@ -32,7 +32,7 @@
 import org.apache.commons.math4.stat.descriptive.summary.SumOfSquares;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * <p>
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentile.java b/src/main/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentile.java
index c81a4d1..7f3e54d 100644
--- a/src/main/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentile.java
+++ b/src/main/java/org/apache/commons/math4/stat/descriptive/rank/PSquarePercentile.java
@@ -37,7 +37,7 @@
 import org.apache.commons.math4.stat.descriptive.StorelessUnivariateStatistic;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * A {@link StorelessUnivariateStatistic} estimating percentiles using the
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/interval/AgrestiCoullInterval.java b/src/main/java/org/apache/commons/math4/stat/interval/AgrestiCoullInterval.java
index ab740fb..7318ab9 100644
--- a/src/main/java/org/apache/commons/math4/stat/interval/AgrestiCoullInterval.java
+++ b/src/main/java/org/apache/commons/math4/stat/interval/AgrestiCoullInterval.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math4.stat.interval;
 
-import org.apache.commons.math4.distribution.NormalDistribution;
+import org.apache.commons.statistics.distribution.NormalDistribution;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/interval/ClopperPearsonInterval.java b/src/main/java/org/apache/commons/math4/stat/interval/ClopperPearsonInterval.java
index 2e41693..b6a72ff 100644
--- a/src/main/java/org/apache/commons/math4/stat/interval/ClopperPearsonInterval.java
+++ b/src/main/java/org/apache/commons/math4/stat/interval/ClopperPearsonInterval.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math4.stat.interval;
 
-import org.apache.commons.math4.distribution.FDistribution;
+import org.apache.commons.statistics.distribution.FDistribution;
 
 /**
  * Implements the Clopper-Pearson method for creating a binomial proportion confidence interval.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/interval/NormalApproximationInterval.java b/src/main/java/org/apache/commons/math4/stat/interval/NormalApproximationInterval.java
index 57c3946..1f59c8f 100644
--- a/src/main/java/org/apache/commons/math4/stat/interval/NormalApproximationInterval.java
+++ b/src/main/java/org/apache/commons/math4/stat/interval/NormalApproximationInterval.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math4.stat.interval;
 
-import org.apache.commons.math4.distribution.NormalDistribution;
+import org.apache.commons.statistics.distribution.NormalDistribution;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/interval/WilsonScoreInterval.java b/src/main/java/org/apache/commons/math4/stat/interval/WilsonScoreInterval.java
index 388442f..7facd61 100644
--- a/src/main/java/org/apache/commons/math4/stat/interval/WilsonScoreInterval.java
+++ b/src/main/java/org/apache/commons/math4/stat/interval/WilsonScoreInterval.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math4.stat.interval;
 
-import org.apache.commons.math4.distribution.NormalDistribution;
+import org.apache.commons.statistics.distribution.NormalDistribution;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/regression/MillerUpdatingRegression.java b/src/main/java/org/apache/commons/math4/stat/regression/MillerUpdatingRegression.java
index 9782217..4f421d1 100644
--- a/src/main/java/org/apache/commons/math4/stat/regression/MillerUpdatingRegression.java
+++ b/src/main/java/org/apache/commons/math4/stat/regression/MillerUpdatingRegression.java
@@ -21,7 +21,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * This class is a concrete implementation of the {@link UpdatingMultipleLinearRegression} interface.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/regression/RegressionResults.java b/src/main/java/org/apache/commons/math4/stat/regression/RegressionResults.java
index 28e05fc..9f462ed 100644
--- a/src/main/java/org/apache/commons/math4/stat/regression/RegressionResults.java
+++ b/src/main/java/org/apache/commons/math4/stat/regression/RegressionResults.java
@@ -21,7 +21,6 @@
 
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.MathArrays;
 
 /**
  * Results of a Multiple Linear Regression model fit.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/regression/SimpleRegression.java b/src/main/java/org/apache/commons/math4/stat/regression/SimpleRegression.java
index f68bc27..55b0d44 100644
--- a/src/main/java/org/apache/commons/math4/stat/regression/SimpleRegression.java
+++ b/src/main/java/org/apache/commons/math4/stat/regression/SimpleRegression.java
@@ -24,7 +24,7 @@
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 /**
  * Estimates an ordinary least squares regression model
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/transform/FastCosineTransformer.java b/src/main/java/org/apache/commons/math4/transform/FastCosineTransformer.java
index 969675e..35d724b 100644
--- a/src/main/java/org/apache/commons/math4/transform/FastCosineTransformer.java
+++ b/src/main/java/org/apache/commons/math4/transform/FastCosineTransformer.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math4.complex.Complex;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.util.ArithmeticUtils;
+import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/transform/FastFourierTransformer.java b/src/main/java/org/apache/commons/math4/transform/FastFourierTransformer.java
index d599f7c..522ea64 100644
--- a/src/main/java/org/apache/commons/math4/transform/FastFourierTransformer.java
+++ b/src/main/java/org/apache/commons/math4/transform/FastFourierTransformer.java
@@ -24,7 +24,7 @@
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.MathIllegalStateException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.util.ArithmeticUtils;
+import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/transform/FastHadamardTransformer.java b/src/main/java/org/apache/commons/math4/transform/FastHadamardTransformer.java
index cf8e45d..1aafada 100644
--- a/src/main/java/org/apache/commons/math4/transform/FastHadamardTransformer.java
+++ b/src/main/java/org/apache/commons/math4/transform/FastHadamardTransformer.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math4.analysis.UnivariateFunction;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.util.ArithmeticUtils;
+import org.apache.commons.numbers.core.ArithmeticUtils;
 
 /**
  * Implements the <a href="http://www.archive.chipcenter.com/dsp/DSP000517F1.html">Fast Hadamard Transform</a> (FHT).
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/transform/FastSineTransformer.java b/src/main/java/org/apache/commons/math4/transform/FastSineTransformer.java
index 440ec7d..71e2cfb 100644
--- a/src/main/java/org/apache/commons/math4/transform/FastSineTransformer.java
+++ b/src/main/java/org/apache/commons/math4/transform/FastSineTransformer.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math4.complex.Complex;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.util.ArithmeticUtils;
+import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/transform/TransformUtils.java b/src/main/java/org/apache/commons/math4/transform/TransformUtils.java
index 27915b2..c37d03f 100644
--- a/src/main/java/org/apache/commons/math4/transform/TransformUtils.java
+++ b/src/main/java/org/apache/commons/math4/transform/TransformUtils.java
@@ -18,7 +18,7 @@
 
 import java.util.Arrays;
 
-import org.apache.commons.math4.complex.Complex;
+import org.apache.commons.numbers.complex.Complex;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/util/MathArrays.java b/src/main/java/org/apache/commons/math4/util/MathArrays.java
index b331080..e1e4478 100644
--- a/src/main/java/org/apache/commons/math4/util/MathArrays.java
+++ b/src/main/java/org/apache/commons/math4/util/MathArrays.java
@@ -27,7 +27,6 @@
 import java.util.TreeSet;
 
 import org.apache.commons.math4.Field;
-import org.apache.commons.math4.distribution.UniformIntegerDistribution;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.MathArithmeticException;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
<end>
<start>
diff --git a/src/test/java/org/apache/commons/math4/linear/InverseHilbertMatrix.java b/src/test/java/org/apache/commons/math4/linear/InverseHilbertMatrix.java
index 0eba604..141f34b 100644
--- a/src/test/java/org/apache/commons/math4/linear/InverseHilbertMatrix.java
+++ b/src/test/java/org/apache/commons/math4/linear/InverseHilbertMatrix.java
@@ -20,7 +20,7 @@
 import org.apache.commons.math4.linear.ArrayRealVector;
 import org.apache.commons.math4.linear.RealLinearOperator;
 import org.apache.commons.math4.linear.RealVector;
-import org.apache.commons.math4.util.ArithmeticUtils;
+import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.util.CombinatoricsUtils;
 
 /**
<end>
<start>
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/genetics/HelloWorldExample.java b/src/userguide/java/org/apache/commons/math4/userguide/genetics/HelloWorldExample.java
index a02cc8e..d5eeba0 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/genetics/HelloWorldExample.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/genetics/HelloWorldExample.java
@@ -35,7 +35,7 @@
 import org.apache.commons.math4.genetics.StoppingCondition;
 import org.apache.commons.math4.genetics.TournamentSelection;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.util.Precision;
+import org.apache.commons.numbers.core.Precision;
 
 public class HelloWorldExample {
     public static final int    POPULATION_SIZE   = 1000;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/partitioning/AbstractSubHyperplane.java b/src/main/java/org/apache/commons/math4/geometry/partitioning/AbstractSubHyperplane.java
index f75998c..76c925c 100644
--- a/src/main/java/org/apache/commons/math4/geometry/partitioning/AbstractSubHyperplane.java
+++ b/src/main/java/org/apache/commons/math4/geometry/partitioning/AbstractSubHyperplane.java
@@ -180,10 +180,6 @@
 
     /** {@inheritDoc} */
     @Override
-    public abstract Side side(Hyperplane<S> hyper);
-
-    /** {@inheritDoc} */
-    @Override
     public abstract SplitSubHyperplane<S> split(Hyperplane<S> hyper);
 
     /** {@inheritDoc} */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ml/neuralnet/twod/NeuronSquareMesh2D.java b/src/main/java/org/apache/commons/math4/ml/neuralnet/twod/NeuronSquareMesh2D.java
index dd6cf6a..d3c233b 100644
--- a/src/main/java/org/apache/commons/math4/ml/neuralnet/twod/NeuronSquareMesh2D.java
+++ b/src/main/java/org/apache/commons/math4/ml/neuralnet/twod/NeuronSquareMesh2D.java
@@ -324,7 +324,7 @@
             }
         }
 
-        int rowOffset = 0;
+        final int rowOffset;
         switch (alongColDir) {
         case UP:
             rowOffset = -1;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/GeometricDistribution.java b/src/main/java/org/apache/commons/math4/distribution/GeometricDistribution.java
index 011c21f..55456cc 100644
--- a/src/main/java/org/apache/commons/math4/distribution/GeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/GeometricDistribution.java
@@ -187,6 +187,6 @@
         if (p == 0) {
             return 0;
         }
-        return Math.max(0, (int) Math.ceil((FastMath.log1p(-p)/log1mProbabilityOfSuccess-1)));
+        return Math.max(0, (int) Math.ceil(FastMath.log1p(-p)/log1mProbabilityOfSuccess-1));
     }
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/EulerStepInterpolator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/EulerStepInterpolator.java
index c31db8e..74691b5 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/EulerStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/EulerStepInterpolator.java
@@ -59,8 +59,11 @@
    * to create the step interpolators by cloning an uninitialized model
    * and later initializing the copy.
    */
-  EulerStepInterpolator() {
+  // CHECKSTYLE: stop RedundantModifier
+  // the public modifier here is needed for serialization
+  public EulerStepInterpolator() {
   }
+  // CHECKSTYLE: resume RedundantModifier
 
   /** Copy constructor.
    * @param interpolator interpolator to copy from. The copy is a deep
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/GillStepInterpolator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/GillStepInterpolator.java
index 3a7c034..435c5b2 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/GillStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/GillStepInterpolator.java
@@ -75,8 +75,11 @@
    * to create the step interpolators by cloning an uninitialized model
    * and later initializing the copy.
    */
-  GillStepInterpolator() {
+  // CHECKSTYLE: stop RedundantModifier
+  // the public modifier here is needed for serialization
+  public GillStepInterpolator() {
   }
+  // CHECKSTYLE: resume RedundantModifier
 
   /** Copy constructor.
    * @param interpolator interpolator to copy from. The copy is a deep
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/HighamHall54StepInterpolator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/HighamHall54StepInterpolator.java
index 01a00d0..4e40f81 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/HighamHall54StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/HighamHall54StepInterpolator.java
@@ -45,9 +45,12 @@
    * to create the step interpolators by cloning an uninitialized model
    * and later initializing the copy.
    */
-  HighamHall54StepInterpolator() {
+  // CHECKSTYLE: stop RedundantModifier
+  // the public modifier here is needed for serialization
+  public HighamHall54StepInterpolator() {
     super();
   }
+  // CHECKSTYLE: resume RedundantModifier
 
   /** Copy constructor.
    * @param interpolator interpolator to copy from. The copy is a deep
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/MidpointStepInterpolator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/MidpointStepInterpolator.java
index 38393ca..45014bb 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/MidpointStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/MidpointStepInterpolator.java
@@ -61,8 +61,11 @@
    * to create the step interpolators by cloning an uninitialized model
    * and later initializing the copy.
    */
-  MidpointStepInterpolator() {
+  // CHECKSTYLE: stop RedundantModifier
+  // the public modifier here is needed for serialization
+  public MidpointStepInterpolator() {
   }
+  // CHECKSTYLE: resume RedundantModifier
 
   /** Copy constructor.
    * @param interpolator interpolator to copy from. The copy is a deep
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/ThreeEighthesStepInterpolator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/ThreeEighthesStepInterpolator.java
index 2dba16e..c5a20e0 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/ThreeEighthesStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/ThreeEighthesStepInterpolator.java
@@ -71,8 +71,11 @@
    * to create the step interpolators by cloning an uninitialized model
    * and later initializing the copy.
    */
-  ThreeEighthesStepInterpolator() {
+  // CHECKSTYLE: stop RedundantModifier
+  // the public modifier here is needed for serialization
+  public ThreeEighthesStepInterpolator() {
   }
+  // CHECKSTYLE: resume RedundantModifier
 
   /** Copy constructor.
    * @param interpolator interpolator to copy from. The copy is a deep
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/random/JDKRandomGenerator.java b/src/main/java/org/apache/commons/math4/random/JDKRandomGenerator.java
index 279e073..5e2e7c4 100644
--- a/src/main/java/org/apache/commons/math4/random/JDKRandomGenerator.java
+++ b/src/main/java/org/apache/commons/math4/random/JDKRandomGenerator.java
@@ -42,7 +42,7 @@
      * @param seed initial seed
      * @since 3.6
      */
-    public JDKRandomGenerator(int seed) {
+    public JDKRandomGenerator(long seed) {
         setSeed(seed);
     }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/random/AbstractWell.java b/src/main/java/org/apache/commons/math4/random/AbstractWell.java
index b2d61a3..a389d58 100644
--- a/src/main/java/org/apache/commons/math4/random/AbstractWell.java
+++ b/src/main/java/org/apache/commons/math4/random/AbstractWell.java
@@ -38,7 +38,7 @@
     extends BaseRandomGenerator
     implements Serializable {
     /** Serializable version identifier. */
-    private static final long serialVersionUID = 20151228L;
+    private static final long serialVersionUID = 20150228L;
     /** Current index in the bytes pool. */
     protected int index;
     /** Bytes pool. */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/random/AbstractWell.java b/src/main/java/org/apache/commons/math4/random/AbstractWell.java
index 461e547..88cb2bb 100644
--- a/src/main/java/org/apache/commons/math4/random/AbstractWell.java
+++ b/src/main/java/org/apache/commons/math4/random/AbstractWell.java
@@ -134,7 +134,7 @@
      */
     private void setSeedInternal(final int[] seed) {
         if (seed == null) {
-            setSeedInternal(System.currentTimeMillis() + System.identityHashCode(this));
+            setSeed(System.currentTimeMillis() + System.identityHashCode(this));
             return;
         }
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/FieldODEState.java b/src/main/java/org/apache/commons/math4/ode/FieldODEState.java
index 1c7bbe6..de01d97 100644
--- a/src/main/java/org/apache/commons/math4/ode/FieldODEState.java
+++ b/src/main/java/org/apache/commons/math4/ode/FieldODEState.java
@@ -113,7 +113,7 @@
      * @return number of secondary states.
      */
     public int getNumberOfSecondaryStates() {
-        return secondaryState.length;
+        return secondaryState == null ? 0 : secondaryState.length;
     }
 
     /** Get secondary state dimension.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/RungeKuttaFieldIntegrator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/RungeKuttaFieldIntegrator.java
index 32ac029..d6f9026 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/RungeKuttaFieldIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/RungeKuttaFieldIntegrator.java
@@ -93,7 +93,7 @@
      * @return p/q computed in the instance field
      */
     protected T fraction(final int p, final int q) {
-        return getField().getOne().multiply(p).divide(q);
+        return getField().getZero().add(p).divide(q);
     }
 
     /** Get the time steps from Butcher array (without the first zero).
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/ClassicalRungeKuttaFieldIntegrator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/ClassicalRungeKuttaFieldIntegrator.java
index fe413bc..4bb0f61 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/ClassicalRungeKuttaFieldIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/ClassicalRungeKuttaFieldIntegrator.java
@@ -101,7 +101,7 @@
     @Override
     protected ClassicalRungeKuttaFieldStepInterpolator<T>
         createInterpolator(final boolean forward, final FieldEquationsMapper<T> mapper) {
-        return new ClassicalRungeKuttaFieldStepInterpolator<T>(this, forward, mapper);
+        return new ClassicalRungeKuttaFieldStepInterpolator<T>(getField(), forward, mapper);
     }
 
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince54FieldIntegrator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince54FieldIntegrator.java
index 68c2b40..a12453d 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince54FieldIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince54FieldIntegrator.java
@@ -190,7 +190,7 @@
     @Override
     protected DormandPrince54FieldStepInterpolator<T>
         createInterpolator(final boolean forward, final FieldEquationsMapper<T> mapper) {
-        return new DormandPrince54FieldStepInterpolator<T>(this, forward, mapper);
+        return new DormandPrince54FieldStepInterpolator<T>(getField(), forward, mapper);
     }
 
     /** {@inheritDoc} */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince853FieldIntegrator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince853FieldIntegrator.java
index 5d7a0a3..de5adda 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince853FieldIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince853FieldIntegrator.java
@@ -396,7 +396,7 @@
     @Override
     protected DormandPrince853FieldStepInterpolator<T>
         createInterpolator(final boolean forward, final FieldEquationsMapper<T> mapper) {
-        return new DormandPrince853FieldStepInterpolator<T>(this, forward, mapper);
+        return new DormandPrince853FieldStepInterpolator<T>(getField(), forward, mapper);
     }
 
     /** {@inheritDoc} */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/EulerFieldIntegrator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/EulerFieldIntegrator.java
index 20eef2b..c28e3fe 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/EulerFieldIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/EulerFieldIntegrator.java
@@ -86,7 +86,7 @@
     @Override
     protected EulerFieldStepInterpolator<T>
         createInterpolator(final boolean forward, final FieldEquationsMapper<T> mapper) {
-        return new EulerFieldStepInterpolator<T>(this, forward, mapper);
+        return new EulerFieldStepInterpolator<T>(getField(), forward, mapper);
     }
 
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/GillFieldIntegrator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/GillFieldIntegrator.java
index 9a123e0..1b53dba 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/GillFieldIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/GillFieldIntegrator.java
@@ -111,7 +111,7 @@
     @Override
     protected GillFieldStepInterpolator<T>
         createInterpolator(final boolean forward, final FieldEquationsMapper<T> mapper) {
-        return new GillFieldStepInterpolator<T>(this, forward, mapper);
+        return new GillFieldStepInterpolator<T>(getField(), forward, mapper);
     }
 
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/HighamHall54FieldIntegrator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/HighamHall54FieldIntegrator.java
index efe9b30..c04e9c6 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/HighamHall54FieldIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/HighamHall54FieldIntegrator.java
@@ -165,7 +165,7 @@
     @Override
     protected HighamHall54FieldStepInterpolator<T>
         createInterpolator(final boolean forward, final FieldEquationsMapper<T> mapper) {
-        return new HighamHall54FieldStepInterpolator<T>(this, forward, mapper);
+        return new HighamHall54FieldStepInterpolator<T>(getField(), forward, mapper);
     }
 
     /** {@inheritDoc} */
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/LutherFieldIntegrator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/LutherFieldIntegrator.java
index b9e11fc..520d6ba 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/LutherFieldIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/LutherFieldIntegrator.java
@@ -138,7 +138,7 @@
     @Override
     protected LutherFieldStepInterpolator<T>
         createInterpolator(final boolean forward, final FieldEquationsMapper<T> mapper) {
-        return new LutherFieldStepInterpolator<T>(this, forward, mapper);
+        return new LutherFieldStepInterpolator<T>(getField(), forward, mapper);
     }
 
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/MidpointFieldIntegrator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/MidpointFieldIntegrator.java
index a9c3438..a32a961 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/MidpointFieldIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/MidpointFieldIntegrator.java
@@ -86,7 +86,7 @@
     @Override
     protected MidpointFieldStepInterpolator<T>
         createInterpolator(final boolean forward, final FieldEquationsMapper<T> mapper) {
-        return new MidpointFieldStepInterpolator<T>(this, forward, mapper);
+        return new MidpointFieldStepInterpolator<T>(getField(), forward, mapper);
     }
 
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/ThreeEighthesFieldIntegrator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/ThreeEighthesFieldIntegrator.java
index fed564a..e5bd0bc 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/ThreeEighthesFieldIntegrator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/ThreeEighthesFieldIntegrator.java
@@ -100,7 +100,7 @@
     @Override
     protected ThreeEighthesFieldStepInterpolator<T>
         createInterpolator(final boolean forward, final FieldEquationsMapper<T> mapper) {
-        return new ThreeEighthesFieldStepInterpolator<T>(this, forward, mapper);
+        return new ThreeEighthesFieldStepInterpolator<T>(getField(), forward, mapper);
     }
 
 }
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince853FieldStepInterpolator.java b/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince853FieldStepInterpolator.java
index 5c548a3..6487ccf 100644
--- a/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince853FieldStepInterpolator.java
+++ b/src/main/java/org/apache/commons/math4/ode/nonstiff/DormandPrince853FieldStepInterpolator.java
@@ -52,7 +52,7 @@
         super(field, forward, mapper);
 
         // interpolation weights
-        d = MathArrays.buildArray(getField(), 4, 16);
+        d = MathArrays.buildArray(getField(), 7, 16);
 
         // this row is the same as the b array
         d[0][ 0] = fraction(104257, 1929240);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java b/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
index abccb93..31a1d30 100644
--- a/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/BetaDistribution.java
@@ -18,7 +18,7 @@
 
 import org.apache.commons.math4.exception.NumberIsTooSmallException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.special.Beta;
 import org.apache.commons.math4.special.Gamma;
 import org.apache.commons.math4.util.FastMath;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
index 88ce037..bfcd1af 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedDistribution.java
@@ -29,7 +29,7 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.Pair;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
index 7cf834b..0e34f5a 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedRealDistribution.java
@@ -273,15 +273,6 @@
         return true;
     }
 
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    @Deprecated
-    public double sample() {
-        return innerDistribution.sample();
-    }
-
     /** {@inheritDoc} */
     @Override
     public RealDistribution.Sampler createSampler(final UniformRandomProvider rng) {
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ml/neuralnet/FeatureInitializerFactory.java b/src/main/java/org/apache/commons/math4/ml/neuralnet/FeatureInitializerFactory.java
index 9c36dd3..9ab532c 100644
--- a/src/main/java/org/apache/commons/math4/ml/neuralnet/FeatureInitializerFactory.java
+++ b/src/main/java/org/apache/commons/math4/ml/neuralnet/FeatureInitializerFactory.java
@@ -21,8 +21,8 @@
 import org.apache.commons.math4.analysis.function.Constant;
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
-import org.apache.commons.math4.rng.RandomSource;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * Creates functions that will select the initial values of a neuron's
<end>
<start>
diff --git a/src/test/java/org/apache/commons/math4/ml/neuralnet/sofm/TravellingSalesmanSolver.java b/src/test/java/org/apache/commons/math4/ml/neuralnet/sofm/TravellingSalesmanSolver.java
index ebd4200..a946c69 100644
--- a/src/test/java/org/apache/commons/math4/ml/neuralnet/sofm/TravellingSalesmanSolver.java
+++ b/src/test/java/org/apache/commons/math4/ml/neuralnet/sofm/TravellingSalesmanSolver.java
@@ -44,8 +44,8 @@
 import org.apache.commons.math4.ml.neuralnet.sofm.LearningFactorFunctionFactory;
 import org.apache.commons.math4.ml.neuralnet.sofm.NeighbourhoodSizeFunction;
 import org.apache.commons.math4.ml.neuralnet.sofm.NeighbourhoodSizeFunctionFactory;
-import org.apache.commons.math4.rng.RandomSource;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/EmpiricalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EmpiricalDistribution.java
index f898d95..51444b7 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EmpiricalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EmpiricalDistribution.java
@@ -37,7 +37,7 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.stat.descriptive.StatisticalSummary;
 import org.apache.commons.math4.stat.descriptive.SummaryStatistics;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
 
<end>
<start>
diff --git a/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomCirclePointGenerator.java b/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomCirclePointGenerator.java
index 59dd8af..07e9286 100644
--- a/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomCirclePointGenerator.java
+++ b/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomCirclePointGenerator.java
@@ -20,8 +20,8 @@
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 import org.apache.commons.math4.geometry.euclidean.twod.Vector2D;
-import org.apache.commons.math4.rng.UniformRandomProvider;
-import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
 
<end>
<start>
diff --git a/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomStraightLinePointGenerator.java b/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomStraightLinePointGenerator.java
index beff240..52981de 100644
--- a/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomStraightLinePointGenerator.java
+++ b/src/test/java/org/apache/commons/math4/fitting/leastsquares/RandomStraightLinePointGenerator.java
@@ -22,8 +22,8 @@
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
-import org.apache.commons.math4.rng.UniformRandomProvider;
-import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
 
 /**
  * Factory for generating a cloud of points that approximate a straight line.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java b/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java
index 0bc377d..f502e0c 100644
--- a/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/AbstractIntegerDistribution.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistribution.java b/src/main/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistribution.java
index e8f3ed6..110e408 100644
--- a/src/main/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/EnumeratedIntegerDistribution.java
@@ -27,7 +27,7 @@
 import org.apache.commons.math4.exception.NotANumberException;
 import org.apache.commons.math4.exception.NotFiniteNumberException;
 import org.apache.commons.math4.exception.NotPositiveException;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.Pair;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/IntegerDistribution.java b/src/main/java/org/apache/commons/math4/distribution/IntegerDistribution.java
index aed97ab..05076ae 100644
--- a/src/main/java/org/apache/commons/math4/distribution/IntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/IntegerDistribution.java
@@ -18,7 +18,7 @@
 
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.OutOfRangeException;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * Interface for distributions on the integers.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java b/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java
index 49a08da..1c7b8db 100644
--- a/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/PoissonDistribution.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math4.util.CombinatoricsUtils;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathUtils;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * Implementation of the Poisson distribution.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/UniformIntegerDistribution.java b/src/main/java/org/apache/commons/math4/distribution/UniformIntegerDistribution.java
index d1489d3..1e89c43 100644
--- a/src/main/java/org/apache/commons/math4/distribution/UniformIntegerDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/UniformIntegerDistribution.java
@@ -19,7 +19,7 @@
 
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * Implementation of the uniform integer distribution.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/ZipfDistribution.java b/src/main/java/org/apache/commons/math4/distribution/ZipfDistribution.java
index 82e9fb3..3ea152c 100644
--- a/src/main/java/org/apache/commons/math4/distribution/ZipfDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/ZipfDistribution.java
@@ -19,7 +19,7 @@
 
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java b/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java
index 2c942a9..f906ac5 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java
@@ -17,11 +17,12 @@
 
 package org.apache.commons.math4.userguide.sofm;
 
+import org.apache.commons.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
+
 import org.apache.commons.math4.geometry.euclidean.threed.Vector3D;
 import org.apache.commons.math4.geometry.euclidean.threed.Rotation;
 import org.apache.commons.math4.random.UnitSphereRandomVectorGenerator;
-import org.apache.commons.math4.rng.UniformRandomProvider;
-import org.apache.commons.math4.rng.RandomSource;
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.UniformRealDistribution;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/AbstractMultivariateRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/AbstractMultivariateRealDistribution.java
index 1c4adef..f48d188 100644
--- a/src/main/java/org/apache/commons/math4/distribution/AbstractMultivariateRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/AbstractMultivariateRealDistribution.java
@@ -18,7 +18,7 @@
 
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * Base class for multivariate probability distributions.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateRealDistribution.java
index 4caee3f..893c543 100644
--- a/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/MixtureMultivariateRealDistribution.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math4.exception.MathArithmeticException;
 import org.apache.commons.math4.exception.NotPositiveException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.Pair;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math4/distribution/MultivariateNormalDistribution.java
index da270ad..097caa0 100644
--- a/src/main/java/org/apache/commons/math4/distribution/MultivariateNormalDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/MultivariateNormalDistribution.java
@@ -22,7 +22,7 @@
 import org.apache.commons.math4.linear.NonPositiveDefiniteMatrixException;
 import org.apache.commons.math4.linear.RealMatrix;
 import org.apache.commons.math4.linear.SingularMatrixException;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/MultivariateRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/MultivariateRealDistribution.java
index c299684..ef5fca9 100644
--- a/src/main/java/org/apache/commons/math4/distribution/MultivariateRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/MultivariateRealDistribution.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math4.distribution;
 
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * Base interface for multivariate distributions on the reals.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/stat/ranking/NaturalRanking.java b/src/main/java/org/apache/commons/math4/stat/ranking/NaturalRanking.java
index 9b28a8e..9d468fd 100644
--- a/src/main/java/org/apache/commons/math4/stat/ranking/NaturalRanking.java
+++ b/src/main/java/org/apache/commons/math4/stat/ranking/NaturalRanking.java
@@ -24,8 +24,8 @@
 
 import org.apache.commons.math4.exception.MathInternalError;
 import org.apache.commons.math4.exception.NotANumberException;
-import org.apache.commons.math4.rng.UniformRandomProvider;
-import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
 import org.apache.commons.math4.random.RandomUtils;
 import org.apache.commons.math4.util.FastMath;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/genetics/GeneticAlgorithm.java b/src/main/java/org/apache/commons/math4/genetics/GeneticAlgorithm.java
index d76fe93..b43bf52 100644
--- a/src/main/java/org/apache/commons/math4/genetics/GeneticAlgorithm.java
+++ b/src/main/java/org/apache/commons/math4/genetics/GeneticAlgorithm.java
@@ -18,8 +18,8 @@
 
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.RandomSource;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * Implementation of a genetic algorithm. All factors that govern the operation
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/genetics/NPointCrossover.java b/src/main/java/org/apache/commons/math4/genetics/NPointCrossover.java
index 847e9bc..6a497ab 100644
--- a/src/main/java/org/apache/commons/math4/genetics/NPointCrossover.java
+++ b/src/main/java/org/apache/commons/math4/genetics/NPointCrossover.java
@@ -24,7 +24,7 @@
 import org.apache.commons.math4.exception.NotStrictlyPositiveException;
 import org.apache.commons.math4.exception.NumberIsTooLargeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * N-point crossover policy. For each iteration a random crossover point is
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/genetics/OrderedCrossover.java b/src/main/java/org/apache/commons/math4/genetics/OrderedCrossover.java
index 6b6502c..a1e7772 100644
--- a/src/main/java/org/apache/commons/math4/genetics/OrderedCrossover.java
+++ b/src/main/java/org/apache/commons/math4/genetics/OrderedCrossover.java
@@ -25,7 +25,7 @@
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/genetics/UniformCrossover.java b/src/main/java/org/apache/commons/math4/genetics/UniformCrossover.java
index df5b929..74fac3d 100644
--- a/src/main/java/org/apache/commons/math4/genetics/UniformCrossover.java
+++ b/src/main/java/org/apache/commons/math4/genetics/UniformCrossover.java
@@ -23,7 +23,7 @@
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * Perform Uniform Crossover [UX] on the specified chromosomes. A fixed mixing
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ml/clustering/FuzzyKMeansClusterer.java b/src/main/java/org/apache/commons/math4/ml/clustering/FuzzyKMeansClusterer.java
index f650d24..cb6f011 100644
--- a/src/main/java/org/apache/commons/math4/ml/clustering/FuzzyKMeansClusterer.java
+++ b/src/main/java/org/apache/commons/math4/ml/clustering/FuzzyKMeansClusterer.java
@@ -28,8 +28,8 @@
 import org.apache.commons.math4.linear.RealMatrix;
 import org.apache.commons.math4.ml.distance.DistanceMeasure;
 import org.apache.commons.math4.ml.distance.EuclideanDistance;
-import org.apache.commons.math4.rng.RandomSource;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
 import org.apache.commons.math4.util.MathUtils;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/ml/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math4/ml/clustering/KMeansPlusPlusClusterer.java
index 0b8ad96..e0eeac4 100644
--- a/src/main/java/org/apache/commons/math4/ml/clustering/KMeansPlusPlusClusterer.java
+++ b/src/main/java/org/apache/commons/math4/ml/clustering/KMeansPlusPlusClusterer.java
@@ -28,8 +28,8 @@
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.ml.distance.DistanceMeasure;
 import org.apache.commons.math4.ml.distance.EuclideanDistance;
-import org.apache.commons.math4.rng.RandomSource;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.stat.descriptive.moment.Variance;
 import org.apache.commons.math4.util.MathUtils;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java b/src/main/java/org/apache/commons/math4/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java
index 8fe9afe..6eb2ecc 100644
--- a/src/main/java/org/apache/commons/math4/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math4/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java
@@ -35,7 +35,7 @@
 import org.apache.commons.math4.optim.PointValuePair;
 import org.apache.commons.math4.optim.nonlinear.scalar.GoalType;
 import org.apache.commons.math4.optim.nonlinear.scalar.MultivariateOptimizer;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.util.FastMath;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/optim/univariate/MultiStartUnivariateOptimizer.java b/src/main/java/org/apache/commons/math4/optim/univariate/MultiStartUnivariateOptimizer.java
index 65bfa67..373a307 100644
--- a/src/main/java/org/apache/commons/math4/optim/univariate/MultiStartUnivariateOptimizer.java
+++ b/src/main/java/org/apache/commons/math4/optim/univariate/MultiStartUnivariateOptimizer.java
@@ -26,7 +26,7 @@
 import org.apache.commons.math4.optim.MaxEval;
 import org.apache.commons.math4.optim.OptimizationData;
 import org.apache.commons.math4.optim.nonlinear.scalar.GoalType;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * Special implementation of the {@link UnivariateOptimizer} interface
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/random/GaussianRandomGenerator.java b/src/main/java/org/apache/commons/math4/random/GaussianRandomGenerator.java
index c70a7df..fc7f98c 100644
--- a/src/main/java/org/apache/commons/math4/random/GaussianRandomGenerator.java
+++ b/src/main/java/org/apache/commons/math4/random/GaussianRandomGenerator.java
@@ -17,7 +17,7 @@
 
 package org.apache.commons.math4.random;
 
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/random/StableRandomGenerator.java b/src/main/java/org/apache/commons/math4/random/StableRandomGenerator.java
index 3199c0f..f3a851b 100644
--- a/src/main/java/org/apache/commons/math4/random/StableRandomGenerator.java
+++ b/src/main/java/org/apache/commons/math4/random/StableRandomGenerator.java
@@ -16,7 +16,7 @@
  */
 package org.apache.commons.math4.random;
 
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.exception.NullArgumentException;
 import org.apache.commons.math4.exception.OutOfRangeException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/random/UniformRandomGenerator.java b/src/main/java/org/apache/commons/math4/random/UniformRandomGenerator.java
index 1a07ba4..d43c6d9 100644
--- a/src/main/java/org/apache/commons/math4/random/UniformRandomGenerator.java
+++ b/src/main/java/org/apache/commons/math4/random/UniformRandomGenerator.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math4.random;
 
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.UniformRandomProvider;
 
 /**
  * This class implements a normalized uniform random generator.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/random/UnitSphereRandomVectorGenerator.java b/src/main/java/org/apache/commons/math4/random/UnitSphereRandomVectorGenerator.java
index 33993f5..19a64d6 100644
--- a/src/main/java/org/apache/commons/math4/random/UnitSphereRandomVectorGenerator.java
+++ b/src/main/java/org/apache/commons/math4/random/UnitSphereRandomVectorGenerator.java
@@ -17,8 +17,8 @@
 
 package org.apache.commons.math4.random;
 
-import org.apache.commons.math4.rng.RandomSource;
-import org.apache.commons.math4.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.UniformRandomProvider;
 import org.apache.commons.math4.distribution.RealDistribution;
 import org.apache.commons.math4.distribution.NormalDistribution;
 import org.apache.commons.math4.util.FastMath;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/util/RandomPivotingStrategy.java b/src/main/java/org/apache/commons/math4/util/RandomPivotingStrategy.java
index dded9f0..8161ccd 100644
--- a/src/main/java/org/apache/commons/math4/util/RandomPivotingStrategy.java
+++ b/src/main/java/org/apache/commons/math4/util/RandomPivotingStrategy.java
@@ -21,8 +21,8 @@
 import java.io.ObjectOutputStream;
 import java.io.ObjectInputStream;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
-import org.apache.commons.math4.rng.UniformRandomProvider;
-import org.apache.commons.math4.rng.RandomSource;
+import org.apache.commons.rng.UniformRandomProvider;
+import org.apache.commons.rng.RandomSource;
 
 /**
  * A strategy of selecting random index between begin and end indices.
<end>
<start>
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/LowDiscrepancyGeneratorComparison.java b/src/userguide/java/org/apache/commons/math4/userguide/LowDiscrepancyGeneratorComparison.java
index f1b81d5..e43cba4 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/LowDiscrepancyGeneratorComparison.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/LowDiscrepancyGeneratorComparison.java
@@ -33,7 +33,7 @@
 import javax.swing.JTextArea;
 
 import org.apache.commons.rng.UniformRandomProvider;
-import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.simple.RandomSource;
 
 import org.apache.commons.math4.geometry.euclidean.twod.Vector2D;
 import org.apache.commons.math4.random.HaltonSequenceGenerator;
<end>
<start>
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/filter/CannonballExample.java b/src/userguide/java/org/apache/commons/math4/userguide/filter/CannonballExample.java
index b26a489..61cea88 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/filter/CannonballExample.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/filter/CannonballExample.java
@@ -26,7 +26,7 @@
 import javax.swing.JPanel;
 
 import org.apache.commons.rng.UniformRandomProvider;
-import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.simple.RandomSource;
 
 import org.apache.commons.math4.filter.DefaultMeasurementModel;
 import org.apache.commons.math4.filter.DefaultProcessModel;
<end>
<start>
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/filter/ConstantVoltageExample.java b/src/userguide/java/org/apache/commons/math4/userguide/filter/ConstantVoltageExample.java
index 2dc414f..5faccc6 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/filter/ConstantVoltageExample.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/filter/ConstantVoltageExample.java
@@ -26,7 +26,7 @@
 import javax.swing.JPanel;
 
 import org.apache.commons.rng.UniformRandomProvider;
-import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.simple.RandomSource;
 
 import org.apache.commons.math4.filter.DefaultMeasurementModel;
 import org.apache.commons.math4.filter.DefaultProcessModel;
<end>
<start>
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/genetics/Polygon.java b/src/userguide/java/org/apache/commons/math4/userguide/genetics/Polygon.java
index c9cf278..ae35d51 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/genetics/Polygon.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/genetics/Polygon.java
@@ -21,7 +21,7 @@
 import java.awt.geom.GeneralPath;
 
 import org.apache.commons.rng.UniformRandomProvider;
-import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.simple.RandomSource;
 
 import org.apache.commons.math4.genetics.GeneticAlgorithm;
 import org.apache.commons.math4.util.FastMath;
<end>
<start>
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/geometry/GeometryExample.java b/src/userguide/java/org/apache/commons/math4/userguide/geometry/GeometryExample.java
index c0aa91c..fb82522 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/geometry/GeometryExample.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/geometry/GeometryExample.java
@@ -32,7 +32,7 @@
 import javax.swing.JSplitPane;
 
 import org.apache.commons.rng.UniformRandomProvider;
-import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.simple.RandomSource;
 
 import org.apache.commons.math4.geometry.enclosing.Encloser;
 import org.apache.commons.math4.geometry.enclosing.EnclosingBall;
<end>
<start>
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java b/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java
index f906ac5..57393a6 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRings.java
@@ -18,7 +18,7 @@
 package org.apache.commons.math4.userguide.sofm;
 
 import org.apache.commons.rng.UniformRandomProvider;
-import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.simple.RandomSource;
 
 import org.apache.commons.math4.geometry.euclidean.threed.Vector3D;
 import org.apache.commons.math4.geometry.euclidean.threed.Rotation;
<end>
<start>
diff --git a/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRingsClassifier.java b/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRingsClassifier.java
index 7eef617..f6a420b 100644
--- a/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRingsClassifier.java
+++ b/src/userguide/java/org/apache/commons/math4/userguide/sofm/ChineseRingsClassifier.java
@@ -22,7 +22,7 @@
 import java.io.IOException;
 
 import org.apache.commons.rng.UniformRandomProvider;
-import org.apache.commons.rng.RandomSource;
+import org.apache.commons.rng.simple.RandomSource;
 
 import org.apache.commons.math4.ml.neuralnet.SquareNeighbourhood;
 import org.apache.commons.math4.ml.neuralnet.FeatureInitializer;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/Cartesian3D.java b/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/Cartesian3D.java
index 5dc04c5..3880edf 100644
--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/Cartesian3D.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/Cartesian3D.java
@@ -39,7 +39,7 @@
  * <p>Instance of this class are guaranteed to be immutable.</p>
  * @since 4.0
  */
-public class Cartesian3D implements Serializable, Point<Euclidean3D>, Vector<Euclidean3D> {
+public class Cartesian3D extends Vector3D implements Serializable, Point<Euclidean3D> {
 
     /** Null vector (coordinates: 0, 0, 0). */
     public static final Cartesian3D ZERO   = new Cartesian3D(0, 0, 0);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/Cartesian2D.java b/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/Cartesian2D.java
index 51109d0..7e68362 100644
--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/Cartesian2D.java
+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/twod/Cartesian2D.java
@@ -36,7 +36,7 @@
  * <p>Instances of this class are guaranteed to be immutable.</p>
  * @since 4.0
  */
-public class Cartesian2D implements Point<Euclidean2D>, Vector<Euclidean2D> {
+public class Cartesian2D extends Vector2D implements Point<Euclidean2D> {
 
     /** Origin (coordinates: 0, 0). */
     public static final Cartesian2D ZERO   = new Cartesian2D(0, 0);
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/linear/EigenDecomposition.java b/src/main/java/org/apache/commons/math4/linear/EigenDecomposition.java
index 75e9614..53cbf8a 100644
--- a/src/main/java/org/apache/commons/math4/linear/EigenDecomposition.java
+++ b/src/main/java/org/apache/commons/math4/linear/EigenDecomposition.java
@@ -17,14 +17,14 @@
 
 package org.apache.commons.math4.linear;
 
-import org.apache.commons.math4.complex.Complex;
+import org.apache.commons.numbers.complex.Complex;
+import org.apache.commons.numbers.core.Precision;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.MathArithmeticException;
 import org.apache.commons.math4.exception.MathUnsupportedOperationException;
 import org.apache.commons.math4.exception.MaxCountExceededException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
 import org.apache.commons.math4.util.FastMath;
-import org.apache.commons.numbers.core.Precision;
 
 /**
  * Calculates the eigen decomposition of a real matrix.
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/transform/FastCosineTransformer.java b/src/main/java/org/apache/commons/math4/transform/FastCosineTransformer.java
index c2c4562..7515009 100644
--- a/src/main/java/org/apache/commons/math4/transform/FastCosineTransformer.java
+++ b/src/main/java/org/apache/commons/math4/transform/FastCosineTransformer.java
@@ -18,12 +18,12 @@
 
 import java.io.Serializable;
 
+import org.apache.commons.numbers.complex.Complex;
+import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.analysis.FunctionUtils;
 import org.apache.commons.math4.analysis.UnivariateFunction;
-import org.apache.commons.math4.complex.Complex;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/transform/FastFourierTransformer.java b/src/main/java/org/apache/commons/math4/transform/FastFourierTransformer.java
index 522ea64..bd97ea8 100644
--- a/src/main/java/org/apache/commons/math4/transform/FastFourierTransformer.java
+++ b/src/main/java/org/apache/commons/math4/transform/FastFourierTransformer.java
@@ -17,14 +17,14 @@
 package org.apache.commons.math4.transform;
 
 import java.io.Serializable;
+import org.apache.commons.numbers.complex.Complex;
+import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.analysis.FunctionUtils;
 import org.apache.commons.math4.analysis.UnivariateFunction;
-import org.apache.commons.math4.complex.Complex;
 import org.apache.commons.math4.exception.DimensionMismatchException;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.MathIllegalStateException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.util.FastMath;
 import org.apache.commons.math4.util.MathArrays;
 
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/transform/FastSineTransformer.java b/src/main/java/org/apache/commons/math4/transform/FastSineTransformer.java
index b4b27ec..1b4df47 100644
--- a/src/main/java/org/apache/commons/math4/transform/FastSineTransformer.java
+++ b/src/main/java/org/apache/commons/math4/transform/FastSineTransformer.java
@@ -18,12 +18,12 @@
 
 import java.io.Serializable;
 
+import org.apache.commons.numbers.complex.Complex;
+import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.analysis.FunctionUtils;
 import org.apache.commons.math4.analysis.UnivariateFunction;
-import org.apache.commons.math4.complex.Complex;
 import org.apache.commons.math4.exception.MathIllegalArgumentException;
 import org.apache.commons.math4.exception.util.LocalizedFormats;
-import org.apache.commons.numbers.core.ArithmeticUtils;
 import org.apache.commons.math4.util.FastMath;
 
 /**
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java b/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
index 72edd8b..46e098a 100644
--- a/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
+++ b/src/main/java/org/apache/commons/math4/distribution/AbstractRealDistribution.java
@@ -47,7 +47,7 @@
  * @since 3.0
  */
 public abstract class AbstractRealDistribution
-    implements RealDistribution,
+    implements ContinuousDistribution,
                Serializable {
     /** Default absolute accuracy for inverse cumulative computation. */
     public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;
<end>
<start>
diff --git a/src/main/java/org/apache/commons/math4/analysis/solvers/LaguerreSolver.java b/src/main/java/org/apache/commons/math4/analysis/solvers/LaguerreSolver.java
index 8bc3e89..1290468 100644
--- a/src/main/java/org/apache/commons/math4/analysis/solvers/LaguerreSolver.java
+++ b/src/main/java/org/apache/commons/math4/analysis/solvers/LaguerreSolver.java
@@ -17,7 +17,7 @@
 package org.apache.commons.math4.analysis.solvers;
 
 import org.apache.commons.numbers.complex.Complex;
-import org.apache.commons.numbers.complex.ComplexUtils;
+import org.apache.commons.numbers.complex.streams.ComplexUtils;
 import org.apache.commons.math4.analysis.polynomials.PolynomialFunction;
 import org.apache.commons.math4.exception.NoBracketingException;
 import org.apache.commons.math4.exception.NoDataException;
<end>
