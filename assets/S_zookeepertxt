<SOC>
                     int type = bb.getInt();
                     bb = bb.slice();
                     leader.zk.submitRequest(null, sessionId, type, cxid, bb,
-                            null);
+                            qp.getAuthinfo());
                     break;
                 default:
                 }
<EOC>
<SOC>
 				String struct_name = JVector.extractVectorName(jvType);
 				if (vectorStructs.get(struct_name) == null) {
 					vectorStructs.put(struct_name, struct_name);
-					h.write("struct " + struct_name + " {\n    int count;\n" + jv.getElementType().genCDecl("*data") + ";\n};\n");
+					h.write("struct " + struct_name + " {\n    int32_t count;\n" + jv.getElementType().genCDecl("*data") + ";\n};\n");
 					h.write("int serialize_" + struct_name + "(struct oarchive *out, const char *tag, struct " + struct_name + " *v);\n");
 					h.write("int deserialize_" + struct_name + "(struct iarchive *in, const char *tag, struct " + struct_name + " *v);\n");
-					h.write("int allocate_" + struct_name + "(struct " + struct_name + " *v, int len);\n");
+					h.write("int allocate_" + struct_name + "(struct " + struct_name + " *v, int32_t len);\n");
 					h.write("int deallocate_" + struct_name + "(struct " + struct_name + " *v);\n");
-					c.write("int allocate_" + struct_name + "(struct " + struct_name + " *v, int len) {\n");
+					c.write("int allocate_" + struct_name + "(struct " + struct_name + " *v, int32_t len) {\n");
 					c.write("    if (!len) {\n");
 					c.write("        v->count = 0;\n");
 					c.write("        v->data = 0;\n");

 					c.write("}\n");
 					c.write("int deallocate_" + struct_name + "(struct " + struct_name + " *v) {\n");
 					c.write("    if (v->data) {\n");
-					c.write("        int i;\n");
+					c.write("        int32_t i;\n");
 					c.write("        for(i=0;i<v->count; i++) {\n");
 					c.write("            deallocate_"+JRecord.extractMethodSuffix(jvType)+"(&v->data[i]);\n");
 					c.write("        }\n");

 					c.write("}\n");
 					c.write("int serialize_" + struct_name + "(struct oarchive *out, const char *tag, struct " + struct_name + " *v)\n");
 					c.write("{\n");
-					c.write("    int count = v->count;\n");
+					c.write("    int32_t count = v->count;\n");
 					c.write("    int rc = 0;\n");
-					c.write("    int i;\n");
+					c.write("    int32_t i;\n");
 					c.write("    rc = out->start_vector(out, tag, &count);\n");
 					c.write("    for(i=0;i<v->count;i++) {\n");
 					genSerialize(c, jvType, "data", "data[i]");

 					c.write("int deserialize_" + struct_name + "(struct iarchive *in, const char *tag, struct " + struct_name + " *v)\n");
 					c.write("{\n");
 					c.write("    int rc = 0;\n");
-					c.write("    int i;\n");
+					c.write("    int32_t i;\n");
 					c.write("    rc = in->start_vector(in, tag, &v->count);\n");
 					c.write("    v->data = calloc(v->count, sizeof(*v->data));\n");
 					c.write("    for(i=0;i<v->count;i++) {\n");
<EOC>
